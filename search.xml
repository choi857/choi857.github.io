<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Assert 断言工具类</title>
    <url>/2024/12/07/Assert-%E6%96%AD%E8%A8%80%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="Assert-断言工具类"><a href="#Assert-断言工具类" class="headerlink" title="Assert 断言工具类"></a>Assert 断言工具类</h3><p>在开发过程中，我们经常需要在代码中进行条件判断，如果不满足条件，则抛出异常。Spring 提供了 <code>Assert</code> 类，用于实现断言功能，这可以大大简化我们的代码逻辑。</p>
<h4 id="11-断言参数是否为空"><a href="#11-断言参数是否为空" class="headerlink" title="11 断言参数是否为空"></a>11 断言参数是否为空</h4><p>断言参数是否为空，如果不满足条件，则直接抛出异常。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断言 str 必须为空</span></span><br><span class="line">Assert.isNull(str, <span class="string">&quot;str必须为空&quot;</span>);</span><br><span class="line">Assert.isNull(str, () -&gt; <span class="string">&quot;str必须为空&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断言 str 不能为空</span></span><br><span class="line">Assert.notNull(str, <span class="string">&quot;str不能为空&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果不满足条件，就会抛出 <code>IllegalArgumentException</code> 异常。</p>
<h4 id="1-2-断言集合是否为空"><a href="#1-2-断言集合是否为空" class="headerlink" title="1.2 断言集合是否为空"></a>1.2 断言集合是否为空</h4><p>断言集合是否为空，如果不满足条件，则直接抛出异常。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="literal">null</span>;</span><br><span class="line">Map&lt;String, String&gt; map = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断言 list 不能为空</span></span><br><span class="line">Assert.notEmpty(list, <span class="string">&quot;list不能为空&quot;</span>);</span><br><span class="line">Assert.notEmpty(list, () -&gt; <span class="string">&quot;list不能为空&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断言 map 不能为空</span></span><br><span class="line">Assert.notEmpty(map, <span class="string">&quot;map不能为空&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果不满足条件，就会抛出 <code>IllegalArgumentException</code> 异常。</p>
<h4 id="1-3-断言条件是否满足"><a href="#1-3-断言条件是否满足" class="headerlink" title="1.3 断言条件是否满足"></a>1.3 断言条件是否满足</h4><p>断言是否满足某个条件，如果不满足条件，则直接抛出异常。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断言 list 不能为空</span></span><br><span class="line">Assert.isTrue(CollectionUtils.isNotEmpty(list), <span class="string">&quot;list不能为空&quot;</span>);</span><br><span class="line">Assert.isTrue(CollectionUtils.isNotEmpty(list), () -&gt; <span class="string">&quot;list不能为空&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果不满足条件，就会抛出 <code>IllegalArgumentException</code> 异常。</p>
]]></content>
      <categories>
        <category>提升效率的轮子</category>
      </categories>
  </entry>
  <entry>
    <title>CollectionUtils类操作集合</title>
    <url>/2024/06/23/CollectionUtils%E7%B1%BB%E6%93%8D%E4%BD%9C%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="对集合操作，除了前面说的Collections工具类，CollectionUtils工具类也非常常用。"><a href="#对集合操作，除了前面说的Collections工具类，CollectionUtils工具类也非常常用。" class="headerlink" title="对集合操作，除了前面说的Collections工具类，CollectionUtils工具类也非常常用。"></a>对集合操作，除了前面说的Collections工具类，CollectionUtils工具类也非常常用。</h2><p>目前比较主流的是spring的org.springframework.util包下的CollectionUtils工具类。很多大佬更推荐使用apache的包下的CollectionUtils工具类。</p>
<p>比如spring的CollectionUtils工具类没有判断集合不为空的方法。而apache的CollectionUtils工具类却有。</p>
<h3 id="apache的CollectionUtils工具类为例，介绍一下常用方法。"><a href="#apache的CollectionUtils工具类为例，介绍一下常用方法。" class="headerlink" title="apache的CollectionUtils工具类为例，介绍一下常用方法。"></a>apache的CollectionUtils工具类为例，介绍一下常用方法。</h3><p>1.1 集合判空<br>通过CollectionUtils工具类的isEmpty方法可以轻松判断集合是否为空，isNotEmpty方法判断集合不为空。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;集合为空&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isNotEmpty(list)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;集合不为空&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.2 对两个集合进行操作<br>有时候我们需要对已有的两个集合进行操作，比如取交集或者并集等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list2.add(<span class="number">2</span>);</span><br><span class="line">list2.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取并集</span></span><br><span class="line">Collection&lt;Integer&gt; unionList = CollectionUtils.union(list, list2);</span><br><span class="line">System.out.println(unionList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取交集</span></span><br><span class="line">Collection&lt;Integer&gt; intersectionList = CollectionUtils.intersection(list, list2);</span><br><span class="line">System.out.println(intersectionList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取交集的补集</span></span><br><span class="line">Collection&lt;Integer&gt; disjunctionList = CollectionUtils.disjunction(list, list2);</span><br><span class="line">System.out.println(disjunctionList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取差集</span></span><br><span class="line">Collection&lt;Integer&gt; subtractList = CollectionUtils.subtract(list, list2);</span><br><span class="line">System.out.println(subtractList);</span><br></pre></td></tr></table></figure>
<p>执行结果：<br>[1, 2, 3, 4]<br>[2]<br>[1, 3, 4]<br>[1, 3]<br>说句实话，对两个集合的操作，在实际工作中用得挺多的，特别是很多批量的场景中。以前我们需要写一堆代码，但没想到有现成的轮子。</p>
]]></content>
      <categories>
        <category>提升效率的轮子</category>
      </categories>
  </entry>
  <entry>
    <title>BooleanUtils工具类</title>
    <url>/2024/11/28/BooleanUtils%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="五-BooleanUtils工具类"><a href="#五-BooleanUtils工具类" class="headerlink" title="五. BooleanUtils工具类"></a>五. BooleanUtils工具类</h3><p>在 Java 中，布尔值随处可见。如果你使用了布尔的包装类 <code>Boolean</code>，总感觉有点麻烦，因为它有三种值：<code>null</code>、<code>true</code>、<code>false</code>。我们在处理 <code>Boolean</code> 对象时，需要经常判空。这确实让人头疼！</p>
<p>但如果使用 <code>BooleanUtils</code> 类处理布尔值，心情一下子就愉悦起来了。</p>
<h4 id="5-1-判断-true-或-false"><a href="#5-1-判断-true-或-false" class="headerlink" title="5.1 判断 true 或 false"></a>5.1 判断 true 或 false</h4><p>如果你想判断某个参数的值是 <code>true</code> 或 <code>false</code>，可以直接使用 <code>isTrue</code> 或 <code>isFalse</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line">System.out.println(BooleanUtils.isTrue(aBoolean));   <span class="comment">// 判断是否为 true</span></span><br><span class="line">System.out.println(BooleanUtils.isFalse(aBoolean));  <span class="comment">// 判断是否为 false</span></span><br></pre></td></tr></table></figure>

<h4 id="5-2-判断不为-true-或不为-false"><a href="#5-2-判断不为-true-或不为-false" class="headerlink" title="5.2 判断不为 true 或不为 false"></a>5.2 判断不为 true 或不为 false</h4><p>有时候，需要判断某个参数不为 <code>true</code>，即是 <code>null</code> 或者 <code>false</code>。或者判断不为 <code>false</code>，即是 <code>null</code> 或者 <code>true</code>。可以使用 <code>isNotTrue</code> 或 <code>isNotFalse</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">aBoolean1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(BooleanUtils.isNotTrue(aBoolean));    <span class="comment">// 判断不为 true</span></span><br><span class="line">System.out.println(BooleanUtils.isNotTrue(aBoolean1));   <span class="comment">// 判断不为 true</span></span><br><span class="line">System.out.println(BooleanUtils.isNotFalse(aBoolean));   <span class="comment">// 判断不为 false</span></span><br><span class="line">System.out.println(BooleanUtils.isNotFalse(aBoolean1));  <span class="comment">// 判断不为 false</span></span><br></pre></td></tr></table></figure>

<p><strong>执行结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<h4 id="5-3-转换成数字"><a href="#5-3-转换成数字" class="headerlink" title="5.3 转换成数字"></a>5.3 转换成数字</h4><p>如果你想将 <code>true</code> 转换成数字 <code>1</code>，<code>false</code> 转换成数字 <code>0</code>，可以使用 <code>toInteger</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">aBoolean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(BooleanUtils.toInteger(aBoolean));   <span class="comment">// true 转换为 1</span></span><br><span class="line">System.out.println(BooleanUtils.toInteger(aBoolean1));  <span class="comment">// false 转换为 0</span></span><br></pre></td></tr></table></figure>

<p><strong>执行结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h4 id="5-4-Boolean-转换成布尔值"><a href="#5-4-Boolean-转换成布尔值" class="headerlink" title="5.4 Boolean 转换成布尔值"></a>5.4 Boolean 转换成布尔值</h4><p>我们有时候需要将包装类 <code>Boolean</code> 对象，转换成原始的 <code>boolean</code> 对象，可以使用 <code>toBoolean</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">aBoolean1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(BooleanUtils.toBoolean(aBoolean));               <span class="comment">// 转换为原始布尔值</span></span><br><span class="line">System.out.println(BooleanUtils.toBoolean(aBoolean1));             <span class="comment">// 转换为原始布尔值</span></span><br><span class="line">System.out.println(BooleanUtils.toBooleanDefaultIfNull(aBoolean1, <span class="literal">false</span>));  <span class="comment">// 设置默认值</span></span><br></pre></td></tr></table></figure>

<p><strong>执行结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p>我们无需额外的判空了，而且还可以设置 <code>Boolean</code> 对象为空时返回的默认值。</p>
]]></content>
      <categories>
        <category>提升效率的轮子</category>
      </categories>
  </entry>
  <entry>
    <title>ClassUtils 工具类</title>
    <url>/2024/12/14/ClassUtils-%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="ClassUtils-工具类"><a href="#ClassUtils-工具类" class="headerlink" title="ClassUtils 工具类"></a>ClassUtils 工具类</h3><p><code>ClassUtils</code> 是 Spring 框架中提供的一个非常实用的工具类，位于 <code>org.springframework.util</code> 包中。它包含了许多与类和对象相关的实用方法，可以帮助我们更高效地进行类操作。以下是一些常用的用法：</p>
<h4 id="1-1-获取对象的所有接口"><a href="#1-1-获取对象的所有接口" class="headerlink" title="1.1 获取对象的所有接口"></a>1.1 获取对象的所有接口</h4><p>如果你想获取某个对象的所有接口，可以使用 <code>ClassUtils</code> 的 <code>getAllInterfaces</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt;[] allInterfaces = ClassUtils.getAllInterfaces(<span class="keyword">new</span> <span class="title class_">User</span>());</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>getAllInterfaces</code> 方法会返回一个对象实现的所有接口，包括父类实现的接口。</li>
<li>这个方法非常有用，尤其是在需要检查对象是否实现了某个特定接口时。</li>
</ul>
<h4 id="1-2-获取某个类的包名"><a href="#1-2-获取某个类的包名" class="headerlink" title="1.2 获取某个类的包名"></a>1.2 获取某个类的包名</h4><p>如果你想获取某个类的包名，可以使用 <code>ClassUtils</code> 的 <code>getPackageName</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> ClassUtils.getPackageName(User.class);</span><br><span class="line">System.out.println(packageName);</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>getPackageName</code> 方法会返回类的包名。</li>
<li>这个方法在处理类路径或生成代码时非常有用。</li>
</ul>
<h4 id="1-3-判断某个类是否内部类"><a href="#1-3-判断某个类是否内部类" class="headerlink" title="1.3 判断某个类是否内部类"></a>1.3 判断某个类是否内部类</h4><p>如果你想判断某个类是否是内部类，可以使用 <code>ClassUtils</code> 的 <code>isInnerClass</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(ClassUtils.isInnerClass(User.class));</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>isInnerClass</code> 方法会检查一个类是否是内部类。</li>
<li>内部类是指在一个类的内部定义的类，通常用于封装逻辑或实现特定功能。</li>
</ul>
<h4 id="1-4-判断对象是否代理对象"><a href="#1-4-判断对象是否代理对象" class="headerlink" title="1.4 判断对象是否代理对象"></a>1.4 判断对象是否代理对象</h4><p>如果你想判断对象是否是代理对象，可以使用 <code>ClassUtils</code> 的 <code>isCglibProxy</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(ClassUtils.isCglibProxy(<span class="keyword">new</span> <span class="title class_">User</span>()));</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>isCglibProxy</code> 方法会检查一个对象是否是 CGLIB 代理对象。</li>
<li>CGLIB 是一个常用的字节码生成库，Spring 使用 CGLIB 来生成代理对象，尤其是在使用 AOP 时。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>ClassUtils</code> 是 Spring 提供的一个非常强大的工具类，它包含了许多实用的方法，可以帮助我们更高效地进行类和对象的操作。无论是获取类的所有接口、获取类的包名、判断类是否是内部类，还是判断对象是否是代理对象，<code>ClassUtils</code> 都能提供简单而强大的支持。如果你对类操作有更多的需求，可以进一步探索 <code>ClassUtils</code> 提供的其他方法。</p>
]]></content>
      <categories>
        <category>提升效率的轮子</category>
      </categories>
  </entry>
  <entry>
    <title>Kafka Streams 客户端</title>
    <url>/2024/09/03/Kafka-Streams-%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<h3 id="Kafka-Streams-客户端"><a href="#Kafka-Streams-客户端" class="headerlink" title="Kafka Streams 客户端"></a>Kafka Streams 客户端</h3><p>Kafka Streams 是一个用于构建和部署流处理应用程序的客户端库，它从一个或多个输入 topic 进行连续的计算，并输出到 0 或多个外部 topic 中。</p>
<h4 id="流式计算与批量计算"><a href="#流式计算与批量计算" class="headerlink" title="流式计算与批量计算"></a>流式计算与批量计算</h4><ul>
<li><strong>流式计算</strong>：输入是持续的，一般先定义目标计算，然后数据到来之后将计算逻辑应用于数据，往往用增量计算代替全量计算。</li>
<li><strong>批量计算</strong>：一般先有全量数据集，然后定义计算逻辑，并将计算应用于全量数据。特点是全量计算，并且计算结果一次性全量输出。</li>
</ul>
<h4 id="KTable-和-KStream"><a href="#KTable-和-KStream" class="headerlink" title="KTable 和 KStream"></a>KTable 和 KStream</h4><p><strong>KStream</strong> 和 <strong>KTable</strong> 是 Kafka 中非常重要的概念，以下是它们的区别：</p>
<ul>
<li><strong>KStream</strong>：是一个数据流，可以认为所有的记录都通过 Insert only 的方式插入进这个数据流中。</li>
<li><strong>KTable</strong>：代表一个完整的数据集，可以理解为数据库中的表。每条记录都是 KV 键值对，key 可以理解为数据库中的主键，是唯一的，而 value 代表一条记录。我们可以认为 KTable 中的数据是通过 Update only 的方式进入的。如果是相同的 key，会覆盖掉原来的那条记录。</li>
</ul>
<p><strong>总结</strong>：KStream 是数据流，来多少数据就插入多少数据，是 Insert only；KTable 是数据集，相同 key 只允许保留最新的记录，也就是 Update only。</p>
<h4 id="Kafka-支持的三种时间"><a href="#Kafka-支持的三种时间" class="headerlink" title="Kafka 支持的三种时间"></a>Kafka 支持的三种时间</h4><ol>
<li><strong>事件发生时间</strong>：事件发生的时间，包含在数据记录中。发生时间由 Producer 在构造 ProducerRecord 时指定。并且需要 Broker 或 Topic 将 <code>message.timestamp.type</code> 设置为 <code>CreateTime</code>（默认值）才能生效。</li>
<li><strong>消息接收时间</strong>：也即消息存入 Broker 的时间。当 Broker 或 Topic 将 <code>message.timestamp.type</code> 设置为 <code>LogAppendTime</code> 时生效。此时 Broker 会在接收到消息后，存入磁盘前，将其 timestamp 属性值设置为当前机器时间。一般消息接收时间比较接近于事件发生时间，部分场景下可代替事件发生时间。</li>
<li><strong>消息处理时间</strong>：也即 Kafka Stream 处理消息时的时间。</li>
</ol>
<h4 id="窗口的概念"><a href="#窗口的概念" class="headerlink" title="窗口的概念"></a>窗口的概念</h4><p>流式数据在时间上是无界的，但是聚合操作只能作用在特定（有界）的数据集上。因此，Kafka 引入了窗口的概念，在时间无界的数据流中定义一个边界来用于计算。</p>
<p>Kafka 支持的窗口类型如下：</p>
<ol>
<li><strong>Hopping Time Window</strong>：每隔一段时间输出一次过去一段时间内的数据。例如，每隔 5 秒钟输出一次过去 1 小时内的网站 PV 或 UV。其中，1 小时指定了窗口的大小（Window size），5 秒钟定义了输出的时间间隔（Advance interval）。</li>
<li><strong>Tumbling Time Window</strong>：可以认为是 Hopping Time Window 的一种特例，窗口大小 &#x3D; 输出时间间隔，它的特点是各个 Window 之间完全不相交。</li>
<li><strong>Sliding Window</strong>：该窗口只用于 2 个 KStream 进行 Join 计算时。该窗口的大小定义了 Join 两侧 KStream 的数据记录被认为在同一个窗口的最大时间差。假设该窗口的大小为 5 秒，则参与 Join 的 2 个 KStream 中，记录时间差小于 5 秒的记录被认为在同一个窗口中，可以进行 Join 计算。</li>
<li><strong>Session Window</strong>：该窗口用于对 Key 做 Group 后的聚合操作中。它需要对 Key 做分组，然后对组内的数据根据业务需求定义一个窗口的起始点和结束点。一个典型的案例是，希望通过 Session Window 计算某个用户访问网站的时间。对于一个特定的用户（用 Key 表示）而言，当发生登录操作时，该用户（Key）的窗口即开始，当发生退出操作或者超时时，该用户（Key）的窗口即结束。窗口结束时，可计算该用户的访问时间或者点击次数等。</li>
</ol>
<h3 id="Stream-示例"><a href="#Stream-示例" class="headerlink" title="Stream 示例"></a>Stream 示例</h3><h4 id="1-将-topicA-的数据写入到-topicB-中（纯复制）"><a href="#1-将-topicA-的数据写入到-topicB-中（纯复制）" class="headerlink" title="1. 将 topicA 的数据写入到 topicB 中（纯复制）"></a>1. 将 topicA 的数据写入到 topicB 中（纯复制）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.Serdes;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.KafkaStreams;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.StreamsBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.StreamsConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.Topology;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.put(StreamsConfig.APPLICATION_ID_CONFIG, <span class="string">&quot;mystream&quot;</span>);</span><br><span class="line">        prop.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;10.4.3.41:29092,10.4.3.41:39092,10.4.3.41:49092&quot;</span>);</span><br><span class="line">        prop.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line">        prop.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line"></span><br><span class="line">        <span class="type">StreamsBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamsBuilder</span>();</span><br><span class="line">        builder.stream(<span class="string">&quot;myStreamIn&quot;</span>).to(<span class="string">&quot;myStreamOut&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Topology</span> <span class="variable">topo</span> <span class="operator">=</span> builder.build();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">KafkaStreams</span> <span class="variable">streams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KafkaStreams</span>(topo, prop);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;stream&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                streams.close();</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            streams.start();</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-将-TopicA-中的数据实现-wordcount-写入到-TopicB"><a href="#2-将-TopicA-中的数据实现-wordcount-写入到-TopicB" class="headerlink" title="2. 将 TopicA 中的数据实现 wordcount 写入到 TopicB"></a>2. 将 TopicA 中的数据实现 wordcount 写入到 TopicB</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.Serdes;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.kstream.KTable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordCountStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.put(StreamsConfig.APPLICATION_ID_CONFIG, <span class="string">&quot;wordcountstream&quot;</span>);</span><br><span class="line">        prop.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;10.4.3.41:29092,10.4.3.41:39092,10.4.3.41:49092&quot;</span>);</span><br><span class="line">        prop.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, <span class="number">2000</span>);</span><br><span class="line">        prop.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line">        prop.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line"></span><br><span class="line">        <span class="type">StreamsBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamsBuilder</span>();</span><br><span class="line">        KTable&lt;String, Long&gt; count = builder.stream(<span class="string">&quot;wordcount-input&quot;</span>)</span><br><span class="line">                .flatMapValues(value -&gt; &#123;</span><br><span class="line">                    String[] split = value.toString().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    List&lt;String&gt; strings = Arrays.asList(split);</span><br><span class="line">                    <span class="keyword">return</span> strings;</span><br><span class="line">                &#125;)</span><br><span class="line">                .map((k, v) -&gt; <span class="keyword">new</span> <span class="title class_">KeyValue</span>&lt;&gt;(v, <span class="string">&quot;1&quot;</span>))</span><br><span class="line">                .groupByKey()</span><br><span class="line">                .count();</span><br><span class="line"></span><br><span class="line">        count.toStream().foreach((k, v) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + k + <span class="string">&quot;   value: &quot;</span> + v);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        count.toStream().map((x, y) -&gt; <span class="keyword">new</span> <span class="title class_">KeyValue</span>&lt;&gt;(x, y.toString())).to(<span class="string">&quot;wordcount-output&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Topology</span> <span class="variable">topo</span> <span class="operator">=</span> builder.build();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">KafkaStreams</span> <span class="variable">streams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KafkaStreams</span>(topo, prop);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;stream&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                streams.close();</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            streams.start();</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-在-TopicA-中每输入一个值求和并写入到-TopicB"><a href="#3-在-TopicA-中每输入一个值求和并写入到-TopicB" class="headerlink" title="3. 在 TopicA 中每输入一个值求和并写入到 TopicB"></a>3. 在 TopicA 中每输入一个值求和并写入到 TopicB</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.Serdes;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.kstream.KStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.kstream.KTable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SumStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.put(StreamsConfig.APPLICATION_ID_CONFIG, <span class="string">&quot;sumstream&quot;</span>);</span><br><span class="line">        prop.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;10.4.3.41:29092,10.4.3.41:39092,10.4.3.41:49092&quot;</span>);</span><br><span class="line">        prop.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, <span class="number">2000</span>);</span><br><span class="line">        prop.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line">        prop.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line"></span><br><span class="line">        <span class="type">StreamsBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamsBuilder</span>();</span><br><span class="line">        KStream&lt;Object, Object&gt; source = builder.stream(<span class="string">&quot;suminput&quot;</span>);</span><br><span class="line">        KTable&lt;String, String&gt; sum1 = source.map((key, value) -&gt;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">KeyValue</span>&lt;&gt;(<span class="string">&quot;sum&quot;</span>, value.toString())</span><br><span class="line">        ).groupByKey().reduce((x, y) -&gt; &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> Integer.valueOf(x) + Integer.valueOf(y);</span><br><span class="line">            <span class="keyword">return</span> sum.toString();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        sum1.toStream().to(<span class="string">&quot;sumout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Topology</span> <span class="variable">topo</span> <span class="operator">=</span> builder.build();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">KafkaStreams</span> <span class="variable">streams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KafkaStreams</span>(topo, prop);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;stream&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                streams.close();</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            streams.start();</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-1-每隔-2-秒钟输出一次过去-5-秒内-topicA-里的-wordcount，结果写入到-TopicB"><a href="#4-1-每隔-2-秒钟输出一次过去-5-秒内-topicA-里的-wordcount，结果写入到-TopicB" class="headerlink" title="4.1 每隔 2 秒钟输出一次过去 5 秒内 topicA 里的 wordcount，结果写入到 TopicB"></a>4.1 每隔 2 秒钟输出一次过去 5 秒内 topicA 里的 wordcount，结果写入到 TopicB</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.Serdes;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.kstream.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.put(StreamsConfig.APPLICATION_ID_CONFIG, <span class="string">&quot;WindowStream&quot;</span>);</span><br><span class="line">        prop.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;10.4.3.41:29092,10.4.3.41:39092,10.4.3.41:49092&quot;</span>);</span><br><span class="line">        prop.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, <span class="number">3000</span>);</span><br><span class="line">        prop.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line">        prop.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line"></span><br><span class="line">        <span class="type">StreamsBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamsBuilder</span>();</span><br><span class="line">        KStream&lt;Object, Object&gt; source = builder.stream(<span class="string">&quot;topicA&quot;</span>);</span><br><span class="line">        KTable&lt;Windowed&lt;String&gt;, Long&gt; countKtable = source.flatMapValues(value -&gt; Arrays.asList(value.toString().split(<span class="string">&quot;s+&quot;</span>)))</span><br><span class="line">                .map((x, y) -&gt; <span class="keyword">new</span> <span class="title class_">KeyValue</span>&lt;&gt;(y, <span class="string">&quot;1&quot;</span>))</span><br><span class="line">                .groupByKey()</span><br><span class="line">                .windowedBy(TimeWindows.of(Duration.ofSeconds(<span class="number">5</span>)).advanceBy(Duration.ofSeconds(<span class="number">2</span>)))</span><br><span class="line">                .count();</span><br><span class="line"></span><br><span class="line">        countKtable.toStream().foreach((x, y) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;x: &quot;</span> + x + <span class="string">&quot;  y: &quot;</span> + y);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        countKtable.toStream().map((x, y) -&gt; <span class="keyword">new</span> <span class="title class_">KeyValue</span>&lt;&gt;(x.toString(), y.toString())).to(<span class="string">&quot;topicB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Topology</span> <span class="variable">topo</span> <span class="operator">=</span> builder.build();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">KafkaStreams</span> <span class="variable">streams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KafkaStreams</span>(topo, prop);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;stream&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                streams.close();</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            streams.start();</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-每隔-5-秒钟输出一次过去-5-秒内-topicA-里的-wordcount，结果写入到-TopicB"><a href="#4-2-每隔-5-秒钟输出一次过去-5-秒内-topicA-里的-wordcount，结果写入到-TopicB" class="headerlink" title="4.2 每隔 5 秒钟输出一次过去 5 秒内 topicA 里的 wordcount，结果写入到 TopicB"></a>4.2 每隔 5 秒钟输出一次过去 5 秒内 topicA 里的 wordcount，结果写入到 TopicB</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.Serdes;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.kstream.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowStream2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.put(StreamsConfig.APPLICATION_ID_CONFIG, <span class="string">&quot;WindowStream&quot;</span>);</span><br><span class="line">        prop.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;10.4.3.41:29092,10.4.3.41:39092,10.4.3.41:49092&quot;</span>);</span><br><span class="line">        prop.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, <span class="number">3000</span>);</span><br><span class="line">        prop.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line">        prop.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line"></span><br><span class="line">        <span class="type">StreamsBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamsBuilder</span>();</span><br><span class="line">        KStream&lt;Object, Object&gt; source = builder.stream(<span class="string">&quot;topicA&quot;</span>);</span><br><span class="line">        KTable&lt;Windowed&lt;String&gt;, Long&gt; countKtable = source.flatMapValues(value -&gt; Arrays.asList(value.toString().split(<span class="string">&quot;s+&quot;</span>)))</span><br><span class="line">                .map((x, y) -&gt; <span class="keyword">new</span> <span class="title class_">KeyValue</span>&lt;&gt;(y, <span class="string">&quot;1&quot;</span>))</span><br><span class="line">                .groupByKey()</span><br><span class="line">                .windowedBy(TimeWindows.of(Duration.ofSeconds(<span class="number">5</span>)))</span><br><span class="line">                .count();</span><br><span class="line"></span><br><span class="line">        countKtable.toStream().foreach((x, y) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;x: &quot;</span> + x + <span class="string">&quot;  y: &quot;</span> + y);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        countKtable.toStream().map((x, y) -&gt; <span class="keyword">new</span> <span class="title class_">KeyValue</span>&lt;&gt;(x.toString(), y.toString())).to(<span class="string">&quot;topicB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Topology</span> <span class="variable">topo</span> <span class="operator">=</span> builder.build();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">KafkaStreams</span> <span class="variable">streams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KafkaStreams</span>(topo, prop);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;stream&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                streams.close();</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            streams.start();</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-TopicA-15-秒内的-wordcount，结果写入-TopicB"><a href="#4-3-TopicA-15-秒内的-wordcount，结果写入-TopicB" class="headerlink" title="4.3 TopicA 15 秒内的 wordcount，结果写入 TopicB"></a>4.3 TopicA 15 秒内的 wordcount，结果写入 TopicB</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.Serdes;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.streams.kstream.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowStream3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.put(StreamsConfig.APPLICATION_ID_CONFIG, <span class="string">&quot;WindowStream&quot;</span>);</span><br><span class="line">        prop.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;10.4.3.41:29092,10.4.3.41:39092,10.4.3.41:49092&quot;</span>);</span><br><span class="line">        prop.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, <span class="number">3000</span>);</span><br><span class="line">        prop.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line">        prop.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());</span><br><span class="line"></span><br><span class="line">        <span class="type">StreamsBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamsBuilder</span>();</span><br><span class="line">        KStream&lt;Object, Object&gt; source = builder.stream(<span class="string">&quot;topicA&quot;</span>);</span><br><span class="line">        KTable&lt;Windowed&lt;String&gt;, Long&gt; countKtable = source.flatMapValues(value -&gt; Arrays.asList(value.toString().split(<span class="string">&quot;s+&quot;</span>)))</span><br><span class="line">                .map((x, y) -&gt; <span class="keyword">new</span> <span class="title class_">KeyValue</span>&lt;&gt;(y, <span class="string">&quot;1&quot;</span>))</span><br><span class="line">                .groupByKey()</span><br><span class="line">                .windowedBy(SessionWindows.with(Duration.ofSeconds(<span class="number">15</span>)))</span><br><span class="line">                .count();</span><br><span class="line"></span><br><span class="line">        countKtable.toStream().foreach((x, y) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;x: &quot;</span> + x + <span class="string">&quot;  y: &quot;</span> + y);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        countKtable.toStream().map((x, y) -&gt; <span class="keyword">new</span> <span class="title class_">KeyValue</span>&lt;&gt;(x.toString(), y.toString())).to(<span class="string">&quot;topicB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Topology</span> <span class="variable">topo</span> <span class="operator">=</span> builder.build();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">KafkaStreams</span> <span class="variable">streams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KafkaStreams</span>(topo, prop);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;stream&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                streams.close();</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            streams.start();</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Kafka Streams 提供了一个强大的流处理框架，支持从输入 topic 进行连续计算，并将结果输出到外部 topic。通过 KStream 和 KTable 的概念，可以灵活地处理数据流和数据集。此外，Kafka 提供了多种窗口类型，用于在无界的数据流中定义有界的计算边界。以上示例展示了如何使用 Kafka Streams 进行简单的数据处理和窗口计算。</p>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka初解</title>
    <url>/2024/08/08/Kafka%E5%88%9D%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="Kafka-作为一个分布式的流平台"><a href="#Kafka-作为一个分布式的流平台" class="headerlink" title="Kafka 作为一个分布式的流平台"></a>Kafka 作为一个分布式的流平台</h3><p>Kafka 作为一个分布式的流平台，具有以下三个关键能力：</p>
<ol>
<li><strong>发布和订阅消息（流）</strong>：在这方面，它类似于一个消息队列。</li>
<li><strong>以容错（故障转移）的方式存储消息（流）</strong>。</li>
<li><strong>在消息流发生时处理它们</strong>。</li>
</ol>
<p>所有这些功能都是以分布式、高度可扩展、弹性、容错和安全的方式提供的。Kafka 可以部署在裸机硬件、虚拟机和容器上，也可以部署在本地和云端。您可以选择自行管理 Kafka 环境，也可以选择使用各种供应商提供的完全托管服务。</p>
<h3 id="Kafka-的优势："><a href="#Kafka-的优势：" class="headerlink" title="Kafka 的优势："></a>Kafka 的优势：</h3><p>Kafka 主要应用于以下两大类应用：</p>
<ol>
<li><strong>构建实时的流数据管道</strong>：可靠地获取系统和应用程序之间的数据。</li>
<li><strong>构建实时流的应用程序</strong>：对数据流进行转换或反应。</li>
</ol>
<p>要了解 Kafka 是如何实现这些功能的，让我们从下到上深入探讨 Kafka 的能力。</p>
<h3 id="Kafka-的基本概念"><a href="#Kafka-的基本概念" class="headerlink" title="Kafka 的基本概念"></a>Kafka 的基本概念</h3><h4 id="Kafka-集群"><a href="#Kafka-集群" class="headerlink" title="Kafka 集群"></a>Kafka 集群</h4><p>Kafka 作为一个集群运行在一个或多个服务器上。每个服务器称为一个 <strong>Broker</strong>，一个或多个 Broker 可以组成一个 Kafka 集群。</p>
<h4 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h4><p>Kafka 集群存储的消息是以 <strong>Topic</strong> 为类别记录的。每个消息（也叫记录，record）由一个 <strong>key</strong>、一个 <strong>value</strong> 和一个 <strong>时间戳</strong> 构成。</p>
<h4 id="Kafka-的五个核心-API"><a href="#Kafka-的五个核心-API" class="headerlink" title="Kafka 的五个核心 API"></a>Kafka 的五个核心 API</h4><ol>
<li><strong>管理 API</strong>：用于管理和检查主题、代理和其他 Kafka 对象。</li>
<li><strong>Producer API</strong>：用于将事件流发布（写入）到一个或多个 Kafka 主题。</li>
<li><strong>Consumer API</strong>：用于订阅（读取）一个或多个主题并处理为其生成的事件流。</li>
<li><strong>Kafka Streams API</strong>：用于实现流处理应用程序和微服务。它提供了更高级别的函数来处理事件流，包括转换、有状态操作（例如聚合和连接）、窗口、基于事件时间的处理等。从一个或多个主题读取输入，以便生成一个或多个主题的输出，从而有效地将输入流转换为输出流。</li>
<li><strong>Kafka Connect API</strong>：用于构建和运行可重用的数据导入&#x2F;导出连接器，这些连接器消耗（读取）或生成（写入）来自外部系统和应用程序的事件流，以便它们可以与 Kafka 集成。例如，关系数据库（如 PostgreSQL）的连接器可能会捕获对一组表的每个更改。然而，在实践中，您通常不需要实现自己的连接器，因为 Kafka 社区已经提供了数百个现成的连接器。</li>
</ol>
<h3 id="Kafka-的基本术语"><a href="#Kafka-的基本术语" class="headerlink" title="Kafka 的基本术语"></a>Kafka 的基本术语</h3><p>Kafka 是一个分布式的、分区的消息（官方称之为 <strong>commit log</strong>）服务。它提供一个消息系统应该具备的功能，但有着独特的设计。Kafka 借鉴了 JMS 规范的思想，但并没有完全遵循 JMS 规范。以下是一些基础的消息相关术语：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>Broker</td>
<td>一个 Kafka 节点就是一个 Broker，一个或多个 Broker 可以组成一个 Kafka 集群。消费者可以订阅一个或多个主题（topic），并从 Broker 拉数据，从而消费这些已发布的消息。</td>
</tr>
<tr>
<td>Topic</td>
<td>Kafka 根据 topic 对消息进行归类，发布到 Kafka 集群的每条消息都需要指定一个 topic。</td>
</tr>
<tr>
<td>Producer</td>
<td>消息生产者，向 Broker 发送消息的客户端。</td>
</tr>
<tr>
<td>Consumer</td>
<td>消息消费者，从 Broker 读取消息的客户端。</td>
</tr>
<tr>
<td>ConsumerGroup</td>
<td>每个 Consumer 属于一个特定的 Consumer Group，一条消息可以被多个不同的 Consumer Group 消费，但一个 Consumer Group 中只能有一个 Consumer 能够消费该消息。</td>
</tr>
<tr>
<td>Partition</td>
<td>物理上的概念，一个 topic 可以分为多个 partition，每个 partition 内部消息是有序的。每个分区的数据是不同的，分区有主从备份的，主负责读写，从仅负责备份。消息生产者在发送消息到 Kafka Topic 时，会根据分区策略将消息分配到不同的 Partition 中。</td>
</tr>
</tbody></table>
<p><img src="/2024/08/08/Kafka%E5%88%9D%E8%A7%A3/image-1.png" alt="image-1"></p>
<h3 id="主题和日志（Topic-和-Log）"><a href="#主题和日志（Topic-和-Log）" class="headerlink" title="主题和日志（Topic 和 Log）"></a>主题和日志（Topic 和 Log）</h3><p>让我们更深入地了解 Kafka 中的 Topic。</p>
<p><strong>Topic</strong> 是发布的消息的类别名，一个 topic 可以有零个、一个或多个消费者订阅该主题的消息。</p>
<p>对于每个 topic，Kafka 集群都会维护一个分区 log，如下图所示：</p>
<p><img src="/2024/08/08/Kafka%E5%88%9D%E8%A7%A3/image-2.png" alt="image-2"></p>
<p>每一个分区都是一个顺序的、不可变的消息队列，并且可以持续地添加。分区中的消息都被分配了一个序列号，称之为 <strong>偏移量（offset）</strong>，在每个分区中此偏移量都是唯一的。</p>
<p>每个 partition 都对应一个 commit log 文件。一个 partition 中的 message 的 offset 都是唯一的，但不同 partition 中的 message 的 offset 可能是相同的。</p>
<p>Kafka 集群保持所有的消息，直到它们过期（无论消息是否被消费），只会根据配置的日志保留时间（<code>log.retention.hours</code>）确认消息多久被删除，默认保留最近一周的日志消息。Kafka 的性能与保留的消息数据量大小没有关系，因此保存大量的数据消息日志信息不会有什么影响。</p>
<p>实际上，消费者所持有的唯一元数据就是这个 <strong>offset（偏移量）</strong>，也就是说 offset 由消费者来控制。正常情况下，当消费者消费消息时，偏移量也会线性增加。但实际偏移量由消费者控制，消费者可以将偏移量重置为更早的位置，重新读取消息。这种设计对消费者来说操作自如，一个消费者的操作不会影响其他消费者对 log 的处理。</p>
<p>每个 consumer 是基于自己在 commit log 中的消费进度（offset）来进行工作的。在 Kafka 中，消费 offset 由 consumer 自己来维护。一般情况下，我们按照顺序逐条消费 commit log 中的消息，当然也可以通过指定 offset 来重复消费某些消息，或者跳过某些消息。</p>
<p>这意味着 Kafka 中的 consumer 对集群的影响是非常小的。添加一个或减少一个 consumer，对于集群或其他 consumer 来说，都是没有影响的，因为每个 consumer 维护各自的消费 offset。</p>
<p><img src="/2024/08/08/Kafka%E5%88%9D%E8%A7%A3/image-3.png" alt="image-3"></p>
<h3 id="分区（Partition）"><a href="#分区（Partition）" class="headerlink" title="分区（Partition）"></a>分区（Partition）</h3><p>Kafka 中采用分区的设计有几个目的：</p>
<ol>
<li><strong>处理更多的消息</strong>：不受单台服务器的限制。Topic 拥有多个分区意味着它可以不受限地处理更多的数据。</li>
<li><strong>分区可以作为并行处理的单元</strong>：稍后会谈到这一点。</li>
</ol>
<p>可以这样理解 <strong>Topic</strong>、<strong>Partition</strong> 和 <strong>Broker</strong>：</p>
<p>一个 <strong>topic</strong>，代表逻辑上的一个业务数据集，比如按数据库里不同表的数据操作消息区分放入不同 topic，订单相关操作消息放入订单 topic，用户相关操作消息放入用户 topic。对于大型网站来说，后端数据都是海量的，订单消息很可能是非常巨量的，比如有几百个 G 甚至达到 TB 级别。如果把这么多数据都放在一台机器上，肯定会有容量限制问题。那么就可以在 topic 内部划分多个 partition 来分片存储数据，不同的 partition 可以位于不同的机器上，每台机器上都运行一个 Kafka 的进程 <strong>Broker</strong>。</p>
<h3 id="分布式（Distribution）"><a href="#分布式（Distribution）" class="headerlink" title="分布式（Distribution）"></a>分布式（Distribution）</h3><p>Log 的分区被分布到集群中的多个服务器上。每个服务器处理它分到的分区。根据配置，每个分区还可以复制到其他服务器作为备份容错。每个分区有一个 <strong>leader</strong>，零或多个 <strong>follower</strong>。Leader 处理此分区的所有读写请求，而 follower 被动地复制数据。如果 leader 宕机，其中一个 follower 会被推举为新的 leader。一台服务器可能同时是一个分区的 leader，另一个分区的 follower。这样可以平衡负载，避免所有的请求都只让一台或者某几台服务器处理。</p>
<h3 id="生产者（Producers）"><a href="#生产者（Producers）" class="headerlink" title="生产者（Producers）"></a>生产者（Producers）</h3><p>生产者往某个 Topic 上发布消息。生产者也负责选择发布到 Topic 上的哪一个分区。最简单的方式是从分区列表中轮流选择。也可以根据某种算法依照权重选择分区。开发者负责如何选择分区的算法。</p>
<h3 id="消费者（Consumers）"><a href="#消费者（Consumers）" class="headerlink" title="消费者（Consumers）"></a>消费者（Consumers）</h3><p>传统的消息传递模式有 2 种：</p>
<ol>
<li><strong>Queue 模式</strong>：多个 consumer 从服务器中读取数据，消息只会到达一个 consumer。</li>
<li><strong>Publish-Subscribe 模式</strong>：消息会被广播给所有的 consumer。</li>
</ol>
<p>Kafka 基于这两种模式提供了一种 consumer 的抽象概念：<strong>Consumer Group</strong>。</p>
<ul>
<li><strong>Queue 模式</strong>：所有的 consumer 都位于同一个 consumer group 下。</li>
<li><strong>Publish-Subscribe 模式</strong>：所有的 consumer 都有着自己唯一的 consumer group。</li>
</ul>
<p><img src="/2024/08/08/Kafka%E5%88%9D%E8%A7%A3/image-4.png" alt="image-4"></p>
<p>以下是一个示例：</p>
<p>2 个 Kafka 集群托管 4 个分区（P0-P3），2 个消费者组，消费组 A 有 2 个消费者实例，消费组 B 有 4 个。</p>
<p><img src="/2024/08/08/Kafka%E5%88%9D%E8%A7%A3/image-2.png" alt="image-2"></p>
<p>这个集群由 2 个 Consumer Group 消费，A 有 2 个 consumer instances，B 有 4 个。</p>
<p>通常一个 topic 会有几个 consumer group，每个 consumer group 都是一个逻辑上的订阅者（logical subscriber）。每个 consumer group 由多个 consumer instance 组成，从而达到可扩展和容灾的功能。</p>
<p>正如传统的消息系统一样，Kafka 保证消息的顺序不变。传统的队列模型保持消息，并且保证它们的先后顺序不变。但是，尽管服务器保证了消息的顺序，消息还是异步地发送给各个消费者，消费者收到消息的先后顺序不能保证。这也意味着并行消费将不能保证消息的先后顺序。用过传统的消息系统的同学肯定清楚，消息的顺序处理很让人头痛。如果只让一个消费者处理消息，又违背了并行处理的初衷。</p>
<p>在这一点上，Kafka 做得更好，尽管并没有完全解决上述问题。Kafka 采用了一种分而治之的策略：分区。因为 Topic 分区中消息只能由消费者组中的唯一一个消费者处理，所以消息肯定是按照先后顺序进行处理的。但是它也仅仅是保证 Topic 的一个分区顺序处理，不能保证跨分区的消息先后处理顺序。所以，如果你想要顺序地处理 Topic 的所有消息，那就只提供一个分区。</p>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka+乐观锁处理商品库存管理</title>
    <url>/2024/09/15/Kafka-%E4%B9%90%E8%A7%82%E9%94%81%E5%A4%84%E7%90%86%E5%95%86%E5%93%81%E5%BA%93%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="记录一下当菜鸡遇上高并发"><a href="#记录一下当菜鸡遇上高并发" class="headerlink" title="记录一下当菜鸡遇上高并发"></a>记录一下当菜鸡遇上高并发</h1><h2 id="一、从血泪史说起"><a href="#一、从血泪史说起" class="headerlink" title="一、从血泪史说起"></a>一、从血泪史说起</h2><p>八月初我开发的商品库存模块在压测下直接躺平,线程池无界队列直接内存泄漏OOM,CPU疯狂飙高直接躺平。加了悲观锁又发现并发不高的情况下接口都很慢。<br>事后发现：<strong>事务锁在高并发下就是个战五渣</strong>。查阅了网上的资料最终摸索出这套组合方案，核心就两板斧——<strong>乐观锁管库存，消息队列扛流量</strong>。</p>
<h2 id="二、给数据库加点料"><a href="#二、给数据库加点料" class="headerlink" title="二、给数据库加点料"></a>二、给数据库加点料</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> t_goods (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    stock <span class="type">INT</span> COMMENT <span class="string">&#x27;防止超卖的命根子&#x27;</span>,</span><br><span class="line">    version <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;乐观锁的灵魂&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>设计小心机：</strong></p>
<ul>
<li>版本号用自增整数，比时间戳靠谱</li>
<li>库存字段加个非负约束（别问为什么，都是教训）</li>
<li>别留字段默认值坑（比如突然冒出的null值）</li>
</ul>
<h2 id="三、下单就像流水线"><a href="#三、下单就像流水线" class="headerlink" title="三、下单就像流水线"></a>三、下单就像流水线</h2><h3 id="第一步：用户发起冲锋"><a href="#第一步：用户发起冲锋" class="headerlink" title="第一步：用户发起冲锋"></a>第一步：用户发起冲锋</h3><ol>
<li>查库存先找Redis缓存（就像先去小卖部看货架）</li>
<li>缓存没有就找数据库（得去仓库翻箱倒柜）</li>
<li>把库存数量写回Redis（贴个即时更新的便利贴）</li>
</ol>
<h3 id="第二步：库存预检"><a href="#第二步：库存预检" class="headerlink" title="第二步：库存预检"></a>第二步：库存预检</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码，真实情况得加try-catch</span></span><br><span class="line"><span class="keyword">if</span>(redisStock &lt; 购买量)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;兄弟，手速慢了啊&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第三步：把订单扔进消息队列"><a href="#第三步：把订单扔进消息队列" class="headerlink" title="第三步：把订单扔进消息队列"></a>第三步：把订单扔进消息队列</h3><ul>
<li>生成订单号（雪花算法YYDS）</li>
<li>往Kafka的订单主题扔消息（像快递员往传送带放包裹）</li>
<li>Redis里标记订单状态为”处理中”（设置1分钟失效，防止僵尸订单）</li>
</ul>
<h2 id="四、库存扣减的攻防战"><a href="#四、库存扣减的攻防战" class="headerlink" title="四、库存扣减的攻防战"></a>四、库存扣减的攻防战</h2><h3 id="消费者干活指南"><a href="#消费者干活指南" class="headerlink" title="消费者干活指南"></a>消费者干活指南</h3><ol>
<li>从Kafka捞订单消息</li>
<li>带着版本号去扣库存：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t_goods </span><br><span class="line"><span class="keyword">SET</span> stock <span class="operator">=</span> stock <span class="operator">-</span> #&#123;数量&#125;, version <span class="operator">=</span> version <span class="operator">+</span><span class="number">1</span> </span><br><span class="line"><span class="keyword">WHERE</span> id<span class="operator">=</span>#&#123;商品ID&#125; <span class="keyword">AND</span> version<span class="operator">=</span>#&#123;当前版本&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>更新成功：刷新Redis缓存（记得用管道命令）</li>
<li>更新失败：启动重试小分队</li>
</ol>
<h3 id="避坑指南"><a href="#避坑指南" class="headerlink" title="避坑指南"></a>避坑指南</h3><ul>
<li>先更新数据库再删缓存（顺序错了会出鬼故事）</li>
<li>用延迟双删防止缓存击穿（先删一次，500ms后再删一次）</li>
<li>别在Kafka里堆积太多消息（小心把队列撑爆）</li>
</ul>
<h2 id="五、订单状态流转"><a href="#五、订单状态流转" class="headerlink" title="五、订单状态流转"></a>五、订单状态流转</h2><ol>
<li>库存服务干完活往Kafka发确认消息</li>
<li>订单系统监听确认主题</li>
<li>把Redis里的订单状态改成”成功”（就像快递签收）</li>
</ol>
<h2 id="六、那些年遇到的妖魔鬼怪"><a href="#六、那些年遇到的妖魔鬼怪" class="headerlink" title="六、那些年遇到的妖魔鬼怪"></a>六、那些年遇到的妖魔鬼怪</h2><h3 id="1：消息突然消失"><a href="#1：消息突然消失" class="headerlink" title="1：消息突然消失"></a>1：消息突然消失</h3><ul>
<li>解决方案：给Kafka配置持久化存储</li>
<li>备胎方案：用MySQL存消息发送记录</li>
</ul>
<h3 id="2：同个订单被处理两次"><a href="#2：同个订单被处理两次" class="headerlink" title="2：同个订单被处理两次"></a>2：同个订单被处理两次</h3><ul>
<li>妙招1：给消息加唯一ID</li>
<li>妙招2：数据库加唯一索引</li>
<li>妙招3：Redis里setnx锁一下</li>
</ul>
<h2 id="七、性能调优三板斧"><a href="#七、性能调优三板斧" class="headerlink" title="七、性能调优三板斧"></a>七、性能调优三板斧</h2><h3 id="第一斧：缓存策略"><a href="#第一斧：缓存策略" class="headerlink" title="第一斧：缓存策略"></a>第一斧：缓存策略</h3><ul>
<li>热点商品提前加载到Redis（就像双11前把货堆到前线仓库）</li>
<li>用二级缓存：本地缓存+Redis（远近搭配，干活不累）</li>
</ul>
<h3 id="第二斧：Kafka调优"><a href="#第二斧：Kafka调优" class="headerlink" title="第二斧：Kafka调优"></a>第二斧：Kafka调优</h3><ul>
<li>分区数&#x3D;消费者数量*3（黄金法则）</li>
<li>消费者用批量拉取模式（一车多拉省油钱）</li>
</ul>
<h3 id="第三斧：MySQL优化"><a href="#第三斧：MySQL优化" class="headerlink" title="第三斧：MySQL优化"></a>第三斧：MySQL优化</h3><ul>
<li>给version字段加联合索引</li>
<li>事务隔离级别用Read Committed（别用Serializable，会卡成PPT）</li>
</ul>
<h2 id="八、重试是个技术活"><a href="#八、重试是个技术活" class="headerlink" title="八、重试是个技术活"></a>八、重试是个技术活</h2><p><strong>我们的重试策略：</strong></p>
<ol>
<li>首次失败：等50ms再试</li>
<li>二次失败：等200ms再试</li>
<li>三次失败：等1s后尝试</li>
<li>超过三次：记入死信队列人工处理</li>
</ol>
<p><strong>避坑提示：</strong></p>
<ul>
<li>重试次数别超过3次（防止雪崩）</li>
<li>用指数退避算法（越来越佛系）</li>
<li>同步重试改异步（别堵住主线程）</li>
</ul>
<h2 id="九、未解决"><a href="#九、未解决" class="headerlink" title="九、未解决"></a>九、未解决</h2><p>这套方案依然有暗坑：</p>
<ol>
<li>极端情况可能出现库存不一致（查了资料，得靠得靠对账系统补救或者简单点用定时任务）</li>
<li>消息延迟会导致短暂显示异常（加个”库存计算中”的提示）</li>
<li>突发流量可能冲垮Redis（网上的解决方法是熔断降级）</li>
</ol>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>IOUtils 工具类</title>
    <url>/2024/12/07/IOUtils-%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="IOUtils-工具类"><a href="#IOUtils-工具类" class="headerlink" title="IOUtils 工具类"></a>IOUtils 工具类</h3><p><code>IOUtils</code> 是 Apache Commons IO 包中提供的一个非常实用的工具类，它可以帮助我们高效地处理文件和流操作，节省大量的时间。以下是一些常用的用法：</p>
<h4 id="1-1-读取文件"><a href="#1-1-读取文件" class="headerlink" title="1.1 读取文件"></a>1.1 读取文件</h4><p>如果你想将某个文件中的数据读取到字符串中，可以使用 <code>IOUtils</code> 的 <code>toString</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> IOUtils.toString(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/temp/a.txt&quot;</span>), StandardCharsets.UTF_8);</span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>toString</code> 方法可以将文件的内容读取为字符串。</li>
<li>第一个参数是输入流，第二个参数是字符集编码（如 <code>StandardCharsets.UTF_8</code>）。</li>
</ul>
<h4 id="1-2-写入文件"><a href="#1-2-写入文件" class="headerlink" title="1.2 写入文件"></a>1.2 写入文件</h4><p>如果你想将某个字符串的内容写入到指定文件中，可以使用 <code>IOUtils</code> 的 <code>write</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">IOUtils.write(str, <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/temp/b.txt&quot;</span>), StandardCharsets.UTF_8);</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>write</code> 方法可以将字符串写入到文件中。</li>
<li>第一个参数是字符串内容，第二个参数是输出流，第三个参数是字符集编码。</li>
</ul>
<h4 id="1-3-文件拷贝"><a href="#1-3-文件拷贝" class="headerlink" title="1.3 文件拷贝"></a>1.3 文件拷贝</h4><p>如果你想将某个文件中的所有内容拷贝到另一个文件中，可以使用 <code>IOUtils</code> 的 <code>copy</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IOUtils.copy(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/temp/a.txt&quot;</span>), <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/temp/b.txt&quot;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>copy</code> 方法可以将一个输入流的内容拷贝到一个输出流中。</li>
<li>第一个参数是输入流，第二个参数是输出流。</li>
</ul>
<h4 id="1-4-读取文件内容到字节数组"><a href="#1-4-读取文件内容到字节数组" class="headerlink" title="1.4 读取文件内容到字节数组"></a>1.4 读取文件内容到字节数组</h4><p>如果你想将某个文件中的内容读取到字节数组中，可以使用 <code>IOUtils</code> 的 <code>toByteArray</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] bytes = IOUtils.toByteArray(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/temp/a.txt&quot;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>toByteArray</code> 方法可以将文件的内容读取为字节数组。</li>
<li>参数是输入流。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>IOUtils</code> 是一个非常强大的工具类，提供了许多方便的方法来处理文件和流操作。无论是读取文件内容、写入文件内容、拷贝文件，还是将文件内容读取到字节数组中，<code>IOUtils</code> 都能帮助我们更高效地完成任务，减少代码量，提高代码的可读性和可维护性。</p>
]]></content>
      <categories>
        <category>提升效率的轮子</category>
      </categories>
  </entry>
  <entry>
    <title>Kafka外存储偏移量</title>
    <url>/2024/08/22/Kafka%E5%A4%96%E5%AD%98%E5%82%A8%E5%81%8F%E7%A7%BB%E9%87%8F/</url>
    <content><![CDATA[<h3 id="在-Kafka-之外存储偏移量"><a href="#在-Kafka-之外存储偏移量" class="headerlink" title="在 Kafka 之外存储偏移量"></a>在 Kafka 之外存储偏移量</h3><p>参考大佬：<a href="https://blog.csdn.net/Aeroever/article/details/130345016">https://blog.csdn.net/Aeroever/article/details/130345016</a></p>
<p>消费者可以不使用 Kafka 内置的 offset 仓库，而是选择自己来存储 offset。这样做的好处是可以将消费的 offset 和结果存储在同一个系统中，用原子的方式存储结果和 offset，但这不能保证原子性。要想消费是完全原子的，并提供“正好一次”的消费保证，比 Kafka 默认的“至少一次”的语义要更高，你需要使用 Kafka 的 offset 提交功能。</p>
<h4 id="自定义偏移量存储"><a href="#自定义偏移量存储" class="headerlink" title="自定义偏移量存储"></a>自定义偏移量存储</h4><p>如果消费的结果存储在关系数据库中，可以将 offset 也存储在数据库中，让提交结果和 offset 在单个事务中完成。这样，事务成功，则 offset 存储和更新；如果 offset 没有存储，那么偏移量也不会被更新。</p>
<p>如果 offset 和消费结果存储在本地仓库，例如通过订阅一个指定的分区并将 offset 和索引数据一起存储来构建一个搜索索引。如果这是以原子的方式完成的，常见的可能是，即使崩溃引起未同步的数据丢失，索引程序也可以从它确保没有更新丢失的地方恢复，而仅仅丢失最近更新的消息。</p>
<h4 id="手动管理偏移量"><a href="#手动管理偏移量" class="headerlink" title="手动管理偏移量"></a>手动管理偏移量</h4><p>要管理自己的偏移量，你需要做到以下几点：</p>
<ul>
<li>配置 <code>enable.auto.commit=false</code>。</li>
<li>使用提供的 <code>ConsumerRecord</code> 来保存你的位置。</li>
<li>在重启时用 <code>seek(TopicPartition, long)</code> 恢复消费者的位置。</li>
</ul>
<p>当分区分配也是手动完成的，这种类型的使用是最简单的。如果分区分配是自动完成的，需要特别小心处理分区分配变更的情况。可以通过调用 <code>subscribe(Collection, ConsumerRebalanceListener)</code> 和 <code>subscribe(Pattern, ConsumerRebalanceListener)</code> 中提供的 <code>ConsumerRebalanceListener</code> 实例来完成。例如，当分区向消费者获取时，消费者将通过实现 <code>ConsumerRebalanceListener.onPartitionsRevoked(Collection)</code> 来给这些分区提交它们的 offset。当分区分配给消费者时，消费者通过 <code>ConsumerRebalanceListener.onPartitionsAssigned(Collection)</code> 为新的分区正确地将消费者初始化到该位置。</p>
<h4 id="控制消费的位置"><a href="#控制消费的位置" class="headerlink" title="控制消费的位置"></a>控制消费的位置</h4><p>Kafka 也支持消费者手动控制消费的位置，可以消费之前的消息也可以跳过最近的消息。有几种情况，手动控制消费者的位置可能是有用的。一种场景是对于时间敏感的消费者处理程序，对足够落后的消费者，直接跳过，从最近的消费开始消费。另一个使用场景是本地状态存储系统。在这样的系统中，消费者将要在启动时初始化它的位置（无论本地存储是否包含）。同样，如果本地状态已被破坏（假设因为磁盘丢失），则可以通过重新消费所有数据并重新创建状态（假设 Kafka 保留了足够的历史）在新的机器上重新创建。</p>
<h4 id="消费者流量控制"><a href="#消费者流量控制" class="headerlink" title="消费者流量控制"></a>消费者流量控制</h4><p>如果消费者分配了多个分区，并同时消费所有的分区，这些分区具有相同的优先级。在一些情况下，消费者需要首先消费一些指定的分区，当指定的分区有少量或者已经没有可消费的数据时，则开始消费其他分区。例如流处理，当处理器从 2 个 topic 获取消息并把这两个 topic 的消息合并，当其中一个 topic 长时间落后另一个，则暂停消费，以便落后的赶上来。Kafka 支持动态控制消费流量，分别在未来的 <code>poll(long)</code> 中使用 <code>pause(Collection)</code> 和 <code>resume(Collection)</code> 来暂停消费指定分配的分区，重新开始消费指定暂停的分区。</p>
<h4 id="读取事务性消息"><a href="#读取事务性消息" class="headerlink" title="读取事务性消息"></a>读取事务性消息</h4><p>应用程序可以原子地写入多个主题和分区。为了使之工作，从这些分区读取的消费者应该被配置为只读取已提交的数据。这可以通过在消费者的配置中设置 <code>isolation.level=read_committed</code> 来实现。</p>
<p>在 <code>read_committed</code> 模式下，消费者将只读取那些已经成功提交的事务性消息（像读取非事务性消息一样）。在 <code>read_committed</code> 模式下，没有客户端缓冲。相反，<code>read_committed</code> 消费者的分区的结束偏移量是分区中属于一个事务的第一个消息的偏移量。这个偏移被称为 “Last Stable Offset 最后稳定偏移”（LSO）。</p>
<p>一个 <code>read_committed</code> 消费者将只读到 LSO，并过滤掉任何已经中止的事务性消息。LSO 也会影响 <code>read_committed</code> 消费者的 <code>seekToEnd(Collection)</code> 和 <code>endOffsets(Collection)</code> 的行为。最后，对于 <code>read_committed</code> 消费者来说，取数 lag（滞后指标）也被调整为相对 LSO。</p>
<p>带有事务性消息的分区将包括提交或中止标记，这些标记表示事务的结果。那里的标记不会返回给应用程序，但在 log 中却有一个偏移量。因此，应用程序从带有事务消息的主题中读取时，会在消耗的偏移量中看到空白。这些缺失的消息将是事务标记，它们在两个隔离级别中为消费者过滤掉。此外，使用 <code>read_committed</code> 消费者的应用程序也可能会看到由于中止的事务而产生的空隙，因为这些消息不会被消费者返回，但确实是有效的偏移量。</p>
<h4 id="Kafka-中的术语"><a href="#Kafka-中的术语" class="headerlink" title="Kafka 中的术语"></a>Kafka 中的术语</h4><ul>
<li><strong>ACKS（Acknowledgments）确认、回执</strong>：生产者向 Broker 发送消息时，可以配置等待确认 ACKS 的策略 0、1 和 -1。</li>
<li><strong>LSO（Log start offset）起始偏移量</strong>：分区中第一个消息的偏移量。</li>
<li><strong>LW（Low watermark）低水位</strong>：分区中最早的消息偏移量。</li>
<li><strong>HW（High watermark）高水位</strong>：分区中最后一个已提交消息的偏移量。</li>
<li><strong>LEO（Log end offset）日志末尾偏移量</strong>：分区中最后一个消息的偏移量。</li>
<li><strong>AR（Assigned replica）分配的副本</strong>：分区中所有副本的集合。</li>
<li><strong>ISR（In sync replica）正常同步的副本</strong>：与 Leader 保持同步的副本集合。</li>
<li><strong>OSR（Out sync replica）非正常同步的副本</strong>：与 Leader 同步滞后的副本集合。</li>
</ul>
<h4 id="Replica，Leader，Follower-的关系"><a href="#Replica，Leader，Follower-的关系" class="headerlink" title="Replica，Leader，Follower 的关系"></a>Replica，Leader，Follower 的关系</h4><ul>
<li><strong>Replica（包括 Leader 和 Follower）</strong>：同一分区的不同副本保存的是相同的消息，为保证集群中的某个节点发生故障时，该节点上的 partition 数据不丢失，且 Kafka 仍然能够继续工作，Kafka 提供了副本机制。</li>
<li><strong>Leader（主副本）</strong>：每个分区的多个副本中的“主副本”，生产者以及消费者只与 Leader 交互。</li>
<li><strong>Follower（从副本）</strong>：每个分区的多个副本中的“从副本”，负责实时从 Leader 中同步数据，保持和 Leader 数据的同步。Leader 发生故障时，从 Follower 副本中重新选举新的 Leader 副本对外提供服务。</li>
</ul>
<h4 id="ACKS-三种类型"><a href="#ACKS-三种类型" class="headerlink" title="ACKS 三种类型"></a>ACKS 三种类型</h4><p>生产者（Producer）向 Broker 发送消息时，可以配置等待确认 ACKS（Acknowledgments）的策略 0、1 和 -1。</p>
<ul>
<li><strong>0</strong>：不等待 Broker 确认，不能保证服务器已经收到了记录。</li>
<li><strong>1</strong>：等待 Broker 将消息写入主（Leader）磁盘后返回确认，不用等待从（Follower）同步。</li>
<li><strong>-1</strong>：等待所有正常同步的副本 ISR（In sync replica）写到消息日志（Log）后才会返回确认。</li>
</ul>
<h4 id="ISR-的最坏情况"><a href="#ISR-的最坏情况" class="headerlink" title="ISR 的最坏情况"></a>ISR 的最坏情况</h4><p>ISR 的最坏情况是 ISR 中只剩 Leader 自己一个了。这种情况下，退化成 <code>ack = 1</code> 的情况，甚至还不如 <code>ack=1</code>。因为 <code>ack=1</code> 的情况下，生产者不等服务端完全同步完 ISR，只要 Leader 写入成功就行了，但是可没说不进行同步。该有的同步过程还是会进行的，但凡能同步，Kafka 肯定会同步的。</p>
<h4 id="AR、ISR、OSR"><a href="#AR、ISR、OSR" class="headerlink" title="AR、ISR、OSR"></a>AR、ISR、OSR</h4><ul>
<li><strong>AR（Assigned Replicas）</strong>：分区中的所有副本统称为 AR（Assigned Replicas）。</li>
<li><strong>ISR（In-Sync Replicas）</strong>：所有与 Leader 副本保持一定程度同步的副本（包括 Leader）组成 ISR（In-Sync Replicas），ISR 集合是 AR 集合中的一个子集。</li>
<li><strong>OSR（Out-Sync Replicas）</strong>：与 Leader 副本同步滞后过多的副本（不包括 Leader）副本，组成 OSR（Out-Sync Replicas），由此可见：AR &#x3D; ISR + OSR。</li>
</ul>
<p>在正常情况下，所有的 Follower 副本都应该与 Leader 副本保持一定程度的同步，即 AR &#x3D; ISR，OSR 集合为空。</p>
<p>Leader 副本负责维护和跟踪 ISR 集合中所有的 Follower 副本的滞后状态，当 Follower 副本落后太多或者失效时，Leader 副本会把它从 ISR 集合中剔除。如果 OSR 集合中的 Follower 副本“追上”了 Leader 副本，之后再 ISR 集合中的副本才有资格被选举为 Leader，而在 OSR 集合中的副本则没有机会（这个原则可以通过修改对应的参数配置来改变）。</p>
<h4 id="ISR-机制"><a href="#ISR-机制" class="headerlink" title="ISR 机制"></a>ISR 机制</h4><p>ISR 的核心是动态调整。因为 ISR 的机制就保证了，处于 ISR 内部的 Follower 都是可以和 Leader 进行同步的，一旦出现故障或延迟，就会被踢出 ISR。</p>
<p>Kafka 在启动的时候会开启两个与 ISR 相关的定时任务，名称分别为 “isr-expiration” 和 “isr-change-propagation”。<code>isr-expiration</code> 任务会周期性地检测每个分区是否需要缩减其 ISR 集合。这个周期和 <code>replica.lag.time.max.ms</code> 参数有关。当检测到 ISR 中有失效的副本时，就会缩减 ISR 集合。</p>
<h4 id="replica-lag-time-max-ms-参数"><a href="#replica-lag-time-max-ms-参数" class="headerlink" title="replica.lag.time.max.ms 参数"></a>replica.lag.time.max.ms 参数</h4><p><code>replica.lag.time.max.ms</code> 参数不仅指自上次从副本获取请求以来经过的时间，还指自副本上次赶上以来的时间。仍在从领导者获取消息但未赶上 <code>replica.lag.time.max.ms</code> 中最新消息的副本将被视为不同步。</p>
<p>假设我们设置 <code>replica.lag.time.max.ms</code> 为 5000 毫秒（即 5 秒）。这意味着副本必须在主节点生成消息后的 5 秒内获取到该消息，并且在这 5 秒内还要完成追赶主节点的操作，否则将被视为不同步。</p>
<p>什么叫还要完成追赶主节点的操作？目前的理解是，并不是说只要在 <code>replica.lag.time.max.ms</code> 时间内 Follower 有同步消息，即认为该 Follower 处于 ISR 中。因为这里还涉及一个速率问题（你理解为蓄水池一个放水一个注水的问题）。</p>
<p>如果 Leader 副本的消息流入速度大于 Follower 副本的拉取速度时，Follower 就是实时同步又有什么用？典型的出工不出力，消息只会越差越多，这种 Follower 肯定是要被踢出 ISR 的。</p>
<p>当 Follower 副本将 Leader 副本的 LEO 之前的日志全部同步时，则认为该 Follower 副本已经追赶上 Leader 副本。此时更新该副本的 <code>lastCaughtUpTimeMs</code> 标识。</p>
<p>Kafka 的副本管理器（ReplicaManager）启动时会启动一个副本过期检测的定时任务，会定时检查当前时间与副本的 <code>lastCaughtUpTimeMs</code> 差值是否大于参数 <code>replica.lag.time.max.ms</code> 指定的值。</p>
<p>所以 <code>replica.lag.time.max.ms</code> 的正确理解是：Follower 在过去的 <code>replica.lag.time.max.ms</code> 时间内，已经追赶上 Leader 一次了。</p>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 索引</title>
    <url>/2024/04/04/MySQL%20%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h1 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h1><h2 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h2><p>MySQL 在存储数据之外，还维护着满足特定查找算法的数据结构。这些数据结构以某种方式引用（指向）表中的数据，通过这些高级算法可以快速找到所需数据，这些数据结构称为索引。</p>
<p>简单来说，索引是一种“排好序的可以快速查找数据的数据结构”。</p>
<p>索引就像字典上的目录，能够帮助我们快速定位到需要的信息。</p>
<h2 id="索引的重要性"><a href="#索引的重要性" class="headerlink" title="索引的重要性"></a>索引的重要性</h2><p>如果查询的数据表没有索引，SQL 语句将从第一条记录开始逐条匹配判断，直到找到匹配项。而数据库查询数据是从磁盘进行的，每一次匹配都是一次 IO 流操作，这样的查询方式称为全表扫描，性能极低。</p>
<h2 id="MySQL-索引的最左前缀匹配原则"><a href="#MySQL-索引的最左前缀匹配原则" class="headerlink" title="MySQL 索引的最左前缀匹配原则"></a>MySQL 索引的最左前缀匹配原则</h2><p>在复合索引中，查询条件必须从索引的最左边的列开始匹配，才能有效利用索引。换句话说，只有当查询条件包含了索引列的最左前缀时，MySQL 才能利用该复合索引进行优化查询。</p>
<h3 id="复合索引的结构"><a href="#复合索引的结构" class="headerlink" title="复合索引的结构"></a>复合索引的结构</h3><p>假设有一个复合索引 <code>(column1, column2, column3)</code>，以下查询条件可以利用该索引：</p>
<ul>
<li><code>WHERE column1 = ?</code></li>
<li><code>WHERE column1 = ? AND column2 = ?</code></li>
<li><code>WHERE column1 = ? AND column2 = ? AND column3 = ?</code></li>
</ul>
<p>但是，以下查询条件不能有效利用该复合索引：</p>
<ul>
<li><code>WHERE column2 = ?</code>（没有包含最左列 <code>column1</code>）</li>
<li><code>WHERE column3 = ?</code>（没有包含最左列 <code>column1</code> 和 <code>column2</code>）</li>
<li><code>WHERE column2 = ? AND column3 = ?</code>（没有包含最左列 <code>column1</code>）</li>
</ul>
<h2 id="什么情况下需要建立索引"><a href="#什么情况下需要建立索引" class="headerlink" title="什么情况下需要建立索引"></a>什么情况下需要建立索引</h2><ol>
<li>主键会自动创建唯一索引。</li>
<li>频繁作为查询条件的字段。</li>
<li>查询中用于排序、统计或分组的字段。</li>
</ol>
<h2 id="聚簇索引与非聚簇索引的区别"><a href="#聚簇索引与非聚簇索引的区别" class="headerlink" title="聚簇索引与非聚簇索引的区别"></a>聚簇索引与非聚簇索引的区别</h2><p>聚簇索引和非聚簇索引都基于 B+ 树数据结构。</p>
<ul>
<li><strong>聚簇索引</strong>：将数据存储与索引放在一起，并按一定顺序组织。找到索引即找到数据。</li>
<li><strong>非聚簇索引</strong>：叶子节点不存储数据，而是存储数据行的地址。根据索引查找数据行的位置后再读取磁盘查找数据。类似于书籍的目录，需先查找目录获取页码，再跳转到对应页面查看内容。</li>
</ul>
<h2 id="MySQL-索引失效的情况"><a href="#MySQL-索引失效的情况" class="headerlink" title="MySQL 索引失效的情况"></a>MySQL 索引失效的情况</h2><ol>
<li><strong>不遵循最左前缀法则</strong>：使用联合索引时，未遵循最左前缀法则，索引可能失效。</li>
<li><strong>主键插入顺序问题</strong>：插入数据的顺序与主键索引顺序不一致可能导致索引失效。</li>
<li><strong>计算、函数或类型转换</strong>：对索引列进行计算、使用函数或进行类型转换可能导致索引失效。</li>
<li><strong>范围查询右边的列索引失效</strong>：范围查询时，右边的列索引可能不生效。</li>
<li><strong>使用不等于操作符</strong>：使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符可能导致索引失效。</li>
<li><strong>使用 <code>IS NOT NULL</code></strong>：<code>IS NOT NULL</code> 可能无法使用索引。</li>
<li><strong>LIKE 查询以通配符开头</strong>：LIKE 查询以 <code>%</code> 开头可能导致索引失效。</li>
<li><strong>OR 语句中存在非索引列</strong>：OR 前后存在非索引列时，索引可能失效。</li>
<li><strong>字符集不统一</strong>：数据库和表字符集不统一（如未使用 utf8mb4）可能导致索引失效。</li>
<li><strong>隐式类型转换</strong>：字符串与数字比较时，MySQL 自动转换类型可能导致索引失效。</li>
<li><strong>联合索引非最左匹配</strong>：查询条件不符合联合索引的最左匹配原则，索引可能失效。</li>
<li><strong>索引列上有计算</strong>：对索引列进行计算（如 <code>id + 1 = 2</code>）会导致索引失效。</li>
<li><strong>索引列使用了函数</strong>：对索引列使用函数（如 <code>SUBSTR(id_no, 1, 3)</code>）会导致索引失效。</li>
</ol>
<h2 id="MySQL-事务基本要素（ACID-特性）"><a href="#MySQL-事务基本要素（ACID-特性）" class="headerlink" title="MySQL 事务基本要素（ACID 特性）"></a>MySQL 事务基本要素（ACID 特性）</h2><p>事务是数据库操作的一个单元，可以包含一个或多个数据库操作（如插入、更新、删除）。</p>
<ol>
<li><strong>原子性（Atomicity）</strong>：事务的所有操作要么全部完成，要么全部不完成。事务执行过程中出错会回滚到开始前的状态，所有操作就像未发生一样。事务是不可分割的整体，如同原子是物质的基本单位。</li>
<li><strong>一致性（Consistency）</strong>：事务开始前和结束后，数据库的完整性约束未被破坏。例如，A 向 B 转账时，不可能出现 A 被扣款而 B 未收款的情况。</li>
<li><strong>隔离性（Isolation）</strong>：同一时间只允许一个事务请求同一数据，不同事务之间互不干扰。例如，A 正在从银行卡取钱时，B 不能同时向该卡转账。</li>
<li><strong>持久性（Durability）</strong>：事务完成后，对数据库的所有更新将被永久保存，无法回滚。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Object工具类</title>
    <url>/2024/11/20/Object%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="Objects工具类"><a href="#Objects工具类" class="headerlink" title="Objects工具类"></a>Objects工具类</h3><p>今天发现公司用的内部工具包的Objects类型转换都是基于Objects和阿里的类封装的，浅浅了解一下Objects工具类</p>
<p>在 JDK 7 之后，Java 提供了 <code>Objects</code> 工具类，我们可以通过它操作对象。</p>
<h4 id="1-1-对象判空"><a href="#1-1-对象判空" class="headerlink" title="1.1 对象判空"></a>1.1 对象判空</h4><p>在 Java 中，对象的判空操作非常常见。<code>Objects</code> 的 <code>isNull</code> 方法用于判断对象是否为空，而 <code>nonNull</code> 方法用于判断对象是否不为空。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Objects.isNull(integer)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;对象为空&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Objects.nonNull(integer)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;对象不为空&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-对象为空抛异常"><a href="#1-2-对象为空抛异常" class="headerlink" title="1.2 对象为空抛异常"></a>1.2 对象为空抛异常</h4><p>如果我们想在对象为空时，抛出空指针异常，可以使用 <code>Objects</code> 的 <code>requireNonNull</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">Objects.requireNonNull(integer1);</span><br><span class="line">Objects.requireNonNull(integer1, <span class="string">&quot;参数不能为空&quot;</span>);</span><br><span class="line">Objects.requireNonNull(integer1, () -&gt; <span class="string">&quot;参数不能为空&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="1-3-判断两个对象是否相等"><a href="#1-3-判断两个对象是否相等" class="headerlink" title="1.3 判断两个对象是否相等"></a>1.3 判断两个对象是否相等</h4><p>我们经常需要判断两个对象是否相等，<code>Objects</code> 提供了 <code>equals</code> 方法，能非常方便地实现这一点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(Objects.equals(integer1, integer2));</span><br><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>但使用这个方法时需要注意，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Long</span> <span class="variable">integer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(Objects.equals(integer1, integer2));</span><br><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>具体原因不细说，有兴趣的小伙伴可以看看我的另一篇文章《Objects.equals有坑》，里面有非常详细的讲解。</p>
<h4 id="1-4-获取对象的hashCode"><a href="#1-4-获取对象的hashCode" class="headerlink" title="1.4 获取对象的hashCode"></a>1.4 获取对象的hashCode</h4><p>如果你想获取某个对象的 <code>hashCode</code>，可以使用 <code>Objects</code> 的 <code>hashCode</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(Objects.hashCode(str));</span><br><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line"><span class="comment">// 96354</span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>Objects</code> 工具类提供了许多方便的方法来操作对象，包括判空、抛异常、比较对象是否相等以及获取对象的 <code>hashCode</code> 等。这些方法在日常开发中非常实用，能够帮助我们更简洁地处理对象相关的操作。</p>
]]></content>
      <categories>
        <category>提升效率的轮子</category>
      </categories>
  </entry>
  <entry>
    <title>RabbtiMQ一些总结</title>
    <url>/2024/07/25/RabbtiMQ%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="本篇内容主要为消息发送"><a href="#本篇内容主要为消息发送" class="headerlink" title="本篇内容主要为消息发送"></a>本篇内容主要为消息发送</h3><p>本篇内容主要为RabbitMQ消息发送，包括以下几点：</p>
<ul>
<li>RabbitTemplate 发送消息的基本使用姿势</li>
<li>自定义消息基本属性</li>
<li>自定义消息转换器 AbstractMessageConverter</li>
<li>发送 Object 类型消息失败的 case</li>
</ul>
<p>csdn大佬详解链接：<a href="https://blog.csdn.net/Jokeronee/article/details/105818034">https://blog.csdn.net/Jokeronee/article/details/105818034</a><br>            <a href="https://blog.csdn.net/qq_43437874/article/details/128057272">https://blog.csdn.net/qq_43437874/article/details/128057272</a></p>
<hr>
<h3 id="I-基本使用姿势"><a href="#I-基本使用姿势" class="headerlink" title="I. 基本使用姿势"></a>I. 基本使用姿势</h3><h4 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h4><p>我们借助 <strong>Spring Boot 2.2.1.RELEASE</strong> + <strong>rabbitmq 3.7.5</strong> 来完整项目搭建与测试。</p>
<p><strong>项目 <code>pom.xml</code> 如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>配置文件 <code>application.yml</code> 内容如下：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<h4 id="2-配置类"><a href="#2-配置类" class="headerlink" title="2. 配置类"></a>2. 配置类</h4><p>通过前面 RabbitMQ 的知识点学习，我们可以知道发送端的主要逻辑是：“将消息发送给 exchange，然后根据不同的策略分发给对应的 queue”。</p>
<p>本篇博文主要讨论的是消息发送，为了后续的实例演示，我们定义一个 <strong>topic 模式</strong> 的 exchange，并绑定一个 queue；（因为对发送端而言，不同的 exchange 类型，对发送端的使用姿势影响并不大，有影响的是消费者）</p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConstants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">exchange</span> <span class="operator">=</span> <span class="string">&quot;topic.e&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">routing</span> <span class="operator">=</span> <span class="string">&quot;r&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="string">&quot;topic.a&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">topicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(MqConstants.exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个持久化的队列</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(MqConstants.queue, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">binding</span><span class="params">(TopicExchange topicExchange, Queue queue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(topicExchange).with(MqConstants.routing);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitTemplate <span class="title function_">rabbitTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>(connectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-消息发送"><a href="#3-消息发送" class="headerlink" title="3. 消息发送"></a>3. 消息发送</h4><p>消息发送，主要借助的是 <code>RabbitTemplate#convertAndSend</code> 方法来实现，通常情况下，我们直接使用即可。</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicPublisher</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一般的用法，推送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ans</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">publish2mq1</span><span class="params">(String ans)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Durable msg = &quot;</span> + ans;</span><br><span class="line">        System.out.println(<span class="string">&quot;publish: &quot;</span> + msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(MqConstants.exchange, MqConstants.routing, msg);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>核心代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(MqConstants.exchange, MqConstants.routing, msg);</span><br></pre></td></tr></table></figure>

<p>表示将 <code>msg</code> 发送给指定的 exchange，并设置消息的路由键。</p>
<p><strong>请注意：</strong></p>
<ul>
<li>通过上面的方式，发送的消息默认是持久化的，当持久化的消息分发到持久化的队列时，会有消息的落盘操作。</li>
<li>在某些场景下，我们对消息的完整性要求并没有那么严格，反而更在意 MQ 的性能，丢失一些数据也可以接受；这个时候我们可能需要定制一下发送的消息属性（比如将消息设置为非持久化的）。</li>
</ul>
<p><strong>以下提供两种姿势，推荐第二种：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">publish2mq2</span><span class="params">(String ans)</span> &#123;</span><br><span class="line">    <span class="type">MessageProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageProperties</span>();</span><br><span class="line">    properties.setDeliveryMode(MessageDeliveryMode.NON_PERSISTENT);</span><br><span class="line">    <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> rabbitTemplate.getMessageConverter().toMessage(<span class="string">&quot;NonDurable = &quot;</span> + ans, properties);</span><br><span class="line"></span><br><span class="line">    rabbitTemplate.convertAndSend(MqConstants.exchange, MqConstants.routing, message);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;publish: &quot;</span> + message);</span><br><span class="line">    <span class="keyword">return</span> message.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">publish2mq3</span><span class="params">(String ans)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Define msg = &quot;</span> + ans;</span><br><span class="line">    rabbitTemplate.convertAndSend(MqConstants.exchange, MqConstants.routing, msg, <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">            message.getMessageProperties().setHeader(<span class="string">&quot;ta&quot;</span>, <span class="string">&quot;测试&quot;</span>);</span><br><span class="line">            message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.NON_PERSISTENT);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>在实际的项目开发中，推荐使用 <code>MessagePostProcessor</code> 来定制消息属性。</li>
<li>不推荐在每次发送消息时都创建一个 <code>MessagePostProcessor</code> 对象，请定义一个通用的对象，能复用就复用。</li>
</ul>
<h4 id="4-非序列化对象发送异常-case"><a href="#4-非序列化对象发送异常-case" class="headerlink" title="4. 非序列化对象发送异常 case"></a>4. 非序列化对象发送异常 case</h4><p>通过查看 <code>rabbitTemplate#convertAndSend</code> 的接口定义，我们知道发送的消息可以是 <code>Object</code> 类型，那么是不是意味着任何对象，都可以推送给 MQ 呢？</p>
<p><strong>以下是一个测试 case：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">publish2mq4</span><span class="params">(String ans)</span> &#123;</span><br><span class="line">    <span class="type">NonSerDO</span> <span class="variable">nonSerDO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NonSerDO</span>(<span class="number">18</span>, ans);</span><br><span class="line">    System.out.println(<span class="string">&quot;publish: &quot;</span> + nonSerDO);</span><br><span class="line">    rabbitTemplate.convertAndSend(MqConstants.exchange, MqConstants.routing, nonSerDO);</span><br><span class="line">    <span class="keyword">return</span> nonSerDO.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">NonSerDO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NonSerDO</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们调用上面的 <code>publish2mq4</code> 方法时，并不会是想象中的直接成功，相反抛出一个参数类型异常。</p>
<p><strong>为什么会出现这个问题呢？</strong></p>
<p>从堆栈分析，我们知道 <code>RabbitTemplate</code> 默认是利用 <code>SimpleMessageConverter</code> 来实现封装 Message 逻辑的，核心代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Message <span class="title function_">createMessage</span><span class="params">(Object object, MessageProperties messageProperties)</span> <span class="keyword">throws</span> MessageConversionException &#123;</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> <span class="type">byte</span>[]) &#123;</span><br><span class="line">        bytes = (<span class="type">byte</span>[]) object;</span><br><span class="line">        messageProperties.setContentType(MessageProperties.CONTENT_TYPE_BYTES);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bytes = ((String) object).getBytes(<span class="built_in">this</span>.defaultCharset);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MessageConversionException</span>(<span class="string">&quot;failed to convert to Message content&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        messageProperties.setContentType(MessageProperties.CONTENT_TYPE_TEXT_PLAIN);</span><br><span class="line">        messageProperties.setContentEncoding(<span class="built_in">this</span>.defaultCharset);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bytes = SerializationUtils.serialize(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MessageConversionException</span>(<span class="string">&quot;failed to convert to serialized Message content&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        messageProperties.setContentType(MessageProperties.CONTENT_TYPE_SERIALIZED_OBJECT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bytes != <span class="literal">null</span>) &#123;</span><br><span class="line">        messageProperties.setContentLength(bytes.length);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Message</span>(bytes, messageProperties);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(getClass().getSimpleName()</span><br><span class="line">            + <span class="string">&quot; only supports String, byte[] and Serializable payloads, received: &quot;</span> + object.getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面逻辑很明确地指出了，只接受 byte 数组、string 字符串、可序列化对象（这里使用的是 JDK 的序列化方式来实现对象和 byte 数组之间的互转）。</p>
<p>所以我们传递一个非序列化的对象会参数非法的异常。</p>
<p><strong>自然而然的，我们会想有没有其他的 <code>MessageConverter</code> 来友好的支持任何类型的对象？</strong></p>
<hr>
<h3 id="5-自定义-MessageConverter"><a href="#5-自定义-MessageConverter" class="headerlink" title="5. 自定义 MessageConverter"></a>5. 自定义 MessageConverter</h3><p>接下来我们希望通过自定义一个 json 序列化方式的 <code>MessageConverter</code> 来解决上面的问题。</p>
<p><strong>一个比较简单的实现（利用 FastJson 来实现序列化&#x2F;反序列化）：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SelfConverter</span> <span class="keyword">extends</span> <span class="title class_">AbstractMessageConverter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Message <span class="title function_">createMessage</span><span class="params">(Object object, MessageProperties messageProperties)</span> &#123;</span><br><span class="line">        messageProperties.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Message</span>(JSON.toJSONBytes(object), messageProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">fromMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> MessageConversionException &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parse(message.getBody());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新定义一个 <code>rabbitTemplate</code>，并设置它的消息转换器为自定义的 <code>SelfConverter</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RabbitTemplate <span class="title function_">jsonRabbitTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">    <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>(connectionFactory);</span><br><span class="line">    rabbitTemplate.setMessageConverter(<span class="keyword">new</span> <span class="title class_">SelfConverter</span>());</span><br><span class="line">    <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再次测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonPublisher</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate jsonRabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">publish1</span><span class="params">(String ans)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">        msg.put(<span class="string">&quot;msg&quot;</span>, ans);</span><br><span class="line">        msg.put(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;json&quot;</span>);</span><br><span class="line">        msg.put(<span class="string">&quot;version&quot;</span>, <span class="number">123</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;publish: &quot;</span> + msg);</span><br><span class="line">        jsonRabbitTemplate.convertAndSend(MqConstants.exchange, MqConstants.routing, msg);</span><br><span class="line">        <span class="keyword">return</span> msg.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">publish2</span><span class="params">(String ans)</span> &#123;</span><br><span class="line">        BasicPublisher.<span class="type">NonSerDO</span> <span class="variable">nonSerDO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicPublisher</span>.NonSerDO(<span class="number">18</span>, <span class="string">&quot;SELF_JSON&quot;</span> + ans);</span><br><span class="line">        System.out.println(<span class="string">&quot;publish: &quot;</span> + nonSerDO);</span><br><span class="line">        jsonRabbitTemplate.convertAndSend(MqConstants.exchange, MqConstants.routing, nonSerDO);</span><br><span class="line">        <span class="keyword">return</span> nonSerDO.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6-Jackson2JsonMessageConverter"><a href="#6-Jackson2JsonMessageConverter" class="headerlink" title="6. Jackson2JsonMessageConverter"></a>6. Jackson2JsonMessageConverter</h3><p>上面虽然实现了 Json 格式的消息转换，但是比较简陋；而且这么基础通用的功能，按照 Spring 全家桶的一贯作风，肯定是有现成可用的，没错，这就是 <strong>Jackson2JsonMessageConverter</strong>。</p>
<p>所以我们的使用姿势也可以如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义 RabbitTemplate</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RabbitTemplate <span class="title function_">jacksonRabbitTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">    <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>(connectionFactory);</span><br><span class="line">    rabbitTemplate.setMessageConverter(<span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>());</span><br><span class="line">    <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate jacksonRabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">publish3</span><span class="params">(String ans)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; msg = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;msg&quot;</span>, ans);</span><br><span class="line">    msg.put(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;jackson&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;version&quot;</span>, <span class="number">456</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;publish: &quot;</span> + msg);</span><br><span class="line">    jacksonRabbitTemplate.convertAndSend(MqConstants.exchange, MqConstants.routing, msg);</span><br><span class="line">    <span class="keyword">return</span> msg.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 Jackson 序列化消息后的内容，与我们自定义的有一些不同，多了 headers 和 content_encoding。</p>
<hr>
<h3 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a>7. 小结</h3><p>本篇博文主要的知识点如下：</p>
<ul>
<li>通过 <code>RabbitTemplate#convertAndSend</code> 来实现消息分发。</li>
<li>通过 <code>MessagePostProcessor</code> 来自定义消息的属性（请注意默认投递的消息是持久化的）。</li>
<li>默认的消息封装类为 <code>SimpleMessageConverter</code>，只支持分发 byte 数组、字符串和可序列化的对象；不满足上面三个条件的方法调用会抛异常。</li>
<li>我们可以通过实现 <code>MessageConverter</code> 接口，来定义自己的消息封装类，解决上面的问题。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Kafka消费者java客户端</title>
    <url>/2024/08/17/Kafka%E6%B6%88%E8%B4%B9%E8%80%85java%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<h3 id="Kafka-消费者-Java-客户端"><a href="#Kafka-消费者-Java-客户端" class="headerlink" title="Kafka 消费者 Java 客户端"></a>Kafka 消费者 Java 客户端</h3><p>Kafka 客户端从 Kafka 集群中获取消息，并透明地处理 Kafka 集群中出现故障的 Broker，透明地调节适应集群中变化的数据分区。它也与 Broker 交互，实现负载平衡消费者。</p>
<h4 id="Offset（偏移量）和消费者位置"><a href="#Offset（偏移量）和消费者位置" class="headerlink" title="Offset（偏移量）和消费者位置"></a>Offset（偏移量）和消费者位置</h4><p>Kafka 为分区中的每条消息保存一个偏移量（offset），这个的偏移量是该分区中一条消息的唯一标识，也表示消费者在分区的位置。例如，一个位置是 5 的消费者（说明已经消费了 0 到 4 的消息），下一个将接收的消息的偏移量为 5 的消息。实际上，这有两个与消费者相关的“位置”概念：</p>
<ul>
<li><strong>消费者的位置</strong>：给出了下一条消息的偏移量。它比消费者在该分区中看到的最大偏移量大一个。它在每次消费者调用 <code>poll(Duration)</code> 接收消息时自动增长。</li>
<li><strong>已提交的位置</strong>：是已安全保存的最后偏移量，如果进程失败或重新启动时，消费者将恢复到这个偏移量。消费者可以选择定期自动提交偏移量，也可以选择通过调用 <code>commit</code> API 来手动控制（如：<code>commitSync</code> 和 <code>commitAsync</code>）。</li>
</ul>
<p>主要区别在于消费者控制一条消息什么时候被认为是已被消费的，控制权在消费者。</p>
<h4 id="消费者组和主题订阅"><a href="#消费者组和主题订阅" class="headerlink" title="消费者组和主题订阅"></a>消费者组和主题订阅</h4><p>Kafka 的消费者组概念，通过进程池瓜分消息并处理消息。这些进程可以在同一台机器运行，也可分布到多台机器上，以增加可扩展性和容错性，相同 <code>group.id</code> 的消费者将视为同一个消费者组。</p>
<p>组中的每个消费者都通过 <code>subscribe</code> API 动态订阅一个 topic 列表。Kafka 将已订阅 topic 的消息发送到每个消费者组中，并通过平衡分区在消费者分组中所有成员之间来达到平均。因此，每个分区恰好地分配 1 个消费者（一个消费者组中）。所以，如果一个 topic 有 4 个分区，并且一个消费者分组只有 2 个消费者，那么每个消费者将消费 2 个分区。</p>
<p>消费者组的成员是动态维护的：如果一个消费者故障，分配给它的分区将重新分配给同一个分组中其他的消费者。同样，如果一个新的消费者加入到分组，将从现有消费者中移一个给它。这被称为重新平衡分组。当新分区添加到订阅的 topic 时，或者当创建与订阅的正则表达式匹配的新 topic 时，也将重新平衡。将通过定时刷新自动发现新的分区，并将其分配给分组的成员。</p>
<p>从概念上讲，你可以将消费者分组看作是由多个进程组成的单一逻辑订阅者。作为一个多订阅系统，Kafka 支持对于给定 topic 任何数量的消费者组，而不重复。</p>
<p>这是在消息系统中常见的功能的略微概括。所有进程都将是单个消费者分组的一部分（类似传统消息传递系统中的队列的语义），因此消息传递就像队列一样，在组中平衡。与传统的消息系统不同的是，虽然你可以有多个这样的组，但每个进程都有自己的消费者组（类似于传统消息系统中 pub-sub 的语义），因此每个进程都会订阅到该主题的所有消息。</p>
<p>此外，当分组重新分配自动发生时，可以通过 <code>ConsumerRebalanceListener</code> 通知消费者，这允许他们完成必要的应用程序级逻辑，例如状态清除、手动偏移提交等。</p>
<p>它也允许消费者通过使用 <code>assign(Collection)</code> 手动分配指定分区，如果使用手动指定分配分区，那么动态分区分配和协调消费者组将失效。</p>
<h4 id="发现消费者故障"><a href="#发现消费者故障" class="headerlink" title="发现消费者故障"></a>发现消费者故障</h4><p>订阅一组 topic 后，当调用 <code>poll(long)</code> 时，消费者将自动加入到组中。只要持续调用 <code>poll</code>，消费者将一直保持可用，并继续从分配的分区中接收消息。此外，消费者向服务器定时发送心跳。如果消费者崩溃或无法在 <code>session.timeout.ms</code> 配置的时间内发送心跳，则消费者将被视为死亡，并且其分区将被重新分配。</p>
<p>还有一种可能，消费者可能遇到“活锁”的情况，它持续发送心跳，但没有处理。为了预防消费者在这种情况下一直持有分区，我们使用 <code>max.poll.interval.ms</code> 活跃检测机制。在此基础上，如果你调用的 <code>poll</code> 的频率大于最大间隔，则客户端将主动离开组，以便其他消费者接管该分区。</p>
<p>发生这种情况时，你会看到偏移量提交失败（调用 <code>commitSync()</code> 引发的 <code>CommitFailedException</code>）。这是一种安全机制，保障只有活动成员能够提交偏移量。所以要留在组中，你必须持续调用 <code>poll</code>。</p>
<p>消费者提供两个配置设置来控制 <code>poll</code> 循环：</p>
<ul>
<li><strong>max.poll.interval.ms</strong>：增大 <code>poll</code> 的间隔，可以为消费者提供更多的时间去处理返回的消息（调用 <code>poll(long)</code> 返回的消息，通常返回的消息都是一批）。缺点是此值越大将会延迟组重新平衡。</li>
<li><strong>max.poll.records</strong>：此设置限制每次调用 <code>poll</code> 返回的消息数，这样可以更容易地预测每次 <code>poll</code> 间隔要处理的最大值。通过调整此值，可以减少 <code>poll</code> 间隔，减少重新平衡分组的时间。</li>
</ul>
<p>对于消息处理时间不可预测的情况，这些选项是不够的。处理这种情况的推荐方法是将消息处理移到另一个线程中，让消费者继续调用 <code>poll</code>。但是必须注意确保已提交的偏移量不超过实际位置。另外，你必须禁用自动提交，并只有在线程完成处理后才为记录手动提交偏移量（取决于你）。还要注意，你需要暂停分区，不会从 <code>poll</code> 接收到新消息，让线程处理完之前返回的消息（如果你的处理能力比拉取消息的慢，那么创建新线程将导致你机器内存溢出）。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="自动提交偏移量（Automatic-Offset-Committing）"><a href="#自动提交偏移量（Automatic-Offset-Committing）" class="headerlink" title="自动提交偏移量（Automatic Offset Committing）"></a>自动提交偏移量（Automatic Offset Committing）</h4><p>这是一个简单的 Kafka 消费者 API 示例，使用自动提交偏移量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;10.4.3.41:29092,10.4.3.41:39092,10.4.3.41:49092&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;auto.commit.interval.ms&quot;</span>, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(props);</span><br><span class="line">        consumer.subscribe(List.of(<span class="string">&quot;my-topic&quot;</span>));</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records)</span><br><span class="line">                System.out.printf(<span class="string">&quot;offset = %d, key = %s, value = %s%n&quot;</span>, record.offset(), record.key(), record.value());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>设置：</strong></p>
<ul>
<li><code>enable.auto.commit</code>：偏移量由 <code>auto.commit.interval.ms</code> 控制自动提交的频率。</li>
<li><code>bootstrap.servers</code>：集群是通过配置 <code>bootstrap.servers</code> 指定一个或多个 Broker。不用指定全部的 Broker，它将自动发现集群中的其余的 Broker（最好指定多个，以防有服务器故障）。</li>
<li><code>group.id</code>：在这个例子中，客户端订阅了主题 <code>my-topic</code>。消费者组叫 <code>test</code>。</li>
<li><code>key.deserializer</code> 和 <code>value.deserializer</code>：设置如何把 byte 转成 object 类型。例子中，通过指定 string 解析器，我们告诉获取到的消息的 key 和 value 只是简单的 string 类型。</li>
</ul>
<h4 id="手动控制偏移量（Manual-Offset-Control）"><a href="#手动控制偏移量（Manual-Offset-Control）" class="headerlink" title="手动控制偏移量（Manual Offset Control）"></a>手动控制偏移量（Manual Offset Control）</h4><p>不需要定时提交 offset，可以自己控制 offset，当消息认为已消费过了，这个时候再去提交它们的偏移量。这很有用，当消费的消息结合了一些处理逻辑，这个消息就不应该认为是已经消费的，直到它完成了整个处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;10.4.3.41:29092,10.4.3.41:39092,10.4.3.41:49092&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;auto.commit.interval.ms&quot;</span>, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(props);</span><br><span class="line">        consumer.subscribe(List.of(<span class="string">&quot;my-topic&quot;</span>));</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;offset = %d, key = %s, value = %s%n&quot;</span>, record.offset(), record.key(), record.value());</span><br><span class="line">                consumer.commitSync();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>设置：</strong></p>
<ul>
<li><code>enable.auto.commit</code> 设置为 <code>false</code>，在处理完数据后提交 <code>consumer.commitSync()</code>。</li>
</ul>
<p>使用自动提交也可以“至少一次”。但是要求你必须下次调用 <code>poll(Duration)</code> 之前或关闭消费者之前，处理完所有返回的数据。如果操作失败，这将会导致已提交的偏移量超过消费的位置，从而导致丢失消息。使用手动控制偏移量的优点是，你可以直接控制消息何时提交。</p>
<h4 id="更精细的控制"><a href="#更精细的控制" class="headerlink" title="更精细的控制"></a>更精细的控制</h4><p>在某些情况下，你可以希望更精细的控制，通过指定一个明确消息的偏移量为“已提交”。在下面的例子中，我们处理完每个分区中的消息后，提交偏移量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;10.4.3.41:29092,10.4.3.41:39092,10.4.3.41:49092&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;auto.commit.interval.ms&quot;</span>, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(props);</span><br><span class="line">        consumer.subscribe(List.of(<span class="string">&quot;my-topic&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(Long.MAX_VALUE));</span><br><span class="line">                <span class="keyword">for</span> (TopicPartition partition : records.partitions()) &#123;</span><br><span class="line">                    List&lt;ConsumerRecord&lt;String, String&gt;&gt; partitionRecords = records.records(partition);</span><br><span class="line">                    <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : partitionRecords) &#123;</span><br><span class="line">                        System.out.println(record.offset() + <span class="string">&quot;: &quot;</span> + record.value());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">lastOffset</span> <span class="operator">=</span> partitionRecords.get(partitionRecords.size() - <span class="number">1</span>).offset();</span><br><span class="line">                    System.out.println(<span class="string">&quot;偏移量&quot;</span> + lastOffset);</span><br><span class="line">                    consumer.commitSync(Collections.singletonMap(partition, <span class="keyword">new</span> <span class="title class_">OffsetAndMetadata</span>(lastOffset + <span class="number">1</span>)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            consumer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 已提交的 offset 应始终是你的程序将读取的下一条消息的 offset。因此，调用 <code>commitSync(offsets)</code> 时，你应该加 1 到最后处理的消息的 offset。</p>
<h4 id="订阅指定的分区（Manual-Partition-Assignment）"><a href="#订阅指定的分区（Manual-Partition-Assignment）" class="headerlink" title="订阅指定的分区（Manual Partition Assignment）"></a>订阅指定的分区（Manual Partition Assignment）</h4><p>在前面的例子中，我们订阅我们感兴趣的 topic，让 Kafka 提供给我们平分后的 topic 分区。但是，在有些情况下，你可能需要自己来控制分配指定分区，例如：</p>
<ul>
<li>如果这个消费者进程与该分区保存了某种本地状态（如本地磁盘的键值存储），则它应该只能获取这个分区的消息。</li>
<li>如果消费者进程本身具有高可用性，并且如果它失败，会自动重新启动（可能使用集群管理框架如 YARN，Mesos，或者 AWS 设施，或作为一个流处理框架的一部分）。在这种情况下，不需要 Kafka 检测故障，重新分配分区，因为消费者进程将在另一台机器上重新启动。</li>
</ul>
<p>要使用此模式，你只需调用 <code>assign(Collection)</code> 消费指定的分区即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        props.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;10.4.3.41:29092,10.4.3.41:39092,10.4.3.41:49092&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义分区</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;my-topic&quot;</span>;</span><br><span class="line">        <span class="type">TopicPartition</span> <span class="variable">partition0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TopicPartition</span>(topic, <span class="number">0</span>);</span><br><span class="line">        <span class="type">TopicPartition</span> <span class="variable">partition1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TopicPartition</span>(topic, <span class="number">1</span>);</span><br><span class="line">        consumer.assign(Arrays.asList(partition0, partition1));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(Long.MAX_VALUE));</span><br><span class="line">                <span class="keyword">for</span> (TopicPartition partition : records.partitions()) &#123;</span><br><span class="line">                    List&lt;ConsumerRecord&lt;String, String&gt;&gt; partitionRecords = records.records(partition);</span><br><span class="line">                    <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : partitionRecords) &#123;</span><br><span class="line">                        System.out.println(record.offset() + <span class="string">&quot;: &quot;</span> + record.value());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">lastOffset</span> <span class="operator">=</span> partitionRecords.get(partitionRecords.size() - <span class="number">1</span>).offset();</span><br><span class="line">                    System.out.println(<span class="string">&quot;偏移量&quot;</span> + lastOffset);</span><br><span class="line">                    consumer.commitSync(Collections.singletonMap(partition, <span class="keyword">new</span> <span class="title class_">OffsetAndMetadata</span>(lastOffset + <span class="number">1</span>)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            consumer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>一旦手动分配分区，你可以在循环中调用 <code>poll</code>（跟前面的例子一样）。消费者分组仍需要提交 offset，只是现在分区的设置只能通过调用 <code>assign</code> 修改，因为手动分配不会进行分组协调，因此消费者故障不会引发分区重新平衡。每一个消费者是独立工作的（即使和其他的消费者共享 <code>GroupId</code>）。为了避免 offset 提交冲突，通常你需要确认每一个 consumer 实例的 <code>groupId</code> 都是唯一的。</li>
<li>手动分配分区（即，<code>assign</code>）和动态分区分配的订阅 topic 模式（即，<code>subscribe</code>）不能混合使用。</li>
</ul>
]]></content>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-接口限流</title>
    <url>/2024/12/28/Redis-%E6%8E%A5%E5%8F%A3%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<h5 id="每天进步一点点！很久没在博客更这方面了，最近一直在不断地写接口写接口…"><a href="#每天进步一点点！很久没在博客更这方面了，最近一直在不断地写接口写接口…" class="headerlink" title="每天进步一点点！很久没在博客更这方面了，最近一直在不断地写接口写接口…"></a>每天进步一点点！很久没在博客更这方面了，最近一直在不断地写接口写接口…</h5><p>言归正传Redis 除了做缓存，还能干很多很多事情。在项目中应对接口被频繁请求导致阻塞的问题，可以通过Redis实现限流。以下是分步解决方案：</p>
<p>参考这个大佬详细的讲解：<a href="https://www.cnblogs.com/qq1141100952com/p/15080264.html">https://www.cnblogs.com/qq1141100952com/p/15080264.html</a></p>
<h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a><strong>1. 添加依赖</strong></h3><p>确保<code>pom.xml</code>包含Spring Boot的Redis、Web和AOP依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-配置Redis序列化"><a href="#2-配置Redis序列化" class="headerlink" title="2. 配置Redis序列化"></a><strong>2. 配置Redis序列化</strong></h3><p>避免Redis键值出现额外前缀，配置<code>RedisTemplate</code>使用Jackson序列化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(om);</span><br><span class="line">        template.setKeySerializer(serializer);</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line">        template.setHashKeySerializer(serializer);</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-定义限流注解"><a href="#3-定义限流注解" class="headerlink" title="3. 定义限流注解"></a><strong>3. 定义限流注解</strong></h3><p>创建<code>@RateLimiter</code>注解，支持全局和IP限流：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">LimitType</span> &#123; DEFAULT, IP &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RateLimiter &#123;</span><br><span class="line">    String <span class="title function_">key</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;rate_limit:&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">time</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">60</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">100</span>;</span><br><span class="line">    LimitType <span class="title function_">limitType</span><span class="params">()</span> <span class="keyword">default</span> LimitType.DEFAULT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-实现限流Lua脚本"><a href="#4-实现限流Lua脚本" class="headerlink" title="4. 实现限流Lua脚本"></a><strong>4. 实现限流Lua脚本</strong></h3><p>在<code>resources/lua/limit.lua</code>中编写限流逻辑：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> count = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">local</span> <span class="built_in">time</span> = <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">local</span> current = redis.call(<span class="string">&#x27;get&#x27;</span>, key)</span><br><span class="line"><span class="keyword">if</span> current <span class="keyword">and</span> <span class="built_in">tonumber</span>(current) &gt;= count <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tonumber</span>(current)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">current = redis.call(<span class="string">&#x27;incr&#x27;</span>, key)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">tonumber</span>(current) == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    redis.call(<span class="string">&#x27;expire&#x27;</span>, key, <span class="built_in">time</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">tonumber</span>(current)</span><br></pre></td></tr></table></figure>

<h3 id="5-加载Lua脚本并配置AOP切面"><a href="#5-加载Lua脚本并配置AOP切面" class="headerlink" title="5. 加载Lua脚本并配置AOP切面"></a><strong>5. 加载Lua脚本并配置AOP切面</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DefaultRedisScript&lt;Long&gt; <span class="title function_">limitScript</span><span class="params">()</span> &#123;</span><br><span class="line">    DefaultRedisScript&lt;Long&gt; script = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">    script.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;lua/limit.lua&quot;</span>));</span><br><span class="line">    script.setResultType(Long.class);</span><br><span class="line">    <span class="keyword">return</span> script;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimiterAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;Object, Object&gt; redisTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisScript&lt;Long&gt; limitScript;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(rateLimiter)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">(JoinPoint point, RateLimiter rateLimiter)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> rateLimiter.key();</span><br><span class="line">        <span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> rateLimiter.time();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> rateLimiter.count();</span><br><span class="line">        <span class="type">String</span> <span class="variable">combineKey</span> <span class="operator">=</span> getCombineKey(rateLimiter, point);</span><br><span class="line">        List&lt;Object&gt; keys = Collections.singletonList(combineKey);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">current</span> <span class="operator">=</span> redisTemplate.execute(limitScript, keys, count, time);</span><br><span class="line">        <span class="keyword">if</span> (current != <span class="literal">null</span> &amp;&amp; current &gt; count) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LimiterException</span>(<span class="string">&quot;访问过于频繁，请稍后再试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getCombineKey</span><span class="params">(RateLimiter rateLimiter, JoinPoint point)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(rateLimiter.key());</span><br><span class="line">        <span class="keyword">if</span> (rateLimiter.limitType() == LimitType.IP) &#123;</span><br><span class="line">            sb.append(IpUtil.getIp()).append(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) point.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        sb.append(method.getDeclaringClass().getName())</span><br><span class="line">          .append(<span class="string">&quot;-&quot;</span>).append(method.getName());</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-异常处理"><a href="#6-异常处理" class="headerlink" title="6. 异常处理"></a><strong>6. 异常处理</strong></h3><p>定义自定义异常及全局处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LimiterException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LimiterException</span><span class="params">(String msg)</span> &#123; <span class="built_in">super</span>(msg); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(LimiterException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">handleLimiterException</span><span class="params">(LimiterException e)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; body = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        body.put(<span class="string">&quot;code&quot;</span>, <span class="number">429</span>);</span><br><span class="line">        body.put(<span class="string">&quot;message&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS).body(body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-使用注解进行接口限流"><a href="#7-使用注解进行接口限流" class="headerlink" title="7. 使用注解进行接口限流"></a><strong>7. 使用注解进行接口限流</strong></h3><p>在需要限流的接口上添加<code>@RateLimiter</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@RateLimiter(time = 5, count = 3, limitType = LimitType.IP)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello at &quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优化与注意事项"><a href="#优化与注意事项" class="headerlink" title="优化与注意事项"></a><strong>优化与注意事项</strong></h3><ul>
<li><strong>时间窗口问题</strong>：当前方案使用固定时间窗口，可能在窗口切换时出现流量突增。如需更平滑控制，可改用滑动窗口（如Redis的ZSET记录每次请求时间戳）。</li>
<li><strong>集群环境</strong>：Redis天然支持分布式，确保多实例限流准确。</li>
<li><strong>性能影响</strong>：频繁访问Redis可能增加延迟，确保Redis高性能或考虑本地缓存结合分布式限流。</li>
<li><strong>异常降级</strong>：在Redis不可用时，可引入熔断机制，临时禁用限流保证服务可用。</li>
</ul>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SerializationUtils序列化和HTTP 工具类</title>
    <url>/2025/03/16/SerializationUtils%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8CHTTP-%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="一-SerializationUtils"><a href="#一-SerializationUtils" class="headerlink" title="一. SerializationUtils"></a>一. SerializationUtils</h3><p>在某些场景下，我们需要对数据进行序列化和反序列化处理。传统的做法是让某个类实现 <code>Serializable</code> 接口，然后重写它的 <code>writeObject</code> 和 <code>readObject</code> 方法。但如果你使用 Spring 的 <code>org.springframework.util</code> 包下的 <code>SerializationUtils</code> 工具类，可以更轻松地实现序列化和反序列化功能。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = Maps.newHashMap();</span><br><span class="line">map.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="type">byte</span>[] serialize = SerializationUtils.serialize(map);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">deserialize</span> <span class="operator">=</span> SerializationUtils.deserialize(serialize);</span><br><span class="line">System.out.println(deserialize);</span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;a=1, b=2, c=3&#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>SerializationUtils.serialize</code> 方法可以将对象序列化为字节数组。</li>
<li><code>SerializationUtils.deserialize</code> 方法可以将字节数组反序列化为对象。</li>
<li>这个工具类简化了序列化和反序列化的操作，避免了手动实现 <code>Serializable</code> 接口的复杂性。</li>
</ul>
<h3 id="二-HttpStatus"><a href="#二-HttpStatus" class="headerlink" title="二. HttpStatus"></a>二. HttpStatus</h3><p>在开发 Web 应用时，我们经常需要定义 HTTP 的返回码，比如：</p>
<ul>
<li>接口正常返回 200</li>
<li>异常返回 500</li>
<li>接口找不到返回 404</li>
<li>接口不可用返回 502</li>
</ul>
<p>通常，我们会手动定义这些返回码，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">SUCCESS_CODE</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">ERROR_CODE</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">NOT_FOUND_CODE</span> <span class="operator">=</span> <span class="number">404</span>;</span><br></pre></td></tr></table></figure>

<p>但其实，Spring 的 <code>org.springframework.http</code> 包下的 <code>HttpStatus</code> 枚举，或者 Apache 的 <code>org.apache.http</code> 包下的 <code>HttpStatus</code> 接口，已经把常用的 HTTP 返回码定义好了，我们可以直接使用，无需重复定义。</p>
<p>例如，使用 Spring 的 <code>HttpStatus</code> 枚举：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 HTTP 状态码</span></span><br><span class="line"><span class="type">int</span> <span class="variable">successCode</span> <span class="operator">=</span> HttpStatus.OK.value(); <span class="comment">// 200</span></span><br><span class="line"><span class="type">int</span> <span class="variable">errorCode</span> <span class="operator">=</span> HttpStatus.INTERNAL_SERVER_ERROR.value(); <span class="comment">// 500</span></span><br><span class="line"><span class="type">int</span> <span class="variable">notFoundCode</span> <span class="operator">=</span> HttpStatus.NOT_FOUND.value(); <span class="comment">// 404</span></span><br><span class="line"><span class="type">int</span> <span class="variable">badGatewayCode</span> <span class="operator">=</span> HttpStatus.BAD_GATEWAY.value(); <span class="comment">// 502</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Success Code: &quot;</span> + successCode);</span><br><span class="line">System.out.println(<span class="string">&quot;Error Code: &quot;</span> + errorCode);</span><br><span class="line">System.out.println(<span class="string">&quot;Not Found Code: &quot;</span> + notFoundCode);</span><br><span class="line">System.out.println(<span class="string">&quot;Bad Gateway Code: &quot;</span> + badGatewayCode);</span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Success Code: 200</span><br><span class="line">Error Code: 500</span><br><span class="line">Not Found Code: 404</span><br><span class="line">Bad Gateway Code: 502</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>HttpStatus</code> 枚举提供了所有常见的 HTTP 状态码，通过调用 <code>.value()</code> 方法可以获取对应的整数值。</li>
<li>这样可以避免手动定义状态码，减少代码冗余，同时提高代码的可读性和可维护性。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><strong>SerializationUtils</strong>：提供了简单的序列化和反序列化方法，简化了操作流程。</li>
<li><strong>HttpStatus</strong>：提供了常用的 HTTP 状态码，避免了手动定义状态码的麻烦，提高了代码的可读性和可维护性。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ReflectionUtils 工具类</title>
    <url>/2025/02/28/ReflectionUtils-%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="ReflectionUtils-工具类"><a href="#ReflectionUtils-工具类" class="headerlink" title="ReflectionUtils 工具类"></a>ReflectionUtils 工具类</h3><h4 id="很久没更了…努力多更轮子工具类，打算更点github的开源项目或者插件。不得不说记在语雀确实是方便很多，考虑换个博客的记载方式了"><a href="#很久没更了…努力多更轮子工具类，打算更点github的开源项目或者插件。不得不说记在语雀确实是方便很多，考虑换个博客的记载方式了" class="headerlink" title="很久没更了…努力多更轮子工具类，打算更点github的开源项目或者插件。不得不说记在语雀确实是方便很多，考虑换个博客的记载方式了"></a>很久没更了…努力多更轮子工具类，打算更点github的开源项目或者插件。不得不说记在语雀确实是方便很多，考虑换个博客的记载方式了</h4><p><code>ReflectionUtils</code> 是 Spring 框架中提供的一个非常实用的工具类，位于 <code>org.springframework.util</code> 包中。它包含了许多与反射相关的实用方法，可以帮助我们更高效地进行反射操作。以下是一些常用的用法：</p>
<h4 id="1-2-获取字段"><a href="#1-2-获取字段" class="headerlink" title="1.2 获取字段"></a>1.2 获取字段</h4><p>如果你想获取某个类的某个字段，可以使用 <code>ReflectionUtils</code> 的 <code>findField</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> ReflectionUtils.findField(User.class, <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>findField</code> 方法会查找 <code>User</code> 类中名为 <code>id</code> 的字段。</li>
<li>这个方法在需要动态访问字段时非常有用，尤其是在处理反射或动态代理时。</li>
</ul>
<h4 id="1-3-执行方法"><a href="#1-3-执行方法" class="headerlink" title="1.3 执行方法"></a>1.3 执行方法</h4><p>如果你想通过反射调用某个方法并传递参数，可以使用 <code>ReflectionUtils</code> 的 <code>invokeMethod</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ReflectionUtils.invokeMethod(method, springContextsUtil.getBean(beanName), param);</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>invokeMethod</code> 方法会调用指定的方法 <code>method</code>，并传递参数 <code>param</code>。</li>
<li>第一个参数是 <code>Method</code> 对象，第二个参数是目标对象，第三个参数是方法的参数。</li>
<li>这个方法在需要动态调用方法时非常有用，尤其是在处理反射或动态代理时。</li>
</ul>
<h4 id="1-4-判断字段是否常量"><a href="#1-4-判断字段是否常量" class="headerlink" title="1.4 判断字段是否常量"></a>1.4 判断字段是否常量</h4><p>如果你想判断某个字段是否是常量，可以使用 <code>ReflectionUtils</code> 的 <code>isPublicStaticFinal</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> ReflectionUtils.findField(User.class, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">System.out.println(ReflectionUtils.isPublicStaticFinal(field));</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>isPublicStaticFinal</code> 方法会检查字段是否是 <code>public</code>、<code>static</code> 和 <code>final</code> 的。</li>
<li>这个方法在需要判断字段是否是常量时非常有用，尤其是在处理反射或动态代理时。</li>
</ul>
<h4 id="1-5-判断是否是-equals-方法"><a href="#1-5-判断是否是-equals-方法" class="headerlink" title="1.5 判断是否是 equals 方法"></a>1.5 判断是否是 <code>equals</code> 方法</h4><p>如果你想判断某个方法是否是 <code>equals</code> 方法，可以使用 <code>ReflectionUtils</code> 的 <code>isEqualsMethod</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ReflectionUtils.findMethod(User.class, <span class="string">&quot;equals&quot;</span>, Object.class);</span><br><span class="line">System.out.println(ReflectionUtils.isEqualsMethod(method));</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>isEqualsMethod</code> 方法会检查方法是否是 <code>equals</code> 方法。</li>
<li>第一个参数是 <code>Method</code> 对象。</li>
<li>这个方法在需要动态检查方法时非常有用，尤其是在处理反射或动态代理时。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>ReflectionUtils</code> 是 Spring 提供的一个非常强大的工具类，它包含了许多实用的方法，可以帮助我们更高效地进行反射操作。无论是获取字段、执行方法、判断字段是否常量，还是判断方法是否是 <code>equals</code> 方法，<code>ReflectionUtils</code> 都能提供简单而强大的支持。</p>
]]></content>
      <categories>
        <category>提升效率的轮子</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot+RabbitMQ</title>
    <url>/2024/07/07/Spring-Boot-RabbitMQ/</url>
    <content><![CDATA[<h3 id="Spring-Boot-集成-RabbitMQ"><a href="#Spring-Boot-集成-RabbitMQ" class="headerlink" title="Spring Boot 集成 RabbitMQ"></a>Spring Boot 集成 RabbitMQ</h3><p>门店信息同步需要用到消息队列，最近在学习RabbitMQ和Kafka。Spring Boot 集成 RabbitMQ 也是比较方便，通过 <code>spring-boot-starter-amqp</code> 提供了对 RabbitMQ 的全面支持。</p>
<h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><h5 id="1-配置-pom-xml"><a href="#1-配置-pom-xml" class="headerlink" title="1. 配置 pom.xml"></a>1. 配置 <code>pom.xml</code></h5><p>首先，需要在项目的 <code>pom.xml</code> 文件中添加 <code>spring-boot-starter-amqp</code> 的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h5><p>在 <code>application.properties</code> 或 <code>application.yml</code> 文件中配置 RabbitMQ 的连接信息：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RabbitMQ 配置</span></span><br><span class="line"><span class="attr">spring.rabbitmq.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="attr">spring.rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="attr">spring.rabbitmq.username</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">spring.rabbitmq.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<h5 id="3-队列配置"><a href="#3-队列配置" class="headerlink" title="3. 队列配置"></a>3. 队列配置</h5><p>创建一个配置类来定义队列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">helloQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-发送者"><a href="#4-发送者" class="headerlink" title="4. 发送者"></a>4. 发送者</h5><p>创建一个发送者类，使用 <code>RabbitTemplate</code> 发送消息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloSender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> <span class="string">&quot;hello &quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Sender : &quot;</span> + context);</span><br><span class="line">        <span class="built_in">this</span>.rabbitTemplate.convertAndSend(<span class="string">&quot;hello&quot;</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-接收者"><a href="#5-接收者" class="headerlink" title="5. 接收者"></a>5. 接收者</h5><p>创建一个接收者类，使用 <code>@RabbitListener</code> 和 <code>@RabbitHandler</code> 注解来接收消息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(String hello)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Receiver  : &quot;</span> + hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h5><p>创建一个测试类来测试消息发送和接收：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqHelloTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloSender helloSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        helloSender.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 发送者和接收者的队列名称必须一致，否则接收者无法接收到消息。</p>
<h4 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h4><h5 id="对象的支持"><a href="#对象的支持" class="headerlink" title="对象的支持"></a>对象的支持</h5><p>Spring Boot 支持对象的发送和接收，无需额外配置。以下是一个示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Sender object: &quot;</span> + user.toString());</span><br><span class="line">    <span class="built_in">this</span>.rabbitTemplate.convertAndSend(<span class="string">&quot;object&quot;</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收者</span></span><br><span class="line"><span class="meta">@RabbitHandler</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Receiver object : &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sender object: User&#123;name=&#x27;neo&#x27;, pass=&#x27;123456&#x27;&#125;</span><br><span class="line">Receiver object : User&#123;name=&#x27;neo&#x27;, pass=&#x27;123456&#x27;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Topic-Exchange"><a href="#Topic-Exchange" class="headerlink" title="Topic Exchange"></a>Topic Exchange</h5><p>Topic 是 RabbitMQ 中最灵活的一种方式，可以根据 <code>routing_key</code> 自由地绑定不同的队列。以下是一个示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicRabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">TOPIC_ONE</span> <span class="operator">=</span> <span class="string">&quot;topic.one&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">TOPIC_TWO</span> <span class="operator">=</span> <span class="string">&quot;topic.two&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">TOPIC_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;topicExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue_one</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(TOPIC_ONE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue_two</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(TOPIC_TWO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    TopicExchange <span class="title function_">exchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(TOPIC_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeOne</span><span class="params">(Queue queue_one, TopicExchange exchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue_one).to(exchange).with(<span class="string">&quot;topic.one&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeTwo</span><span class="params">(Queue queue_two, TopicExchange exchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue_two).to(exchange).with(<span class="string">&quot;topic.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicSender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send_one</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> <span class="string">&quot;Hi, I am message one&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sender : &quot;</span> + context);</span><br><span class="line">        <span class="built_in">this</span>.rabbitTemplate.convertAndSend(TopicRabbitConfig.TOPIC_EXCHANGE, <span class="string">&quot;topic.one&quot;</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send_two</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> <span class="string">&quot;Hi, I am message two&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sender : &quot;</span> + context);</span><br><span class="line">        <span class="built_in">this</span>.rabbitTemplate.convertAndSend(TopicRabbitConfig.TOPIC_EXCHANGE, <span class="string">&quot;topic.two&quot;</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<ul>
<li>发送 <code>send_one</code> 时，<code>topic.one</code> 和 <code>topic.two</code> 队列都能接收到消息。</li>
<li>发送 <code>send_two</code> 时，只有 <code>topic.two</code> 队列能接收到消息。</li>
</ul>
<h5 id="Fanout-Exchange"><a href="#Fanout-Exchange" class="headerlink" title="Fanout Exchange"></a>Fanout Exchange</h5><p>Fanout 是一种广播模式，所有绑定到 Fanout 交换机的队列都能接收到消息。以下是一个示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutRabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">AMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">BMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">CMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;fanoutExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeA</span><span class="params">(Queue AMessage, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(AMessage).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeB</span><span class="params">(Queue BMessage, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(BMessage).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingExchangeC</span><span class="params">(Queue CMessage, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(CMessage).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> <span class="string">&quot;hi, fanout msg &quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;Sender : &quot;</span> + context);</span><br><span class="line">    <span class="built_in">this</span>.rabbitTemplate.convertAndSend(<span class="string">&quot;fanoutExchange&quot;</span>, <span class="string">&quot;&quot;</span>, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Sender : hi, fanout msg </span><br><span class="line">...</span><br><span class="line">fanout Receiver B: hi, fanout msg </span><br><span class="line">fanout Receiver A  : hi, fanout msg </span><br><span class="line">fanout Receiver C: hi, fanout msg</span><br></pre></td></tr></table></figure>

<h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ol>
<li><p><strong>新建用户权限问题</strong></p>
<ul>
<li>新建用户时，必须给该用户设置 <code>vhost</code> 的访问权限。可以通过命令行或管理界面设置，推荐使用命令行。</li>
<li>命令行：<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p / your_user <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>对象传输问题</strong></p>
<ul>
<li>使用对象传输时，对象必须实现 <code>Serializable</code> 接口，否则无法传输。</li>
</ul>
</li>
<li><p><strong>队列处理问题</strong></p>
<ul>
<li>如果任何一个队列中出现了不能处理的消息，整个 <code>vhost</code> 就会不可用。建议将不同的队列和交换机放在不同的 <code>vhost</code> 下，以避免互相干扰。</li>
</ul>
</li>
</ol>
<h4 id="详细的可以参考社区大佬的详细教程：https-cloud-tencent-com-developer-article-1775294"><a href="#详细的可以参考社区大佬的详细教程：https-cloud-tencent-com-developer-article-1775294" class="headerlink" title="详细的可以参考社区大佬的详细教程：https://cloud.tencent.com/developer/article/1775294"></a>详细的可以参考社区大佬的详细教程：<a href="https://cloud.tencent.com/developer/article/1775294">https://cloud.tencent.com/developer/article/1775294</a></h4>]]></content>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>StringUtils 工具类</title>
    <url>/2024/11/30/StringUtils-%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="六-StringUtils-工具类"><a href="#六-StringUtils-工具类" class="headerlink" title="六. StringUtils 工具类"></a>六. StringUtils 工具类</h3><p><code>StringUtils</code> 是一个非常实用的字符串处理工具类，提供了许多方便的方法来操作字符串。以下是一些常用的用法：</p>
<h4 id="6-3-判断是否纯数字"><a href="#6-3-判断是否纯数字" class="headerlink" title="6.3 判断是否纯数字"></a>6.3 判断是否纯数字</h4><p>给定一个字符串，判断它是否为纯数字，可以使用 <code>isNumeric</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;123q&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;0.33&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(StringUtils.isNumeric(str1)); <span class="comment">// 判断是否为纯数字</span></span><br><span class="line">System.out.println(StringUtils.isNumeric(str2)); <span class="comment">// 判断是否为纯数字</span></span><br><span class="line">System.out.println(StringUtils.isNumeric(str3)); <span class="comment">// 判断是否为纯数字</span></span><br></pre></td></tr></table></figure>

<p><strong>执行结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>isNumeric</code> 方法会检查字符串是否只包含数字字符（0-9）。如果字符串中包含任何非数字字符（如字母、小数点等），则返回 <code>false</code>。</li>
</ul>
<h4 id="6-4-将集合拼接成字符串"><a href="#6-4-将集合拼接成字符串" class="headerlink" title="6.4 将集合拼接成字符串"></a>6.4 将集合拼接成字符串</h4><p>有时候，我们需要将某个集合的内容拼接成一个字符串，然后输出，这时可以使用 <code>join</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Lists.newArrayList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">List&lt;Integer&gt; list2 = Lists.newArrayList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(StringUtils.join(list, <span class="string">&quot;,&quot;</span>));  <span class="comment">// 使用逗号拼接字符串</span></span><br><span class="line">System.out.println(StringUtils.join(list2, <span class="string">&quot; &quot;</span>)); <span class="comment">// 使用空格拼接字符串</span></span><br></pre></td></tr></table></figure>

<p><strong>执行结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a,b,c</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>join</code> 方法可以将集合中的元素拼接成一个字符串，并且可以指定分隔符。分隔符可以是任意字符串，例如逗号（<code>,</code>）、空格（<code> </code>）等。</li>
</ul>
]]></content>
      <categories>
        <category>提升效率的轮子</category>
      </categories>
  </entry>
  <entry>
    <title>java的异常处理</title>
    <url>/2024/05/28/java%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>以下是整理为Markdown格式的内容：</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天来一起学习一下Spring Boot中的异常处理，在日常web开发中发生了异常，往往是需要通过一个统一的异常处理来保证客户端能够收到友好的提示。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>本篇要点如下：</p>
<ul>
<li>介绍SpringBoot默认的异常处理机制</li>
<li>如何自定义错误页面</li>
<li>通过＠ControllerAdvice注解来处理异常</li>
</ul>
<h2 id="介绍Spring-Boot默认的异常处理机制"><a href="#介绍Spring-Boot默认的异常处理机制" class="headerlink" title="介绍Spring Boot默认的异常处理机制"></a>介绍Spring Boot默认的异常处理机制</h2><p>默认情况下，Spring Boot为两种情况提供了不同的响应方式。</p>
<p>一种是浏览器客户端请求一个不存在的页面或服务端处理发生异常时，一般情况下浏览器默认发送的请求头中Accept:text&#x2F;html，所以Spring Boot默认会响应一个html文档内容，称作“Whitelabel Error Page”。</p>
<h3 id="Whitelabel-Error-Page"><a href="#Whitelabel-Error-Page" class="headerlink" title="Whitelabel Error Page"></a>Whitelabel Error Page</h3><p>This application has no explicit mapping for &#x2F;error, so you are seeing this as a fallback.</p>
<p>Wed Mar 21 15:46:43 CST 2018</p>
<p>There was an unexpected error (type $&#x3D;$ Not Found, status&#x3D;404).</p>
<p>No message available</p>
<p>另一种是使用Postman等调试工具发送请求一个不存在的url或服务端处理发生异常时，SpringBoot会返回类似如下的Json格式字符串信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-05-12T06:11:45.209+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">404</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Not Found&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;No message availabl $&quot;</span><span class="punctuation">,</span>$ </span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/index.html&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>原理也很简单，Spring Boot默认提供了程序出错的结果映射路径／error。这个／error请求会在BasicErrorController中处理，其内部是通过判断请求头中的Accept的内容是否为text&#x2F;html来区分请求是来自客户端浏览器（浏览器通常默认自动发送请求头内容Accept:text&#x2F;html）还是客户端接口的调用，以此来决定返回页面视图还是JSON消息内容。</p>
<p>相关BasicErrorController中代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(produces=&quot;text/html&quot;)</span> **浏览器请求**</span><br><span class="line"><span class="keyword">public</span> ModelAndView **errorHtml(HttpServletRequest** request,</span><br><span class="line">HttpServletResponse **response)&#123;**</span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">status</span> <span class="operator">=</span> getStatus(request);</span><br><span class="line">    Map&amp;lt;String, **Object&amp;gt;** model = Collections.unmodi <span class="title function_">fiableMap</span><span class="params">(getErrorAttributes(</span></span><br><span class="line"><span class="params">    request,isIncludeStackTrace(request,MediaType.TEXT_HTML)</span>));</span><br><span class="line">    response.setStatus(status.value());</span><br><span class="line">    ModelAndView **modelAndView** = resolveErrorView(request, response, status, model);</span><br><span class="line">    <span class="keyword">return</span> **(modelAndView** == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">ModelAndView</span>( viewName: <span class="string">&quot;error&quot;</span>, model) : modelAndView);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@ResponseBody</span> **客户端请求**</span><br><span class="line"><span class="keyword">public</span> **ResponseEntity&amp;lt;Map&amp;lt;String,** Object&amp;gt; error(HttpServletRequest request)&#123;</span><br><span class="line">    **Map&amp;lt;String,Object&amp;gt;** **body** **=** getErrorAttributes(request,</span><br><span class="line">    **isIncludeStackTrace(request, MediaType.ALL));** </span><br><span class="line">    HttpStatus **status = getStatus(request);** </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt;(body, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="如何自定义错误页面"><a href="#如何自定义错误页面" class="headerlink" title="如何自定义错误页面"></a>如何自定义错误页面</h2><p>好了，了解完Spring Boot默认的错误机制后，我们来点有意思的，浏览器端访问的话，任何错误Spring Boot返回的都是一个 的错误页面，这个很不友好，所以我们可以自定义下错误页面。</p>
<table>
<thead>
<tr>
<th>1</th>
<th>先从最简单的开始，直接在下面创建error.html 就可</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>以覆盖默认的的错误页面，我项目用的是thymeleaf 模板</td>
</tr>
</tbody></table>
<p>对应的error.html代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resources mapper public static templates H error.html H index.html laveut btml --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span> $=<span class="string">$</span> &quot;<span class="attr">http:</span>//<span class="attr">www.thymeleaf.org</span>&quot;&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    $$&lt;metacharset=&quot;UTF-8&quot;&gt;$$</span><br><span class="line">    $<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>$ </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">&lt;body$ $y&gt;$ </span><br><span class="line">    动态error错误页面</span><br><span class="line">    $$10\quad \text h:ex=&quot;&#125;\quad &#125;\quad &quot;&gt;&lt;$$</span><br><span class="line">    $&lt;pth:text=&quot;&#123;status&#125;&quot;&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>$ </span><br><span class="line">    $&lt;pth:text=&quot;&#123;message&#125;&quot;&gt;&lt;$ $d/$ </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样运行的时候，请求一个不存在的页面或服务端处理发生异常时，展示的自定义错误界面如下：</p>
<p><strong>localhost:8080&#x2F;spring&#x2F;111</strong></p>
<p><strong>动态error错误页面</strong></p>
<p><strong>Not Found</strong></p>
<p><strong>404</strong></p>
<h1 id="No-message-available"><a href="#No-message-available" class="headerlink" title="No message available"></a>No message available</h1><p>2、此外，如果你想更精细一点，根据不同的状态码返回不同的视图页面，也就是对应的404,500等页面，这里分两种，错误页面可以是静态HTML（即，添加到任何静态资源文件夹下），也可以使用模板构建，文件的名称应该是确切的状态码。</p>
<p>如果只是静态HTML页面，不带错误信息的，在resources&#x2F;public／下面创建error 目录，在error目录下面创建对应的状态码html即可，例如，要将404映射到静态HTML文件，您的文件夹结构如下所示：</p>
<!-- resources mapper public error H 404.html H 500.html static -->

<p>静态404.html简单页面如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    $&lt;metacharset=&quot;UTF-8&quot;&gt;$ </span><br><span class="line">    $<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>$ </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    静态404错误页面</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样访问一个错误路径的时候，就会显示 错误页面</p>
<p><strong>localhost:8080&#x2F;spring&#x2F;111</strong></p>
<h1 id="静态404错误页面"><a href="#静态404错误页面" class="headerlink" title="静态404错误页面"></a>静态404错误页面</h1><p>注：这时候如果存在上面第一种介绍的error.html页面，则状态码错误页面将覆盖error.html，具体状态码错误页面优先级比较高。</p>
<p>如果是动态模板页面，可以带上错误信息，在 下面创建</p>
<!-- error目录，在error目录下面命名即可： resources mapper public static templates error H 404.html H 500.html H error.html -->

<p>这里我们模拟下500错误，控制层代码，模拟一个除0的错误：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="meta">@Controller</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseErrorController</span> <span class="keyword">extends</span> <span class="title class_">AbstractController</span>&#123;</span><br><span class="line"><span class="number">3</span></span><br><span class="line">4private <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span> <span class="meta">@RequestMapping(valu $1e=&quot;/ex&quot;)</span>$ </span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span> $\<span class="type">int</span> i=<span class="number">5</span>/<span class="number">0</span>;$ </span><br><span class="line"><span class="number">11</span> <span class="keyword">return</span> <span class="string">&quot;ex&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>500.html代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span> $=<span class="string">$</span> &quot;<span class="attr">http:</span>//<span class="attr">www.thymeleaf.org</span>&quot;&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;lt;</span>meta charset=&quot;UTF-8&quot;<span class="symbol">&amp;gt;</span></span><br><span class="line">    $$<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>$$</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    动态500错误页面</span><br><span class="line">    $$&lt;p\quad \text &#123;th:text=&quot;\&#123;error\&#125;&quot;&gt;&lt;/p&#125;$$</span><br><span class="line">    $&gt;/$ $&lt;pth:text=&quot;&#123;status&#125;&quot;&gt;$ </span><br><span class="line">    $&lt;p$ $th:text:$ $=$ $-$ $\&#123;n$ $&quot;&#125;$ $&gt;&lt;/p$ </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时访问<a href="http://localhost:8080/spring/ex%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E9%94%99%E8%AF%AF%EF%BC%8C%E8%AF%B4%E6%98%8E%E7%A1%AE%E5%AE%9E%E6%98%A0%E5%B0%84%E5%88%B0%E4%BA%86500.html">http://localhost:8080/spring/ex即可看到如下错误，说明确实映射到了500.html</a></p>
<p><strong>localhost:8080&#x2F;spring&#x2F;ex</strong></p>
<h1 id="动态500错误页面"><a href="#动态500错误页面" class="headerlink" title="动态500错误页面"></a>动态500错误页面</h1><h2 id="Internal-Server-Error"><a href="#Internal-Server-Error" class="headerlink" title="Internal Server Error"></a>Internal Server Error</h2><h2 id="500"><a href="#500" class="headerlink" title="500"></a>500</h2><h2 id="by-zero"><a href="#by-zero" class="headerlink" title="&#x2F; by zero"></a>&#x2F; by zero</h2><p>注：如果同时存在静态页面500.html和动态模板的500.html，则后者覆盖前者。即 这个的优先级比 高。</p>
<p>整体概括上面几种情况，如下：</p>
<ul>
<li>error.html会覆盖默认的whitelabelError Page错误提示</li>
<li>静态错误页面优先级别比error.html高</li>
<li>动态模板错误页面优先级比静态错误页面高</li>
</ul>
<p>3、上面介绍的只是最简单的覆盖错误页面的方式来自定义，如果对于某些错误你可能想特殊对待，则可以这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="meta">@Configuration</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContainerConfig</span> &#123;</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="keyword">public</span> EmbeddedServletContainerCustomizer</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span> containerCustomizer()&#123;</span><br><span class="line"><span class="number">7</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EmbeddedServletContainerCustomizer</span>()&#123;</span><br><span class="line"><span class="number">8</span> <span class="meta">@Override</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(ConfigurableEmbeddedServletContainer</span></span><br><span class="line"><span class="params"><span class="number">10</span></span></span><br><span class="line"><span class="params">container)</span>&#123;</span><br><span class="line"><span class="number">11</span></span><br><span class="line">container.addErrorPages(<span class="keyword">new</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line">ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, <span class="string">&quot;/error/500&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>上面这段代码中 就是对应500错误码，</p>
<p>也就是说程序如果发生500错误，就会将请求转发到 这个映射来，那</p>
<p>我们只要实现一个方法是对应这个 映射即可捕获这个异常做出处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="meta">@RequestMapping(&quot;/error/500&quot;)</span></span><br><span class="line"><span class="number">2</span> <span class="meta">@ResponseBody</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">public</span> String <span class="title function_">showServerError</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">4</span> <span class="keyword">return</span><span class="string">&quot;server error&quot;</span>;</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>这样，我们再请求前面提到的异常请求<a href="http://localhost:8080/spring/ex%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%B0%B1%E4%BC%9A%E8%A2%AB%E6%88%91%E4%BB%AC%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E6%8D%95%E8%8E%B7%E4%BA%86%E3%80%82">http://localhost:8080/spring/ex的时候，就会被我们这个方法捕获了。</a></p>
<p><strong>localhost:8080&#x2F;spring&#x2F;ex</strong></p>
<h2 id="server-error"><a href="#server-error" class="headerlink" title="server error"></a>server error</h2><p>这里我们就只对500做了特殊处理，并且返还的是字符串，如果想要返回视图，去掉＠ResponseBody注解，并返回对应的视图页面。如果想要对其他状态码自定义映射，在customize方法中添加即可。</p>
<p>上面这种方法虽然我们重写了／500映射，但是有一个问题就是无法获取错误信息，想获取错误信息的话，我们可以继承BasicErrorController或者干脆自己实现</p>
<p>ErrorController接口，除了用来响应／error这个错误页面请求，可以提供更多类型的错误格式等（BasicErrorController在上面介绍SpringBoot默认异常机制的时候有提到）</p>
<p>这里我参考了csdn大佬的方法，选择直接继承BasicErrorController，然后把上面 映射方法添加进来即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="meta">@Controller</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBasicErrorController</span> <span class="keyword">extends</span> <span class="title class_">BasicErrorController</span> &#123;</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">public</span> <span class="title function_">MyBasicErrorController</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">6</span> <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">DefaultErrorAttributes</span>(), <span class="keyword">new</span> <span class="title class_">ErrorProperties</span>());</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">11 ＊定义500的ModelAndView</span></span><br><span class="line"><span class="comment">12 *<span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">13 *<span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">14</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span> <span class="meta">@RequestMapping(produces $s=&quot;text/html&quot;,value=&quot;/500&quot;)</span>$ </span><br><span class="line"><span class="number">19</span> <span class="keyword">public</span> ModelAndView <span class="title function_">errorHtml500</span><span class="params">(HttpServletRequest</span></span><br><span class="line"><span class="params"><span class="number">20</span></span></span><br><span class="line"><span class="params">request,HttpServletResponse response)</span> &#123;</span><br><span class="line"><span class="number">21</span></span><br><span class="line">response.setStatus(getStatus(request).value());</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span> Map&amp;lt;String, Object&amp;gt; model =</span><br><span class="line"><span class="number">24</span> getErrorAttributes(request,isIncludeStackTrace(request,</span><br><span class="line"><span class="number">25</span> MediaType.TEXT_HTML));</span><br><span class="line"><span class="number">26</span></span><br><span class="line">model.put(<span class="string">&quot;msg&quot;</span>,＂自定义错误信息”）；</span><br><span class="line"><span class="number">27</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;error/50 $00&quot;</span>,$ model);</span><br><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">29</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">31</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment">32</span></span><br><span class="line"><span class="comment">$*$ 定义500的错误JSON信息</span></span><br><span class="line"><span class="comment">33</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">34</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">35</span></span><br><span class="line"><span class="comment">36 */</span></span><br><span class="line"><span class="number">37</span></span><br><span class="line"><span class="number">28</span><span class="meta">@RequestMapping(value = &quot;/500&quot;)</span></span><br><span class="line"><span class="number">39</span><span class="meta">@ResponseBody</span></span><br><span class="line">40public ResponseEntit $ty&lt;Map&lt;String,Objet&gt;&gt;$ </span><br><span class="line">41error500(HttpServletRequest request) &#123;</span><br><span class="line">42Map&amp;lt;String, $Object&gt;body=$ </span><br><span class="line">43getErrorAttributes(request,isIncludeStackTrace(request,</span><br><span class="line">44MediaType.TEXKT_HTML));</span><br><span class="line">45HttpStatus status $=$ <span class="title function_">getStatus</span><span class="params">(request)</span>;</span><br><span class="line">46return <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt;(body status);</span><br></pre></td></tr></table></figure>

<p>代码也很简单，只是实现了自定义的500错误的映射解析，分别对浏览器请求以及json请求做了回应。</p>
<p>BasicErrorController默认对应的＠RequestMapping是 ，固我们方法里面对应的 实际上完整的映射请求是 ，这就跟上面customize方法自定义的映射路径对上了。</p>
<p>errorHtml500方法中，我返回的是模板页面，对应／templates&#x2F;error&#x2F;500.html，这里顺便自定义了一个msg信息，在500.html也输出这个信息</p>
<p>，如果输出结果有这个信息，则表示我们配置正确了。</p>
<p>再次访问请求<a href="http://localhost:8080/spring/ex%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B">http://localhost:8080/spring/ex，结果如下</a></p>
<p><strong>localhost:8080&#x2F;spring&#x2F;ex</strong></p>
<h1 id="动态500错误页面-1"><a href="#动态500错误页面-1" class="headerlink" title="动态500错误页面"></a>动态500错误页面</h1><h2 id="Internal-Server-Error-1"><a href="#Internal-Server-Error-1" class="headerlink" title="Internal Server Error"></a>Internal Server Error</h2><h2 id="500-1"><a href="#500-1" class="headerlink" title="500"></a>500</h2><h2 id="by-zero-1"><a href="#by-zero-1" class="headerlink" title="&#x2F; by zero"></a>&#x2F; by zero</h2><h1 id="自定义错误信息"><a href="#自定义错误信息" class="headerlink" title="自定义错误信息"></a>自定义错误信息</h1><h2 id="通过＠ControllerAdvice注解来处理异常"><a href="#通过＠ControllerAdvice注解来处理异常" class="headerlink" title="通过＠ControllerAdvice注解来处理异常"></a>通过＠ControllerAdvice注解来处理异常</h2><p>Spring Boot提供的ErrorController是一种全局性的容错机制。此外，你还可以用＠ControllerAdvice注解和＠ExceptionHandler注解实现对指定异常的特殊处理。</p>
<p>这里介绍两种情况：</p>
<ul>
<li>局部异常处理＠Controller+@ExceptionHandler</li>
<li>全局异常处理＠ControllerAdvice +@ExceptionHandler</li>
</ul>
<p>局部异常主要用到的是＠ExceptionHandler注解，此注解注解到类的方法上，当此注解里定义的异常抛出时，此方法会被执行。如果＠ExceptionHandler所在的类是＠Controller，则此方法只作用在此类。如果＠ExceptionHandler所在的类带有＠ControllerAdvice注解，则此方法会作用在全局。</p>
<p>该注解用于标注处理方法处理那些特定的异常。被该注解标注的方法可以有以下任意顺序的参数类型：</p>
<ul>
<li>Throwable、Exception等异常对象；</li>
<li>ServletRequest、HttpServletRequest、ServletResponse、HttpServletResponse;</li>
<li>HttpSession等会话对象；</li>
<li>org.springframework.web.context.request.WebRequest;</li>
<li>java.util.Locale;</li>
<li>java.io.InputStream、java.io.Reader;</li>
<li>java.io.OutputStream、java.io.Writer;</li>
<li>org.springframework.ui.Model;</li>
</ul>
<p>并且被该注解标注的方法可以有以下的返回值类型可选：</p>
<ul>
<li>ModelAndView;</li>
<li>org.springframework.ui.Model;</li>
<li>java.util.Map;</li>
<li>org.springframework.web.servlet.View;</li>
<li>＠ResponseBody注解标注的任意对象；</li>
<li>HttpEntity&lt;?&gt; orResponseEntity&lt;?&gt;;</li>
<li>void;</li>
</ul>
<p>以上罗列的不完全，更加详细的信息可参考：Spring ExceptionHandler。</p>
<p>举个简单例子，这里我们对除0异常用＠ExceptionHandler来捕捉。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="meta">@Controller</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseErrorController</span> <span class="keyword">extends</span> <span class="title class_">AbstractController</span>&#123;</span><br><span class="line"><span class="number">3</span> <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span></span><br><span class="line">4LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span> <span class="meta">@RequestMapping(valu $ue=&quot;/ex&quot;)</span>$ </span><br><span class="line"><span class="number">8</span> <span class="meta">@ResponseBody</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">public</span> String <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="number">10</span></span><br><span class="line">$$\<span class="type">int</span> i=<span class="number">5</span>/<span class="number">0</span>;$$</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;ex&quot;</span>;</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span> **／／局部异常处理**</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span> <span class="keyword">public</span> String <span class="title function_">exHandler</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line"><span class="number">20</span> ／／判断发生异常的类型是除<span class="number">0</span>异常则做出响应</span><br><span class="line"><span class="number">21</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> ArithmeticException)&#123;</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="keyword">return</span>＂发生了除<span class="number">0</span>异常”；</span><br><span class="line"><span class="number">23</span></span><br><span class="line">／／未知的异常做出响应</span><br><span class="line"><span class="keyword">return</span>＂发生了未知异常”；</span><br></pre></td></tr></table></figure>

<p><strong>localhost:8080&#x2F;spring&#x2F;ex</strong></p>
<h1 id="发生了除0异常"><a href="#发生了除0异常" class="headerlink" title="发生了除0异常"></a>发生了除0异常</h1><h3 id="全局异常处理＠ControllerAdvice-ExceptionHandler"><a href="#全局异常处理＠ControllerAdvice-ExceptionHandler" class="headerlink" title="全局异常处理＠ControllerAdvice $+$ $@$ ExceptionHandler"></a>全局异常处理＠ControllerAdvice $+$ $@$ ExceptionHandler</h3><p>在spring 3.2中，新增了＠ControllerAdvice注解，可以用于定义</p>
<p>$@$ ExceptionHandler、 $@$ InitBinder、 $@$ ModelAttribute，并应用到所有</p>
<p>$@$ RequestMapping中。</p>
<p>简单的说，进入Controller层的错误才会由＠ControllerAdvice处理，拦截器抛出的错误以及访问错误地址的情况＠ControllerAdvice处理不了，由SpringBoot默认的异常处理机制处理。</p>
<p>我们实际开发中，如果是要实现RESTful API，那么默认的JSON错误信息就不是我们想要的，这时候就需要统一一下JSON格式，所以需要封装一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> $<span class="comment">/**$ </span></span><br><span class="line"><span class="comment">2 ＊返回数据</span></span><br><span class="line"><span class="comment">3 */</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">5public <span class="keyword">class</span> <span class="title class_">AjaxObject</span> <span class="keyword">extends</span> <span class="title class_">HashMa</span> $ap&lt;Sring,$ $,Object&gt;&#123;$ </span><br><span class="line"><span class="number">6</span> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span><span class="number">1L</span>;</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">public</span> <span class="title function_">AjaxObject</span><span class="params">()</span> &#123;</span><br><span class="line">9put(<span class="string">&quot;code&quot;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">public</span> <span class="keyword">static</span> AjaxObject <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="keyword">return</span> error(HttpStatus.SC_INTERNAL_SERVER_ERROR,＂未知异常，请联系管理员＂)；</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span> <span class="keyword">public</span> <span class="keyword">static</span> AjaxObject <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line"><span class="number">20</span> <span class="keyword">return</span> error(HttpStatus.SC_INTERNAL_SERVER_ERROR,</span><br><span class="line"><span class="number">21</span></span><br><span class="line">msg);</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">25</span> <span class="keyword">public</span> <span class="keyword">static</span> AjaxObject <span class="title function_">error</span><span class="params">(<span class="type">int</span> code, String msg)</span>&#123;</span><br><span class="line"><span class="number">26</span> AjaxObject $r=\text &#123;<span class="keyword">new</span>&#125;$ $AjaxObject0;$ </span><br><span class="line"><span class="number">27</span> $r.put(<span class="string">&quot;code&quot;</span>,code);$ </span><br><span class="line"><span class="number">28</span></span><br><span class="line">r.put(<span class="string">&quot;msg&quot;</span>,msg);</span><br><span class="line"><span class="number">29</span></span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">31</span></span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="number">33</span> <span class="keyword">public</span> <span class="keyword">static</span> AjaxObject <span class="title function_">ok</span><span class="params">(String msg)</span> &#123;</span><br><span class="line"><span class="number">34</span></span><br><span class="line">AjaxObject $r=\text &#123;<span class="keyword">new</span>&#125;$ <span class="title function_">AjaxObject</span><span class="params">()</span>;</span><br><span class="line"><span class="number">35</span></span><br><span class="line">r.put(<span class="string">&quot;msg&quot;</span>,msg);</span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line"><span class="number">37</span></span><br><span class="line"><span class="number">38</span></span><br><span class="line"><span class="number">39</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> AjaxObject <span class="title function_">ok</span><span class="params">(Map&amp;lt;String, Object&amp;gt; map)</span>&#123;</span><br><span class="line"><span class="number">41</span></span><br><span class="line">AjaxObjectr= <span class="keyword">new</span> <span class="title class_">AjaxObject</span>();</span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="number">43</span> r.putAll(map);</span><br><span class="line"><span class="number">44</span> <span class="keyword">return</span> r;</span><br><span class="line"><span class="number">45</span></span><br><span class="line"><span class="number">46</span></span><br><span class="line"><span class="number">47</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> AjaxObject <span class="title function_">ok</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="number">48</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AjaxObject</span>();</span><br><span class="line"><span class="number">49</span></span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">51</span></span><br><span class="line"><span class="number">52</span></span><br><span class="line"><span class="keyword">public</span> AjaxObject <span class="title function_">put</span><span class="params">(String key, Object value)</span>&#123;</span><br><span class="line"><span class="number">53</span></span><br><span class="line"><span class="built_in">super</span>.put(key,value);</span><br><span class="line"><span class="number">54</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line"><span class="number">55</span></span><br><span class="line"><span class="keyword">public</span> AjaxObject <span class="title function_">data</span><span class="params">(Object value)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.put(<span class="string">&quot;data&quot;</span>, value);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> AjaxObject <span class="title function_">apiError</span><span class="params">(String msg)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> error(<span class="number">1</span>,msg);</span><br></pre></td></tr></table></figure>

<p>上面这个AjaxObject就是我平时用的，如果是正确情况返回的就是：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;获取列表成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;queryList&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果是异常情况，返回的json则是：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;未知异常，请联系管理员&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后创建一个自定义的异常类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> implements</span><br><span class="line"><span class="number">2</span></span><br><span class="line">Serializable &#123;</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> serialVersionUID=<span class="number">1L</span>;</span><br><span class="line"><span class="number">6</span> <span class="keyword">private</span> String msg;</span><br><span class="line"><span class="number">7</span> <span class="keyword">private</span> <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(String msg)</span> &#123;</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span> <span class="built_in">super</span>(msg);</span><br><span class="line"><span class="number">12</span> <span class="built_in">this</span>.msg=msg;</span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span> <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(String msg, Throwable e)</span> &#123;</span><br><span class="line"><span class="number">17</span> <span class="built_in">super</span>(msg,e);</span><br><span class="line"><span class="number">18</span> $\text &#123;<span class="built_in">this</span>.msg=msg;&#125;$ </span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span> <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(<span class="type">int</span> code,String msg)</span> &#123;</span><br><span class="line"><span class="number">23</span> <span class="built_in">super</span>(msg);</span><br><span class="line"><span class="number">24</span> $<span class="built_in">this</span>.msg=msg;$ </span><br><span class="line"><span class="number">25</span></span><br><span class="line">$$<span class="built_in">this</span>.code=code;$$</span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="number">27</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">29</span> <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(String msg, <span class="type">int</span> code, Throwable e)</span> &#123;</span><br><span class="line"><span class="number">30</span> <span class="built_in">super</span>(msg,e);</span><br><span class="line"><span class="number">31</span></span><br><span class="line">$$<span class="built_in">this</span>.msg=msg;$$</span><br><span class="line"><span class="number">32</span></span><br><span class="line">$$<span class="built_in">this</span>.code=code;$$</span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">35</span></span><br><span class="line"><span class="number">36</span> <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="number">37</span></span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line"><span class="number">38</span></span><br><span class="line"><span class="number">39</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="number">41</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line"><span class="number">42</span> <span class="built_in">this</span>.msg=msg;</span><br><span class="line"><span class="number">43</span></span><br><span class="line"><span class="number">44</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> code;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">$$<span class="built_in">this</span>.code=code;$$</span><br></pre></td></tr></table></figure>

<p>注：spring对于 RuntimeException异常才会进行事务回滚</p>
<p>Controler中添加一个json映射，用来处理这个异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseErrorController</span>&#123;</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="meta">@RequestMapping(&quot;/json&quot;)</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">json</span><span class="params">(ModelMap modelMap)</span> &#123;</span><br><span class="line"><span class="number">5</span> System.out.println(modelMap.get(<span class="string">&quot;author&quot;</span>));</span><br><span class="line"><span class="number">6</span> $\<span class="type">int</span> i=<span class="number">5</span>/<span class="number">0</span>;$ </span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>最后创建这个全局异常处理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="comment">/**</span></span><br><span class="line"><span class="comment">2 **＊异常处理器**</span></span><br><span class="line"><span class="comment">3 */</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessExceptionHandler</span>&#123;</span><br><span class="line"><span class="number">8</span> <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">13</span></span><br><span class="line"><span class="comment">14 ＊应用到所有＠RequestMapping注解方法，在其执行之前初始化</span></span><br><span class="line"><span class="comment">15 数据绑定器</span></span><br><span class="line"><span class="comment">16 *<span class="doctag">@param</span> binder</span></span><br><span class="line"><span class="comment">17 */</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBinder</span><span class="params">(WebDataBinder binder)</span> &#123;</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span> System.out.println(＂请求有参数才进来”）；</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">25</span></span><br><span class="line"><span class="comment">＊把值绑定到Model中，使全局＠RequestMapping可以获取到该</span></span><br><span class="line"><span class="comment">26</span></span><br><span class="line"><span class="comment">27 值</span></span><br><span class="line"><span class="comment">28 *<span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">29 */</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="number">31</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAttributes</span><span class="params">(Model model)</span> &#123;</span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="number">33</span> model.addAttribute(<span class="string">&quot;author&quot;</span>,＂嘟嘟MD<span class="string">&quot;)；</span></span><br><span class="line"><span class="string">34</span></span><br><span class="line"><span class="string">35</span></span><br><span class="line"><span class="string">36</span></span><br><span class="line"><span class="string">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="string">37</span></span><br><span class="line"><span class="string">public Object handleException(Exception</span></span><br><span class="line"><span class="string">38</span></span><br><span class="line"><span class="string">39 e,HttpServletRequest req)&#123;</span></span><br><span class="line"><span class="string">40 $AjaxObject$ $r=\text &#123;new&#125;$ AjaxObject();</span></span><br><span class="line"><span class="string">41 ／／业务异常</span></span><br><span class="line"><span class="string">42</span></span><br><span class="line"><span class="string">if(e instanceof BusinessException)&#123;</span></span><br><span class="line"><span class="string">43</span></span><br><span class="line"><span class="string">$r.put(&quot;</span>code<span class="string">&quot;,$ ((BusinessException) e).getCode());</span></span><br><span class="line"><span class="string">44</span></span><br><span class="line"><span class="string">45 r.put(&quot;</span>msg<span class="string">&quot;, ((BusinessException) e).getMsg());</span></span><br><span class="line"><span class="string">46 ｝else&#123;/／系统异常</span></span><br><span class="line"><span class="string">47 $r.put(&quot;</span>code<span class="string">&quot;,&quot;</span><span class="number">500</span><span class="string">&quot;);$ </span></span><br><span class="line"><span class="string">48 r.put(&quot;</span>msg<span class="string">&quot;,＂未知异常，请联系管理员＂)；</span></span><br><span class="line"><span class="string">49</span></span><br><span class="line"><span class="string">50</span></span><br><span class="line"><span class="string">51</span></span><br><span class="line"><span class="string">52 ／／使用HttpServletRequest中的header检测请求是否为</span></span><br><span class="line"><span class="string">53 ajax，如果是ajax则返回json，如果为非ajax则返回view（即</span></span><br><span class="line"><span class="string">54 ModelAndView)</span></span><br><span class="line"><span class="string">55</span></span><br><span class="line"><span class="string">56</span></span><br><span class="line"><span class="string">String contentTypeHeader = req.getHeader(&quot;</span>Content-</span><br><span class="line"><span class="number">57</span></span><br><span class="line">Type<span class="string">&quot;);</span></span><br><span class="line"><span class="string">58</span></span><br><span class="line"><span class="string">59 String acceptHeader = req.getHeader(&quot;</span>Accept<span class="string">&quot;);</span></span><br><span class="line"><span class="string">60 String xRequestedWith = req.getHeader(&quot;</span>X-</span><br><span class="line"><span class="number">61</span> Requested-With<span class="string">&quot;);</span></span><br><span class="line"><span class="string">62 if ((contentTypeHeader!=null &amp;&amp;</span></span><br><span class="line"><span class="string">63 contentTypeHeader.contains(&quot;</span>application/json<span class="string">&quot;))</span></span><br><span class="line"><span class="string">64 || (acceptHeader $!=nu\ll$ &amp;&amp;</span></span><br><span class="line"><span class="string">65 acceptHeader.contains(&quot;</span>application/json<span class="string">&quot;))</span></span><br><span class="line"><span class="string">66 &quot;</span>XMLHttpRequest<span class="string">&quot;.equalslgnoreCase(xRequestedWith))&#123;</span></span><br><span class="line"><span class="string">67 return r;</span></span><br><span class="line"><span class="string">68 &#125;else&#123;</span></span><br><span class="line"><span class="string">69 ModelAndView modelAndView =new</span></span><br><span class="line"><span class="string">70 ModelAndView( );</span></span><br><span class="line"><span class="string">71 modelAndView.addObject(&quot;</span>msg<span class="string">&quot;,</span></span><br><span class="line"><span class="string">72 e.getMessage());</span></span><br><span class="line"><span class="string">73 modelAndView.addObject(&quot;</span>url<span class="string">&quot;,</span></span><br><span class="line"><span class="string">74 req.getRequestURL());</span></span><br><span class="line"><span class="string">75 modelAndView.addObject(&quot;</span>stackTrace<span class="string">&quot;,</span></span><br><span class="line"><span class="string">76 e.getStackTrace());</span></span><br><span class="line"><span class="string">77 modelAndView.setViewName(&quot;</span>error<span class="string">&quot;);</span></span><br><span class="line"><span class="string">78 return modelAndView;</span></span><br></pre></td></tr></table></figure>

<p>$@$ ExceptionHandler 拦截了异常，我们可以通过该注解实现自定义异常处理。其中， $@$ ExceptionHandler配置的value指定需要拦截的异常类型，上面我配置了拦截Exception，</p>
<p>再根据不同异常类型返回不同的相应，最后添加判断，如果是Ajaxi请求，则返回json，如果是非ajax则返回view，这里是返回到error.html页面。</p>
<p>为了展示错误的时候更友好，我封装了下error.html，不仅展示了错误，还添加了跳转百度谷歌以及StackOverFlow的按钮，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span> $=<span class="string">$</span> &quot;<span class="attr">http:</span>//<span class="attr">www.thymeleaf.org</span>&quot;</span></span><br><span class="line"><span class="tag"><span class="attr">layout:decorator</span> $=<span class="string">$</span> &quot;<span class="attr">layout</span>&quot;&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">5＜title<span class="symbol">&amp;gt;</span>Spring Boot管理后台＜/title＞</span><br><span class="line">6</span><br><span class="line">$$&lt;scripttype=&quot;text/javascript&quot;&gt;$$</span><br><span class="line">7</span><br><span class="line">8 <span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span></span><br><span class="line">9 <span class="symbol">&amp;lt;</span>/head<span class="symbol">&amp;gt;</span></span><br><span class="line">10 <span class="symbol">&amp;lt;</span>body<span class="symbol">&amp;gt;</span></span><br><span class="line">11 <span class="symbol">&amp;lt;</span>div layout:fragment $=$ content&quot;t $\text &#123;th:remoe=&quot;tag&quot;&gt;&#125;$ </span><br><span class="line">12</span><br><span class="line">$$&lt;\div id=&quot;navbar&quot;&gt;$$</span><br><span class="line">13</span><br><span class="line">14＜h1＞系统异常统一处理 $<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>$ </span><br><span class="line">15 ＜h3 th:text $=$ &quot;＇错误信息： $&#x27;+&#123;msg&#125;&quot;&gt;&lt;$ $/h3&gt;$ </span><br><span class="line">16 $&lt;h3th:text=&quot;&#x27;$ 请求地址： $&#x27;+&#123;url&#125;&quot;&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>$ </span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">$$<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Debug<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>$$</span><br><span class="line">19</span><br><span class="line">20 &quot;@&#123;&#x27;https://www.google.com/webhp?   $hl=zh-$ <span class="symbol">&amp;lt;</span>a th:href $=$ </span><br><span class="line">21 CN# $safe=strict&amp;hl=zh-CN&amp;q=&#x27;+\&#123;msg\&#125;\&#125;&quot;$ </span><br><span class="line">22 $\text &#123;class=&quot;btn&#125;$ tn-primaryb $\text &#123;btn-lg&quot;&#125;$ target $=$ &quot;_k $blank$ </span><br><span class="line">23</span><br><span class="line">$$id=&quot;Google&quot;&gt;Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span>$$</span><br><span class="line">24</span><br><span class="line"><span class="symbol">&amp;lt;</span>a th:href=&quot;@&#123;&#x27;https://www.baidu.com/s?wd=  &#x27;+<span class="symbol">&amp;#36;</span>&#123;msg&#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">25</span><br><span class="line">26 $class=&quot;btnbtn-infobtn-\lg &quot;$ $\text &#123;target=&quot;_&#123;&#125;&#125;$ blank&quot; $id=&quot;Baidu&quot;&gt;Baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span>$ </span><br><span class="line">27 <span class="symbol">&amp;lt;</span>a th:href $=$ &quot;@&#123;&#x27;http://stackoverflow.com/search?   $q=&#x27;+\&#123;msg\&#125;\&#125;$ </span><br><span class="line">28 class $=$ &quot;btn btn-default btn-lg&quot; target=&quot;_blank&quot;</span><br><span class="line">29 $id=&quot;StackOverFlow&quot;&gt;StackOverFlow<span class="tag">&lt;/<span class="name">a</span>&gt;</span>$ </span><br><span class="line">30</span><br><span class="line">＜h2＞异常堆栈跟踪日志StackTrace</span><br><span class="line">```html</span><br><span class="line">31 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">32</span><br><span class="line">33 <span class="symbol">&amp;lt;</span>div th:each $=$ &quot;line:<span class="symbol">&amp;#36;</span>&#123;stackTrace&#125;&quot;<span class="symbol">&amp;gt;</span></span><br><span class="line">34 $$&lt;\div th:text=&quot;&#123;line&#125;&quot;&gt;&lt;/\div &gt;$$</span><br><span class="line">35 $$<span class="tag">&lt;/<span class="name">div</span>&gt;</span>$$</span><br><span class="line">36 $$&lt;/c$$</span><br><span class="line">37 $&lt;divlay$ out:fragment $=$ &quot;js&quot; $\text &#123;th:remove=&quot;tag&quot;&gt;&#125;$ </span><br><span class="line">38 $$&lt;/\div &gt;$$</span><br><span class="line">39 $$<span class="tag">&lt;/<span class="name">body</span>&gt;</span>$$</span><br><span class="line">40 $$/html&gt;$$</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8080/json%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%98%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%91%E8%B5%B7%E7%9A%84%EF%BC%8C%E8%BF%94%E5%9B%9E%E7%9A%84%E6%98%AFerror%E7%95%8C%E9%9D%A2%EF%BC%9A">http://localhost:8080/json的时候，因为是浏览器发起的，返回的是error界面：</a></p>
<p><strong>localhost:8080&#x2F;spring&#x2F;json</strong></p>
<p><strong>系统异常统一处理</strong></p>
<p>错误信息：&#x2F;by zero</p>
<p>请求地址：<a href="http://localhost:8080/spring/json">http://localhost:8080/spring/json</a></p>
<p>Debug</p>
<table>
<thead>
<tr>
<th>Google</th>
<th>Baidu</th>
<th>StackOverFlow</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>异常堆栈跟踪日志StackTrace</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.dudu.controller.BaseErrorController.json(BaseErrorController.java:<span class="number">31</span>)</span><br><span class="line"></span><br><span class="line">sun.reflect.NativeMethodAccessorlmpl.invoke0(Native Method)</span><br><span class="line"></span><br><span class="line">sun.reflect.NativeMethodAccessorlmpl.invoke(NativeMethodAccessorlmpl.java:<span class="number">62</span>)</span><br><span class="line"></span><br><span class="line">sun.reflect.DelegatingMethodAccessorlmpl.invoke(DelegatingMethodAccessorlmpl.java:<span class="number">43</span>)</span><br><span class="line"></span><br><span class="line">java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line"></span><br><span class="line">org.springframework.web.method.support.InvocableHandlerMethod.dolnvoke(InvocableHandlerMethod.java:<span class="number">205</span>)</span><br><span class="line"></span><br><span class="line">org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:<span class="number">133</span>)</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.mvc.method.annotation.ServletlnvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">97</span>)</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">827</span>)</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handlelnternal(RequestMappingHandlerAdapter.java:<span class="number">738</span>)</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">85</span>)</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">967</span>)</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="number">901</span>)</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">970</span>)</span><br><span class="line"></span><br><span class="line">org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:<span class="number">861</span>)</span><br><span class="line"></span><br><span class="line">如果是ajax请求，返回的就是错误：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span>＂未知异常，请联系管理员＂<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">500</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里我给带＠ModelAttribute注解的方法通过Model设置了author值，在json映射方法中通过ModelMwap获取到改值。</p>
<p>认真的你可能发现，全局异常类我用的是＠RestControllerAdvice，而不是＠ControllerAdvice，因为这里返回的主要是json格式，这样可以少写一个@ResponseBody。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此，SpringBoot中对异常的使用也差不多全了，本项目中处理异常的顺序会是这样，当发送一个请求：</p>
<ul>
<li>拦截器那边先判断是否登录，没有则返回登录页。</li>
<li>在进入Controller之前，譬如请求一个不存在的地址，返回404错误界面。</li>
<li>在执行＠RequestMapping时，发现的各种错误（譬如数据库报错、请求参数格式错误／缺失／值非法等）统一由＠ControllerAdvice处理，根据是否Ajax返回json 或者view。</li>
</ul>
<p>本文参考了大佬的方法以及思路：<a href="https://blog.csdn.net/qq_41107231/article/details/115874974">https://blog.csdn.net/qq_41107231/article/details/115874974</a></p>
<p><a href="https://blog.csdn.net/qq_24598601/article/details/89243914">https://blog.csdn.net/qq_24598601/article/details/89243914</a></p>
]]></content>
  </entry>
  <entry>
    <title>StandardCharsets 工具类</title>
    <url>/2025/02/28/StandardCharsets-%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<hr>
<h3 id="一-StandardCharsets"><a href="#一-StandardCharsets" class="headerlink" title="一. StandardCharsets"></a>一. StandardCharsets</h3><p>在进行字符编码转换时，我们经常需要指定字符编码，如 <code>UTF-8</code>、<code>ISO-8859-1</code> 等。为了避免直接使用字符串来表示编码（这可能会导致编码错误），Java 提供了 <code>java.nio.charset.StandardCharsets</code> 类，其中定义了常用的字符集编码。</p>
<p>例如，使用 <code>StandardCharsets.UTF_8</code> 来确保使用 UTF-8 编码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base64 编码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(str.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">System.out.println(<span class="string">&quot;加密后：&quot;</span> + encode);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base64 解码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">decode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getDecoder().decode(encode.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);</span><br><span class="line">System.out.println(<span class="string">&quot;解密后：&quot;</span> + decode);</span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">加密后：YWI=</span><br><span class="line">解密后：abc</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li>使用 <code>StandardCharsets.UTF_8</code> 确保在编码和解码时使用相同的字符集，避免字符集不匹配的问题。</li>
<li><code>Base64</code> 是 Java 提供的内置工具类，用于 Base64 编码和解码。</li>
</ul>
<h3 id="二-DigestUtils"><a href="#二-DigestUtils" class="headerlink" title="二. DigestUtils"></a>二. DigestUtils</h3><p>在某些场景下，我们需要对数据进行加密处理，如 MD5 或 SHA-256。Apache Commons Codec 提供了 <code>org.apache.commons.codec.digest.DigestUtils</code> 类，可以方便地实现这些加密操作。</p>
<h4 id="2-1-MD5-加密"><a href="#2-1-MD5-加密" class="headerlink" title="2.1 MD5 加密"></a>2.1 MD5 加密</h4><p>如果你想对数据进行 MD5 加密，可以使用 <code>DigestUtils.md5Hex</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">md5Hex</span> <span class="operator">=</span> DigestUtils.md5Hex(<span class="string">&quot;苏三说技术&quot;</span>);</span><br><span class="line">System.out.println(md5Hex);</span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1d8b9f49d7e8b9f49d7e8b9f49d7e8b9</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>md5Hex</code> 方法会将输入字符串进行 MD5 加密，并返回一个十六进制的字符串。</li>
</ul>
<h4 id="2-2-SHA-256-加密"><a href="#2-2-SHA-256-加密" class="headerlink" title="2.2 SHA-256 加密"></a>2.2 SHA-256 加密</h4><p>如果你想对数据进行 SHA-256 加密，可以使用 <code>DigestUtils.sha256Hex</code> 方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sha256Hex</span> <span class="operator">=</span> DigestUtils.sha256Hex(<span class="string">&quot;苏三说技术&quot;</span>);</span><br><span class="line">System.out.println(sha256Hex);</span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f2d8b9f49d7e8b9f49d7e8b9f49d7e8b9f49d7e8b9f49d7e8b9f49d7e8b9f49d</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li><code>sha256Hex</code> 方法会将输入字符串进行 SHA-256 加密，并返回一个十六进制的字符串。</li>
<li><code>SHA-256</code> 是一种更安全的加密算法，比 MD5 更难被破解。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>提升效率的轮子</category>
      </categories>
  </entry>
  <entry>
    <title>java的常见异常</title>
    <url>/2024/05/23/java%E7%9A%84%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h1 id="今天记录一下常见的异常，摸索一下全局异常处理"><a href="#今天记录一下常见的异常，摸索一下全局异常处理" class="headerlink" title="今天记录一下常见的异常，摸索一下全局异常处理"></a>今天记录一下常见的异常，摸索一下全局异常处理</h1><h2 id="空指针异常（NullPointerException）"><a href="#空指针异常（NullPointerException）" class="headerlink" title="空指针异常（NullPointerException）"></a>空指针异常（NullPointerException）</h2><p>这估计是 Java 开发里最常见的异常了。我就经常在用对象的时候，一不小心就忘了检查它是不是 <code>null</code>，然后运行的时候就 “砰” 一声，空指针异常就来了。就像这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">obj.toString(); <span class="comment">// 这就凉凉了，直接报空指针异常</span></span><br></pre></td></tr></table></figure>

<p>后来我学聪明了，在用对象之前先检查是不是 <code>null</code>。就像下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">    obj.toString();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;obj 是空的，不能用！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>问题来了，多种不同的数据类型，直接用!&#x3D;会不会很呆？后续再更新一下判空和处理if的博客</p>
<h2 id="数组越界异常（ArrayIndexOutOfBoundsException）"><a href="#数组越界异常（ArrayIndexOutOfBoundsException）" class="headerlink" title="数组越界异常（ArrayIndexOutOfBoundsException）"></a>数组越界异常（ArrayIndexOutOfBoundsException）</h2><p>这玩意我也碰到过不少次。就比如说我定义了一个数组，然后一不小心就访问了一个超出它长度的索引。像这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">5</span>] = <span class="number">10</span>; <span class="comment">// 这就越界了，数组长度才 3，哪来的索引 5 呢</span></span><br></pre></td></tr></table></figure>

<p>现在我会在访问数组之前检查索引是不是在合理范围：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; arr.length) &#123;</span><br><span class="line">    arr[index] = <span class="number">10</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;索引越界啦！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类CastException（ClassCastException）"><a href="#类CastException（ClassCastException）" class="headerlink" title="类CastException（ClassCastException）"></a>类CastException（ClassCastException）</h2><p>这个异常我也碰过。有一次我非要把一个类型强转成另一个不兼容的类型，结果就报了这个异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) obj; <span class="comment">// 这就报 ClassCastException 了</span></span><br></pre></td></tr></table></figure>

<p>后来我知道了，在强转之前可以用 <code>instanceof</code> 先检查一下类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) obj;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;类型不兼容，不能转！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="输入输出异常（IOException）"><a href="#输入输出异常（IOException）" class="headerlink" title="输入输出异常（IOException）"></a>输入输出异常（IOException）</h2><p>做文件操作的时候，这个异常就很容易碰到了。比如我想读一个不存在的文件，那肯定就会报这个异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;nonexistentfile.txt&quot;</span>); <span class="comment">// 文件不存在就报异常</span></span><br></pre></td></tr></table></figure>

<p>现在我会用 <code>try-catch</code> 来捕获这个异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;nonexistentfile.txt&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123; <span class="comment">// FileNotFoundException 是 IOException 的子类</span></span><br><span class="line">    System.out.println(<span class="string">&quot;文件找不到啦！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SQL-异常（SQLException）"><a href="#SQL-异常（SQLException）" class="headerlink" title="SQL 异常（SQLException）"></a>SQL 异常（SQLException）</h2><p>和数据库打交道的时候，这玩意也经常冒出来。就说有一次我写了个错的 SQL 语句，结果就报了这个异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">stmt.executeQuery(<span class="string">&quot;SELECT * FROM NonexistentTable&quot;</span>); <span class="comment">// 表不存在就报异常</span></span><br></pre></td></tr></table></figure>

<p>需要根据报错仔细检查 SQL 语句有没有写错，数据库连接是不是正常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">    stmt.executeQuery(<span class="string">&quot;SELECT * FROM ExistingTable&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;SQL 出问题啦！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="并发修改异常（ConcurrentModificationException）"><a href="#并发修改异常（ConcurrentModificationException）" class="headerlink" title="并发修改异常（ConcurrentModificationException）"></a>并发修改异常（ConcurrentModificationException）</h2><p>这玩意我是在并发编程里碰到的。在用迭代器遍历一个集合的时候，同时又有别的线程在修改这个集合，结果就报这个异常了。<br>并发，死锁之类的也会有新的专门博客来讲这方面（蔡某喜提bug的那些事）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="comment">// 模拟并发修改</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; list.add(<span class="string">&quot;C&quot;</span>)).start();</span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    System.out.println(s); <span class="comment">// 如果在遍历的时候集合被修改，就可能报这个异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以用 <code>Iterator</code> 的 <code>remove</code> 方法来安全地删除元素，或者考虑使用 <code>CopyOnWriteArrayList</code> 这种线程安全的集合类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">&quot;B&quot;</span>)) &#123;</span><br><span class="line">        iterator.remove(); <span class="comment">// 安全地删除元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者使用 CopyOnWriteArrayList</span></span><br><span class="line">List&lt;String&gt; threadSafeList = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>java面经刚启动就拿下offer</title>
    <url>/2024/08/20/java%E9%9D%A2%E7%BB%8F%E5%88%9A%E5%90%AF%E5%8A%A8%E5%B0%B1%E6%8B%BF%E4%B8%8Boffer/</url>
    <content><![CDATA[<h1 id="Java基础：线程与并发"><a href="#Java基础：线程与并发" class="headerlink" title="Java基础：线程与并发"></a>Java基础：线程与并发</h1><h4 id="刚刚秋招就拿下了第一个offer，公司规模不错，后续应该用语雀记录一下公司内部的依赖包使用和其他玩意。博客记录基础知识面经和开源提效小轮子的系列"><a href="#刚刚秋招就拿下了第一个offer，公司规模不错，后续应该用语雀记录一下公司内部的依赖包使用和其他玩意。博客记录基础知识面经和开源提效小轮子的系列" class="headerlink" title="刚刚秋招就拿下了第一个offer，公司规模不错，后续应该用语雀记录一下公司内部的依赖包使用和其他玩意。博客记录基础知识面经和开源提效小轮子的系列"></a>刚刚秋招就拿下了第一个offer，公司规模不错，后续应该用语雀记录一下公司内部的依赖包使用和其他玩意。博客记录基础知识面经和开源提效小轮子的系列</h4><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="HashMap-的-put-方法具体流程（JDK-1-8）"><a href="#HashMap-的-put-方法具体流程（JDK-1-8）" class="headerlink" title="HashMap 的 put 方法具体流程（JDK 1.8）"></a>HashMap 的 put 方法具体流程（JDK 1.8）</h3><ol>
<li><strong>put 方法传入键值</strong>：调用 <code>put(K key, V value)</code> 方法，传入键值对。</li>
<li><strong>检查 table 是否为空</strong>：如果 <code>table</code> 为空，则调用 <code>resize()</code> 方法进行初始化。</li>
<li><strong>计算索引值</strong>：根据键的 <code>hash</code> 值，通过 <code>hash</code> 函数计算索引值 <code>index</code>。</li>
<li><strong>检查索引位置是否为空</strong>：<ul>
<li>如果 <code>table[index]</code> 为空，则直接插入新节点，并增加 <code>size</code>。</li>
</ul>
</li>
<li><strong>检查链表中是否存在相等的键</strong>：<ul>
<li>如果 <code>table[index]</code> 不为空，遍历链表，通过 <code>equals</code> 方法检查是否存在相等的键。</li>
<li>如果找到相等的键，则覆盖对应的值。</li>
</ul>
</li>
<li><strong>判断链表长度是否超过阈值</strong>：<ul>
<li>如果链表长度超过 8，且 <code>table</code> 的长度大于 64，则将链表转换为红黑树。</li>
<li>如果链表长度小于等于 6，且当前是红黑树，则将红黑树转换回链表。</li>
</ul>
</li>
<li><strong>插入新节点</strong>：<ul>
<li>如果链表长度未超过 8，直接将新节点插入链表尾部。</li>
<li>如果链表长度超过 8，且 <code>table</code> 的长度大于 64，则将新节点插入红黑树。</li>
</ul>
</li>
</ol>
<h3 id="JDK-1-7-和-JDK-1-8-的区别"><a href="#JDK-1-7-和-JDK-1-8-的区别" class="headerlink" title="JDK 1.7 和 JDK 1.8 的区别"></a>JDK 1.7 和 JDK 1.8 的区别</h3><ul>
<li><strong>存储结构</strong>：<ul>
<li><strong>JDK 1.7</strong>：使用数组加链表的方式存储元素，发生哈希冲突时，多个元素以链表形式存储。</li>
<li><strong>JDK 1.8</strong>：引入红黑树，当链表长度超过 8 时，链表会转换为红黑树，提高查询效率。</li>
</ul>
</li>
<li><strong>扩容操作</strong>：<ul>
<li><strong>JDK 1.7</strong>：扩容时，整个哈希表的容量加倍，所有键值对重新哈希并分配到新桶中。</li>
<li><strong>JDK 1.8</strong>：引入红黑树优化，减少需要重新哈希的键值对数量，优化扩容性能。</li>
</ul>
</li>
<li><strong>插入方法</strong>：<ul>
<li><strong>JDK 1.7</strong>：使用头插法，新元素插入链表头部。</li>
<li><strong>JDK 1.8</strong>：使用尾插法，新元素插入链表尾部，减少多线程并发写入时的竞争。</li>
</ul>
</li>
<li><strong>对 null 键的处理</strong>：<ul>
<li><strong>JDK 1.7</strong>：<code>null</code> 键放在数组的 <code>index 0</code> 位置。</li>
<li><strong>JDK 1.8</strong>：<code>null</code> 键的处理与其他键相同，通过计算哈希值确定位置。</li>
</ul>
</li>
</ul>
<h3 id="HashMap-和-Hashtable-的区别"><a href="#HashMap-和-Hashtable-的区别" class="headerlink" title="HashMap 和 Hashtable 的区别"></a>HashMap 和 Hashtable 的区别</h3><ul>
<li><strong>线程安全性</strong>：<ul>
<li><strong>Hashtable</strong>：线程安全，方法同步，性能开销大。</li>
<li><strong>HashMap</strong>：非线程安全，性能高，适合单线程环境。</li>
</ul>
</li>
<li><strong>对 null 的支持</strong>：<ul>
<li><strong>Hashtable</strong>：不允许键或值为 <code>null</code>。</li>
<li><strong>HashMap</strong>：允许一个键为 <code>null</code>，多个值为 <code>null</code>。</li>
</ul>
</li>
<li><strong>初始容量和负载因子</strong>：<ul>
<li><strong>Hashtable</strong>：默认初始容量为 11，负载因子为 0.75。</li>
<li><strong>HashMap</strong>：默认初始容量为 16，负载因子为 0.75。</li>
</ul>
</li>
<li><strong>应用场景</strong>：<ul>
<li><strong>Hashtable</strong>：适用于多线程环境，但性能较低。</li>
<li><strong>HashMap</strong>：适用于单线程环境，性能高。</li>
</ul>
</li>
</ul>
<h3 id="HashMap-和-ConcurrentHashMap-的区别"><a href="#HashMap-和-ConcurrentHashMap-的区别" class="headerlink" title="HashMap 和 ConcurrentHashMap 的区别"></a>HashMap 和 ConcurrentHashMap 的区别</h3><ul>
<li><strong>线程安全性</strong>：<ul>
<li><strong>HashMap</strong>：非线程安全。</li>
<li><strong>ConcurrentHashMap</strong>：线程安全，使用分段锁或 CAS 操作。</li>
</ul>
</li>
<li><strong>性能</strong>：<ul>
<li><strong>HashMap</strong>：单线程高性能。</li>
<li><strong>ConcurrentHashMap</strong>：多线程高性能。</li>
</ul>
</li>
<li><strong>扩容机制</strong>：<ul>
<li><strong>HashMap</strong>：全表扩容。</li>
<li><strong>ConcurrentHashMap</strong>：局部扩容。</li>
</ul>
</li>
<li><strong>对 null 的支持</strong>：<ul>
<li><strong>HashMap</strong>：支持 <code>null</code> 键和值。</li>
<li><strong>ConcurrentHashMap</strong>：不允许 <code>null</code> 键和值。</li>
</ul>
</li>
<li><strong>应用场景</strong>：<ul>
<li><strong>HashMap</strong>：适用于单线程环境。</li>
<li><strong>ConcurrentHashMap</strong>：适用于多线程环境。</li>
</ul>
</li>
</ul>
<h3 id="ConcurrentHashMap-和-Hashtable-的区别"><a href="#ConcurrentHashMap-和-Hashtable-的区别" class="headerlink" title="ConcurrentHashMap 和 Hashtable 的区别"></a>ConcurrentHashMap 和 Hashtable 的区别</h3><ul>
<li><strong>线程安全机制</strong>：<ul>
<li><strong>Hashtable</strong>：使用同步方法，锁粒度粗。</li>
<li><strong>ConcurrentHashMap</strong>：使用分段锁或 CAS 操作，锁粒度细。</li>
</ul>
</li>
<li><strong>性能</strong>：<ul>
<li><strong>Hashtable</strong>：性能较低。</li>
<li><strong>ConcurrentHashMap</strong>：性能高。</li>
</ul>
</li>
<li><strong>对 null 的支持</strong>：<ul>
<li><strong>Hashtable</strong>：不允许 <code>null</code> 键和值。</li>
<li><strong>ConcurrentHashMap</strong>：不允许 <code>null</code> 键和值。</li>
</ul>
</li>
<li><strong>迭代器</strong>：<ul>
<li><strong>Hashtable</strong>：使用 <code>Enumeration</code>。</li>
<li><strong>ConcurrentHashMap</strong>：使用弱一致性迭代器。</li>
</ul>
</li>
<li><strong>扩容机制</strong>：<ul>
<li><strong>Hashtable</strong>：全表扩容。</li>
<li><strong>ConcurrentHashMap</strong>：局部扩容。</li>
</ul>
</li>
<li><strong>应用场景</strong>：<ul>
<li><strong>Hashtable</strong>：逐渐被替代。</li>
<li><strong>ConcurrentHashMap</strong>：推荐用于多线程环境。</li>
</ul>
</li>
</ul>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h3><ul>
<li><strong>线程</strong>：是进程的执行单元，一个进程可以包含多个线程。</li>
<li><strong>进程</strong>：是操作系统分配资源的基本单位，线程共享进程的地址空间和系统资源。</li>
</ul>
<h3 id="线程池参数"><a href="#线程池参数" class="headerlink" title="线程池参数"></a>线程池参数</h3><ul>
<li><strong>corePoolSize</strong>：线程池的基本大小。</li>
<li><strong>maximumPoolSize</strong>：线程池能够容纳的最大线程数量。</li>
<li><strong>keepAliveTime</strong>：多余的空闲线程能够存活的时间。</li>
<li><strong>unit</strong>：<code>keepAliveTime</code> 参数的时间单位。</li>
<li><strong>workQueue</strong>：一个阻塞队列，用于存放任务。</li>
<li><strong>threadFactory</strong>：用于创建新线程的工厂。</li>
<li><strong>handler</strong>：拒绝策略，当任务太多时，线程池会采取的策略。</li>
</ul>
<h3 id="Java-中创建线程的方式"><a href="#Java-中创建线程的方式" class="headerlink" title="Java 中创建线程的方式"></a>Java 中创建线程的方式</h3><ol>
<li><strong>继承 Thread 类</strong>：创建一个类继承 <code>Thread</code> 类，并重写 <code>run()</code> 方法。</li>
<li><strong>实现 Runnable 接口</strong>：创建一个类实现 <code>Runnable</code> 接口，并实现 <code>run()</code> 方法。</li>
<li><strong>实现 Callable 接口和 Future</strong>：重写 <code>call()</code> 方法，通过 <code>Callable</code> 接口返回线程执行的结果，并通过 <code>Future</code> 获取结果。</li>
<li><strong>使用 Executor 框架</strong>：通过 <code>Executor</code> 框架创建线程池，将任务提交给线程池执行。</li>
</ol>
<h3 id="Runnable-和-Callable-的区别"><a href="#Runnable-和-Callable-的区别" class="headerlink" title="Runnable 和 Callable 的区别"></a>Runnable 和 Callable 的区别</h3><ul>
<li><strong>Runnable</strong>：没有返回值，不能抛出异常。</li>
<li><strong>Callable</strong>：有返回值，可以抛出异常。</li>
</ul>
<h3 id="线程池的执行过程"><a href="#线程池的执行过程" class="headerlink" title="线程池的执行过程"></a>线程池的执行过程</h3><ol>
<li>线程池接到任务后，判断核心线程是否满了，没满就执行任务，满了就放到等待队列。</li>
<li>等待队列没满，存入队列，满了就去查看最大线程数。</li>
<li>最大线程数没满，执行任务，满了执行拒绝策略。</li>
</ol>
<h3 id="线程池的拒绝策略"><a href="#线程池的拒绝策略" class="headerlink" title="线程池的拒绝策略"></a>线程池的拒绝策略</h3><ol>
<li><strong>AbortPolicy</strong>：直接抛出 <code>RejectedExecutionException</code>。</li>
<li><strong>DiscardPolicy</strong>：直接丢弃新任务。</li>
<li><strong>DiscardOldestPolicy</strong>：丢弃队列最前面的任务，然后尝试重新提交新任务。</li>
<li><strong>CallerRunsPolicy</strong>：由调用者所在的线程来执行任务。</li>
</ol>
<h3 id="Java-中如何实现线程安全"><a href="#Java-中如何实现线程安全" class="headerlink" title="Java 中如何实现线程安全"></a>Java 中如何实现线程安全</h3><ol>
<li><strong>使用 synchronized 关键字</strong>：通过在方法或代码块中使用 <code>synchronized</code> 关键字来实现对共享资源的同步访问。</li>
<li><strong>使用 Lock 接口</strong>：通过 <code>Lock</code> 接口以及实现类（如 <code>ReentrantLock</code>）来实现对共享资源的同步访问。</li>
<li><strong>使用原子类</strong>：Java 提供了一些原子类（如 <code>AtomicInteger</code>、<code>AtomicLong</code> 等），提供线程安全的方式更新共享变量。</li>
<li><strong>使用线程安全的集合</strong>：Java 提供了一些线程安全的集合类（如 <code>ConcurrentHashMap</code>、<code>CopyOnWriteArrayList</code> 等），在多线程环境下可以安全地操作集合。</li>
</ol>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p><strong>定义</strong>：两个或多个线程在执行过程中，由于竞争资源或通信造成的一种堵塞现象，若无外力作用，都将无法推进。</p>
<p><strong>形成死锁的四个必要条件</strong>：</p>
<ol>
<li><strong>互斥条件</strong>：资源不能被多个线程同时占用。</li>
<li><strong>请求与保持条件</strong>：线程已占用资源，还想申请新的资源。</li>
<li><strong>不剥夺条件</strong>：线程已占用的资源不能被其他线程强行剥夺。</li>
<li><strong>循环等待条件</strong>：线程之间形成环路，相互等待对方释放资源。</li>
</ol>
<p><strong>如何避免死锁</strong>：</p>
<ol>
<li>避免嵌套锁。</li>
<li>统一获取锁的顺序。</li>
<li>使用 <code>tryLock()</code> 方法。</li>
<li>设置超时时间。</li>
</ol>
<h3 id="Java-中如何使用线程池"><a href="#Java-中如何使用线程池" class="headerlink" title="Java 中如何使用线程池"></a>Java 中如何使用线程池</h3><ol>
<li><strong>创建线程池</strong>：通过 <code>Executors</code> 工厂类的静态方法创建不同类型的线程池。</li>
<li><strong>提交任务</strong>：将任务（实现 <code>Runnable</code> 或 <code>Callable</code> 接口的类）提交给线程池。</li>
<li><strong>关闭线程池</strong>：在线程池不再需要使用时，调用 <code>shutdown()</code> 方法关闭线程池。</li>
</ol>
<h3 id="Java-中线程的状态"><a href="#Java-中线程的状态" class="headerlink" title="Java 中线程的状态"></a>Java 中线程的状态</h3><ol>
<li><strong>新建（New）</strong>：线程被创建后尚未启动。</li>
<li><strong>运行（Runnable）</strong>：线程正在执行中或等待 CPU 的时间片。</li>
<li><strong>阻塞（Blocked）</strong>：线程等待某个条件的释放，如等待输入输出、获取锁等。</li>
<li><strong>等待（Waiting）</strong>：线程等待其他线程发出的通知，如调用了 <code>wait()</code> 方法。</li>
<li><strong>超时等待（Timed Waiting）</strong>：线程等待一段时间后会自动唤醒，如调用了 <code>sleep()</code> 方法。</li>
<li><strong>终止（Terminated）</strong>：线程执行完毕或出现异常而终止。</li>
</ol>
<h3 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h3><p><strong>定义</strong>：CPU 从一个线程切换到另一个线程的过程。</p>
<p><strong>影响</strong>：线程上下文切换会带来一定的开销，包括保存当前线程的上下文信息、加载新线程的上下文信息等。当线程数量过多或频繁进行上下文切换时，会导致系统性能下降。</p>
<h3 id="Java-中如何设置线程的优先级"><a href="#Java-中如何设置线程的优先级" class="headerlink" title="Java 中如何设置线程的优先级"></a>Java 中如何设置线程的优先级</h3><p>Java 中可以通过 <code>setPriority()</code> 方法来设置线程的优先级，优先级范围从 1（最低优先级）到 10（最高优先级）。线程优先级并不能完全控制线程的执行顺序，它只是给线程获取 CPU 资源的建议。</p>
<h3 id="线程安全的集合"><a href="#线程安全的集合" class="headerlink" title="线程安全的集合"></a>线程安全的集合</h3><p><strong>定义</strong>：多线程环境下可以安全地进行读写操作的集合。</p>
<p><strong>Java 中的线程安全集合</strong>：</p>
<ol>
<li><strong>ConcurrentHashMap</strong>：线程安全的哈希表。</li>
<li><strong>CopyOnWriteArrayList</strong>：线程安全的动态数组。</li>
<li><strong>CopyOnWriteArraySet</strong>：线程安全的集合。</li>
<li><strong>ConcurrentLinkedQueue</strong>：线程安全的无界队列。</li>
<li><strong>ConcurrentSkipListMap</strong>：线程安全的有序映射表。</li>
<li><strong>ConcurrentSkipListSet</strong>：线程安全的有序集合。</li>
</ol>
<h3 id="Java-中的线程间通信方式"><a href="#Java-中的线程间通信方式" class="headerlink" title="Java 中的线程间通信方式"></a>Java 中的线程间通信方式</h3><ol>
<li><strong>共享变量</strong>：多个线程共享同一个变量，在变量上加锁保证线程安全。</li>
<li><strong>wait() 和 notify()</strong>：使用 <code>Object</code> 类的 <code>wait()</code> 方法使线程等待，使用 <code>notify()</code> 方法唤醒等待的线程。</li>
<li><strong>Condition</strong>：使用 <code>Condition</code> 接口和 <code>Lock</code> 锁实现线程间通信，可以实现更细粒度的等待和唤醒操作。</li>
<li><strong>生产者-消费者模式</strong>：通过一个共享的阻塞队列实现生产者线程和消费者线程的通信。</li>
</ol>
<h3 id="Java-中的-ThreadLocal"><a href="#Java-中的-ThreadLocal" class="headerlink" title="Java 中的 ThreadLocal"></a>Java 中的 ThreadLocal</h3><p><strong>定义</strong>：<code>ThreadLocal</code> 是 Java 中的一个线程局部变量，它可以保证每个线程都有自己的变量副本，线程之间互不干扰。</p>
<p><strong>用途</strong>：通常用于保存线程私有的数据，以减少多线程之间的共享和竞争。</p>
<h3 id="Java-中的-volatile-关键字"><a href="#Java-中的-volatile-关键字" class="headerlink" title="Java 中的 volatile 关键字"></a>Java 中的 volatile 关键字</h3><p><strong>作用</strong>：<code>volatile</code> 关键字用于修饰变量，保证变量在多线程环境下的可见性。当一个变量被 <code>volatile</code> 修饰时，任何线程对该变量的修改都会立即对其他线程可见。</p>
<p><strong>volatile 和 synchronized 的区别</strong>：</p>
<ul>
<li><strong>volatile</strong>：保证变量的可见性，但不能保证原子性。</li>
<li><strong>synchronized</strong>：保证代码块的原子性，可以用于同步方法或代码块。</li>
</ul>
<h3 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h3><ul>
<li><strong>悲观锁</strong>：假设会发生并发冲突，所以在数据操作之前会将数据加锁。</li>
<li><strong>乐观锁</strong>：假设不会发生并发冲突，所以在数据操作时不会加锁，而是在数据提交时检查是否发生冲突。</li>
</ul>
<h3 id="CAS（Compare-And-Swap）操作"><a href="#CAS（Compare-And-Swap）操作" class="headerlink" title="CAS（Compare And Swap）操作"></a>CAS（Compare And Swap）操作</h3><p><strong>定义</strong>：CAS 是一种乐观锁机制，用于实现线程安全的无锁算法。</p>
<p><strong>操作过程</strong>：</p>
<ol>
<li>检查内存地址 V 的值是否等于预期值 A。</li>
<li>如果相等，则将内存地址 V 的值更新为新值 B，否则操作失败。</li>
</ol>
<h3 id="乐观锁的实现方式"><a href="#乐观锁的实现方式" class="headerlink" title="乐观锁的实现方式"></a>乐观锁的实现方式</h3><p>通过版本号或时间戳来实现。当一个线程获取到数据后，会记录数据的版本号或时间戳，然后在更新数据时会检查数据的版本号或时间戳是否发生变化，如果没有变化则可以更新数据，否则说明数据已经被其他线程修改过，更新失败。</p>
<h3 id="Java-中的-wait-、notify-和-notifyAll"><a href="#Java-中的-wait-、notify-和-notifyAll" class="headerlink" title="Java 中的 wait()、notify() 和 notifyAll()"></a>Java 中的 wait()、notify() 和 notifyAll()</h3><ul>
<li><strong>wait() 方法</strong>：<ul>
<li>使当前线程进入等待状态，并释放当前对象的锁。</li>
<li>必须在同步代码块中调用。</li>
<li>可能被虚假唤醒，需要使用 <code>while</code> 循环检查条件。</li>
</ul>
</li>
<li><strong>notify() 方法</strong>：<ul>
<li>唤醒一个正在等待该对象的线程。</li>
<li>必须在同步代码块中调用。</li>
<li>只会唤醒一个线程。</li>
</ul>
</li>
<li><strong>notifyAll() 方法</strong>：<ul>
<li>唤醒所有正在等待该对象的线程。</li>
<li>必须在同步代码块中调用。</li>
</ul>
</li>
</ul>
<h3 id="Java-中的-sleep-方法和-yield-方法"><a href="#Java-中的-sleep-方法和-yield-方法" class="headerlink" title="Java 中的 sleep() 方法和 yield() 方法"></a>Java 中的 sleep() 方法和 yield() 方法</h3><ul>
<li><strong>sleep() 方法</strong>：<ul>
<li>使当前线程暂停执行一段时间，让出 CPU 的执行时间，但不会释放锁资源。</li>
</ul>
</li>
<li><strong>yield() 方法</strong>：<ul>
<li>让出一次 CPU 的执行时间，使得其他具有相同优先级的线程有机会执行，但不保证成功让出。</li>
</ul>
</li>
</ul>
<h3 id="Java-中的-ReentrantLock"><a href="#Java-中的-ReentrantLock" class="headerlink" title="Java 中的 ReentrantLock"></a>Java 中的 ReentrantLock</h3><p><strong>定义</strong>：<code>ReentrantLock</code> 是 Java 中的一种独占锁，可以替代 <code>synchronized</code> 关键字实现对共享资源的同步访问。</p>
<p><strong>与 synchronized 的区别</strong>：</p>
<ul>
<li><strong>ReentrantLock</strong>：是显式锁，需要手动进行加锁和解锁操作，提供更灵活的锁操作。</li>
<li><strong>synchronized</strong>：是隐式锁，由 JVM 自动管理锁的加锁和解锁。</li>
</ul>
<h3 id="Java-的并发问题和解决方法"><a href="#Java-的并发问题和解决方法" class="headerlink" title="Java 的并发问题和解决方法"></a>Java 的并发问题和解决方法</h3><p><strong>并发问题</strong>：</p>
<ol>
<li><strong>线程安全</strong>：多个线程同时访问同一个对象时，可能导致数据不一致。</li>
<li><strong>死锁</strong>：两个或多个线程在等待对方释放资源，导致它们永远阻塞。</li>
<li><strong>竞态条件</strong>：多个线程的执行顺序影响程序输出，导致结果不确定。</li>
<li><strong>资源限制</strong>：线程过多可能导致系统资源耗尽。</li>
<li><strong>可见性问题</strong>：一个线程对共享变量的修改对其他线程不可见。</li>
<li><strong>原子性问题</strong>：操作被中断，导致操作结果不完整。</li>
</ol>
<p><strong>解决方法</strong>：</p>
<ol>
<li><strong>synchronized 关键字</strong>：确保同一时间只有一个线程可以执行该段代码。</li>
<li><strong>volatile 关键字</strong>：保证变量的可见性。</li>
<li><strong>Lock 接口和实现类</strong>：提供更灵活的锁定机制。</li>
<li><strong>原子类</strong>：提供无锁的线程安全操作。</li>
<li><strong>线程池</strong>：管理线程的创建和复用，减少线程创建和销毁的开销。</li>
<li><strong>并发集合</strong>：提供线程安全的集合类。</li>
<li><strong>显式锁</strong>：提供更复杂的锁定策略。</li>
<li><strong>不可变对象</strong>：天然线程安全。</li>
<li><strong>线程局部变量</strong>：每个线程都有独立的变量副本。</li>
<li><strong>避免共享状态</strong>：设计无状态或纯函数式的并发策略。</li>
<li><strong>设计模式</strong>：使用并发设计模式，如生产者-消费者模式、读者-写者模式等。</li>
</ol>
]]></content>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>java面经启动，准备找新工作</title>
    <url>/2024/08/15/java%E9%9D%A2%E7%BB%8F%E5%90%AF%E5%8A%A8%EF%BC%8C%E5%87%86%E5%A4%87%E6%89%BE%E6%96%B0%E5%B7%A5%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="秋招到了，准备准备八股和整理一下基础知识，目标大型集团-冲冲冲"><a href="#秋招到了，准备准备八股和整理一下基础知识，目标大型集团-冲冲冲" class="headerlink" title="秋招到了，准备准备八股和整理一下基础知识，目标大型集团~冲冲冲"></a>秋招到了，准备准备八股和整理一下基础知识，目标大型集团~冲冲冲</h3><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="Java的数据类型"><a href="#Java的数据类型" class="headerlink" title="Java的数据类型"></a>Java的数据类型</h2><ul>
<li><strong>基本数据类型</strong>：<code>int</code>、<code>short</code>、<code>long</code>、<code>double</code>、<code>float</code>、<code>byte</code>、<code>char</code>、<code>boolean</code></li>
<li><strong>引用数据类型</strong>：类、接口、数组</li>
</ul>
<h2 id="int-和-Integer-的区别"><a href="#int-和-Integer-的区别" class="headerlink" title="int 和 Integer 的区别"></a>int 和 Integer 的区别</h2><ol>
<li><code>int</code> 是基本数据类型，<code>Integer</code> 是 <code>int</code> 的包装类，是引用类型。</li>
<li><code>int</code> 的默认值是 <code>0</code>，<code>Integer</code> 的默认值是 <code>null</code>。</li>
<li><code>Integer</code> 变量必须实例化后才能使用，而 <code>int</code> 变量不需要。</li>
<li><code>Integer</code> 实际是对象的应用，当 <code>new</code> 一个 <code>Integer</code> 时，实际是生成一个指针指向此对象；而 <code>int</code> 是直接存储数据值。</li>
</ol>
<h2 id="Instanceof-关键字的作用"><a href="#Instanceof-关键字的作用" class="headerlink" title="Instanceof 关键字的作用"></a>Instanceof 关键字的作用</h2><p><code>instanceof</code> 是 Java 中的一个双目运算符，用来判断一个对象是否为一个类的实例。</p>
<ul>
<li><strong>用法</strong>：<code>boolean result = obj instanceof Class</code><ul>
<li><code>obj</code>：对象</li>
<li><code>Class</code>：类或接口</li>
</ul>
</li>
<li>若 <code>obj</code> 为 <code>null</code>，一律返回 <code>false</code>。</li>
</ul>
<h2 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h2><ul>
<li><strong>装箱</strong>：自动将基本数据类型转换为包装器类型（<code>int</code> -&gt; <code>Integer</code>）<ul>
<li>调用方法：<code>Integer.valueOf(int)</code></li>
</ul>
</li>
<li><strong>拆箱</strong>：自动将包装器类型转换为基本数据类型（<code>Integer</code> -&gt; <code>int</code>）<ul>
<li>调用方法：<code>Integer.intValue()</code></li>
</ul>
</li>
</ul>
<h2 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h2><ul>
<li><strong>重载</strong>：<ul>
<li>要求同名方法的参数列表、参数类型、参数个数不同，返回值类型可相同也可不同。</li>
</ul>
</li>
<li><strong>重写</strong>：<ul>
<li>发生于父子类之间，方法名、参数列表、返回类型必须相同。</li>
<li>重写方法的修饰符不能比被重写方法的更严格。</li>
<li>重写方法抛出的异常不能比被重写方法的异常宽泛。</li>
</ul>
</li>
</ul>
<h2 id="equals-与-的区别"><a href="#equals-与-的区别" class="headerlink" title="equals 与 &#x3D;&#x3D; 的区别"></a>equals 与 &#x3D;&#x3D; 的区别</h2><ul>
<li><strong>&#x3D;&#x3D;</strong>：比较的是变量内存中存放对象的地址，用来判断两个对象的地址是否相同，真正意义上的指针操作。</li>
<li><strong>equals</strong>：比较两个对象的内容是否相等。由于所有的类都是继承 <code>Object</code> 类的，所以适用于所有对象。如果没有重写 <code>equals</code> 方法，调用的是 <code>Object</code> 类中的方法，返回的是 <code>==</code> 判断。</li>
<li>使用 <code>equals</code> 时，如与常量比较，可将常量写在前面，可避免空指针异常。</li>
</ul>
<h2 id="String、StringBuffer-和-StringBuilder"><a href="#String、StringBuffer-和-StringBuilder" class="headerlink" title="String、StringBuffer 和 StringBuilder"></a>String、StringBuffer 和 StringBuilder</h2><ul>
<li><strong>String</strong>：不可变字符串，不是基本数据类型，而是一个对象，底层是一个 <code>final</code> 类型的字符数组，引用的字符串不能被改变。每次对 <code>String</code> 操作都会生成新的 <code>String</code> 对象。</li>
<li><strong>StringBuffer</strong> 和 <strong>StringBuilder</strong> 都继承了 <code>AbstractString</code> 抽象类，底层是可变的字符串数组。在进行频繁的字符串操作时，建议使用它们来进行操作。<ul>
<li><strong>StringBuffer</strong>：对方法加了同步锁，线程安全。</li>
<li><strong>StringBuilder</strong>：非线程安全。</li>
</ul>
</li>
</ul>
<h2 id="ArrayList-和-LinkedList-的区别"><a href="#ArrayList-和-LinkedList-的区别" class="headerlink" title="ArrayList 和 LinkedList 的区别"></a>ArrayList 和 LinkedList 的区别</h2><ul>
<li><strong>ArrayList</strong>：<ul>
<li>基于索引的数据结构，搜索和读取数据很快，时间复杂度为 <code>O(1)</code>。</li>
<li>增删操作需要重排数组中的所有元素，开销较大，时间复杂度为 <code>O(n)</code>。</li>
</ul>
</li>
<li><strong>LinkedList</strong>：<ul>
<li>基于双向链表，在增删元素时比 <code>ArrayList</code> 有更好的性能（主要原因是它只需要修改指针，而不需要移动大量元素），时间复杂度为 <code>O(1)</code>。</li>
<li>查询元素弱于 <code>ArrayList</code>，时间复杂度为 <code>O(n)</code>。</li>
</ul>
</li>
</ul>
<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>红黑树是一种自平衡的二叉搜索树，查找、添加和删除的时间复杂度都为 <code>O(logN)</code>。</p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ol>
<li>节点只有红色或者黑色两种颜色。</li>
<li>根节点为黑色。</li>
<li>叶子节点都是黑色。</li>
<li>红色节点的子节点都是黑色。</li>
<li>从根节点到任意叶子节点的路径上，黑色节点数一致。</li>
</ol>
<h2 id="如何解决哈希冲突？"><a href="#如何解决哈希冲突？" class="headerlink" title="如何解决哈希冲突？"></a>如何解决哈希冲突？</h2><ol>
<li><strong>链地址法（Chaining）</strong>：这是 <code>HashMap</code> 使用的解决方法。当冲突发生时，它会在数组的相应位置维护一个链表（当链表长度超过一定阈值时，链表会转换为红黑树）。</li>
<li><strong>开放寻址法（Open Addressing）</strong>：这种方法尝试寻找空的数组位置来存储发生冲突的键值对。常见的策略有线性探测、二次探测和双重哈希。</li>
<li><strong>再散列（Rehashing）</strong>：使用另一个哈希函数重新计算哈希值，直到找到一个空的位置。</li>
<li><strong>红黑树</strong>：当链表的长度超过一定阈值（默认为 8）时，链表会转换为红黑树，以减少搜索时间。</li>
</ol>
<h2 id="Java-的四种引用类型"><a href="#Java-的四种引用类型" class="headerlink" title="Java 的四种引用类型"></a>Java 的四种引用类型</h2><ul>
<li><strong>强引用</strong>：内存不足时，不会被回收。<ul>
<li>示例：<code>String str = new String(&quot;str&quot;);</code></li>
</ul>
</li>
<li><strong>软引用</strong>：内存不足时，会被回收。<ul>
<li>示例：<code>SoftReference&lt;String&gt; wtf = new SoftReference&lt;String&gt;(new String(&quot;str&quot;));</code></li>
</ul>
</li>
<li><strong>弱引用</strong>：JVM 的垃圾回收机制一旦发现，就被回收。<ul>
<li>示例：<code>WeakReference&lt;String&gt; wrf = new WeakReference&lt;String&gt;(str);</code></li>
</ul>
</li>
<li><strong>虚引用</strong>：与弱引用的回收机制差不多，JVM 的垃圾回收机制一旦发现，就被回收，但回收之前会被放到 <code>ReferenceQueue</code> 中，其他的引用都是被 JVM 回收之后才被传入 <code>ReferenceQueue</code> 中。<ul>
<li>示例：<code>PhantomReference&lt;String&gt; prf = new PhantomReference&lt;String&gt;(new String(&quot;str&quot;));</code></li>
</ul>
</li>
</ul>
<h2 id="Java-创建对象的方法"><a href="#Java-创建对象的方法" class="headerlink" title="Java 创建对象的方法"></a>Java 创建对象的方法</h2><ol>
<li>使用 <code>new</code> 关键字：<code>MyClass obj = new MyClass();</code></li>
<li>反射机制：<code>MyClass obj = MyClass.class.newInstance();</code></li>
<li>克隆：<code>MyClass obj2 = obj1.clone();</code></li>
<li>工厂方式：<code>MyClass obj = MyFactory.createInstance();</code></li>
<li>构造函数</li>
<li>反序列化</li>
</ol>
<h2 id="深拷贝和浅拷贝的区别"><a href="#深拷贝和浅拷贝的区别" class="headerlink" title="深拷贝和浅拷贝的区别"></a>深拷贝和浅拷贝的区别</h2><ul>
<li><strong>深拷贝</strong>：<ul>
<li>在拷贝对象时，除了对基本数据类型和成员变量进行拷贝，对引用类型的成员变量进行拷贝时，创建一个新的对象来保存引用类型的成员变量。</li>
<li>实现方式：<ul>
<li>序列化对象然后反序列化。</li>
<li>实现 <code>Cloneable</code> 接口，重写 <code>clone()</code> 方法。</li>
<li>复制构造函数：创建一个新对象，并使用已有对象的复制构造函数来初始化。</li>
<li>使用工具类：Apache Commons Lang 的 <code>SerializationUtils</code> 类来实现深拷贝。</li>
<li>反射 API 递归地复制对象和属性。</li>
</ul>
</li>
</ul>
</li>
<li><strong>浅拷贝</strong>：<ul>
<li>在拷贝一个对象时，对对象的基本数据类型的成员变量进行拷贝，但对引用类型的成员变量只是进行传递，并没有创建一个新的对象，当引用类型的内容修改会影响被拷贝的对象。</li>
<li>实现方式：<ul>
<li>对象拷贝：直接使用 <code>=</code> 操作符复制对象，只复制对象引用，没有复制引用的对象本身。</li>
<li>使用 <code>System.arraycopy()</code> 或数组的 <code>clone()</code> 方法复制数组，但数组中的元素是引用类型时，只会复制引用。</li>
<li>使用集合的构造函数或 <code>addAll()</code> 方法复制集合，但集合中的元素是引用类型时，只会复制引用。</li>
<li>对于数组，使用 <code>Arrays.copyOf()</code> 复制数组，但同样只复制引用。</li>
<li>如果对象的 <code>clone()</code> 方法没有被重写，那么默认的 <code>clone()</code> 方法实现的是浅拷贝。</li>
<li>使用工具类：Apache Commons BeanUtils 的 <code>copyProperties()</code> 方法，默认情况下执行的是浅拷贝。</li>
<li>使用对象自身的构造函数创建新实例，然后手动复制属性值，但只复制了引用。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="try-catch-finally，try里有return，finally还执行吗"><a href="#try-catch-finally，try里有return，finally还执行吗" class="headerlink" title="try catch finally，try里有return，finally还执行吗"></a>try catch finally，try里有return，finally还执行吗</h2><p>执行，并且 <code>finally</code> 的执行早于 <code>try</code> 的 <code>return</code>。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul>
<li>不管有无异常，<code>finally</code> 中代码都会执行。</li>
<li><code>finally</code> 是在 <code>return</code> 后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把返回的值保存起来）。</li>
</ul>
<h2 id="Java-的三大特性"><a href="#Java-的三大特性" class="headerlink" title="Java 的三大特性"></a>Java 的三大特性</h2><ol>
<li><strong>封装</strong>：将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。</li>
<li><strong>继承</strong>：子类继承父类，子类拥有父类的属性和方法，从而实现代码复用。</li>
<li><strong>多态</strong>：父类引用指向子类对象，从而产生多种形态。</li>
</ol>
<h2 id="final、finally、finalize-的区别"><a href="#final、finally、finalize-的区别" class="headerlink" title="final、finally、finalize 的区别"></a>final、finally、finalize 的区别</h2><ol>
<li><strong>final</strong>：用于修饰属性、方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。</li>
<li><strong>finally</strong>：是异常处理语句结构的一部分，表示总是执行。</li>
<li><strong>finalize</strong>：是 <code>Object</code> 类的一个方法，在 GC 执行时会调用被回收对象的此方法。</li>
</ol>
<h2 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h2><ul>
<li><strong>抽象类</strong>：<ul>
<li>可以包含抽象方法和具体方法。</li>
<li>不能直接实例化，但可以包含构造方法。</li>
<li>可以包含成员变量和静态方法。</li>
</ul>
</li>
<li><strong>接口</strong>：<ul>
<li>只能包含抽象方法（Java 8 之后可以包含默认方法和静态方法）。</li>
<li>不能包含构造方法。</li>
<li>不能包含成员变量（可以包含常量）。</li>
</ul>
</li>
</ul>
<h2 id="普通类和抽象类的区别"><a href="#普通类和抽象类的区别" class="headerlink" title="普通类和抽象类的区别"></a>普通类和抽象类的区别</h2><ul>
<li>普通类不能包含抽象方法，抽象类可以包含抽象方法。</li>
<li>抽象类不能直接实例化，普通类可以直接实例化。</li>
</ul>
<h2 id="什么是序列化和反序列化"><a href="#什么是序列化和反序列化" class="headerlink" title="什么是序列化和反序列化"></a>什么是序列化和反序列化</h2><ul>
<li><strong>序列化</strong>：将对象转化成可传输的字节序列格式，以便于存储和传输。</li>
<li><strong>反序列化</strong>：将字节序列格式转换为对象的过程。</li>
</ul>
<h2 id="为什么-Java-不支持多重继承"><a href="#为什么-Java-不支持多重继承" class="headerlink" title="为什么 Java 不支持多重继承"></a>为什么 Java 不支持多重继承</h2><p>多重继承会产生菱形继承问题：假设 <code>B</code> 和 <code>C</code> 都继承了 <code>A</code>，然后 <code>D</code> 继承了 <code>B</code> 和 <code>C</code>，此时如果调用 <code>D</code> 内定义在 <code>A</code> 的方法，因为 <code>B</code> 和 <code>C</code> 都有不同实现，就会出现歧义，不知道应该调用哪个。</p>
<h2 id="怎么实现全局异常处理"><a href="#怎么实现全局异常处理" class="headerlink" title="怎么实现全局异常处理"></a>怎么实现全局异常处理</h2><ol>
<li>使用 <code>try-catch</code> 块：在代码中使用 <code>try-catch</code> 块来捕获和处理可能发生的异常。</li>
<li>定义异常处理器：创建一个异常处理器类，通常实现 <code>Error Handler</code> 接口或继承 <code>ExceptionHandler</code> 类。</li>
<li>使用 <code>@ExceptionHandler</code> 注解：在 Spring MVC 中，可以使用 <code>@ControllerAdvice</code> 和 <code>@ExceptionHandler</code> 注解来定义全局异常处理器。</li>
<li>记录日志：在异常处理器中记录异常信息，便于问题追踪和调试。</li>
<li>返回错误响应：向客户端返回合适的错误响应，例如错误码和错误消息。</li>
<li>自定义错误页面：在 Web 应用中，可以配置自定义错误页面来显示给用户。</li>
</ol>
<h2 id="Java-的反射是什么"><a href="#Java-的反射是什么" class="headerlink" title="Java 的反射是什么"></a>Java 的反射是什么</h2><p>反射是 Java 提供的一种机制，允许程序在运行时动态获取类的信息（如方法、字段、构造函数等），并能操作这些信息（如创建对象、调用方法、修改字段值）。</p>
<h2 id="如何通过反射获取类的-Class-对象"><a href="#如何通过反射获取类的-Class-对象" class="headerlink" title="如何通过反射获取类的 Class 对象"></a>如何通过反射获取类的 <code>Class</code> 对象</h2><ul>
<li><strong>三种方式</strong>：<ul>
<li><code>Class.forName(&quot;全限定类名&quot;)</code>：通过类路径加载。</li>
<li><code>对象.getClass()</code>：通过实例对象获取。</li>
<li><code>类名.class</code>：直接通过类字面量获取。</li>
</ul>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz1 = Class.forName(<span class="string">&quot;com.example.User&quot;</span>);</span><br><span class="line">Class&lt;?&gt; clazz2 = <span class="keyword">new</span> <span class="title class_">User</span>().getClass();</span><br><span class="line">Class&lt;?&gt; clazz3 = User.class;</span><br></pre></td></tr></table></figure>

<h2 id="常用的集合"><a href="#常用的集合" class="headerlink" title="常用的集合"></a>常用的集合</h2><h3 id="1-List（列表）"><a href="#1-List（列表）" class="headerlink" title="1. List（列表）"></a>1. List（列表）</h3><p><code>List</code> 是一个有序集合，允许重复元素，支持通过索引访问元素。常用的实现类有 <code>ArrayList</code>、<code>LinkedList</code> 和 <code>Vector</code>。</p>
<h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><ul>
<li><strong>特点</strong>：基于动态数组实现，随机访问速度快（<code>O(1)</code>），但插入和删除效率较低（<code>O(n)</code>）。</li>
<li><strong>适用场景</strong>：适合频繁读取数据，且数据量相对固定的情况。</li>
<li><strong>示例</strong>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> list.get(<span class="number">0</span>); <span class="comment">// 随机访问</span></span><br></pre></td></tr></table></figure>

<h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><ul>
<li><strong>特点</strong>：基于双向链表实现，插入和删除效率高（<code>O(1)</code>），但随机访问效率低（<code>O(n)</code>）。</li>
<li><strong>适用场景</strong>：适合频繁插入和删除操作的场景。</li>
<li><strong>示例</strong>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">list.add(<span class="number">0</span>, <span class="string">&quot;Python&quot;</span>); <span class="comment">// 插入操作</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Set（集合）"><a href="#2-Set（集合）" class="headerlink" title="2. Set（集合）"></a>2. Set（集合）</h3><p><code>Set</code> 是一个无序、不允许重复元素的集合，常用的实现类有 <code>HashSet</code>、<code>TreeSet</code> 和 <code>LinkedHashSet</code>。</p>
<h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ul>
<li><strong>特点</strong>：基于哈希表实现，插入、删除和查找效率高（平均 <code>O(1)</code>），但不保证元素顺序。</li>
<li><strong>适用场景</strong>：适合需要快速查找且不关心元素顺序的场景。</li>
<li><strong>示例</strong>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">set.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;Java&quot;</span>); <span class="comment">// 重复元素会被忽略</span></span><br></pre></td></tr></table></figure>

<h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><ul>
<li><strong>特点</strong>：基于红黑树实现，元素会自动排序（自然排序或自定义排序）。</li>
<li><strong>适用场景</strong>：适合需要有序集合的场景。</li>
<li><strong>示例</strong>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">set.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line"><span class="comment">// 输出有序集合</span></span><br></pre></td></tr></table></figure>

<h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><ul>
<li><strong>特点</strong>：结合了 <code>HashSet</code> 和链表，保持插入顺序。</li>
<li><strong>适用场景</strong>：适合需要保持元素插入顺序且不允许重复的场景。</li>
</ul>
<h3 id="3-Map（映射）"><a href="#3-Map（映射）" class="headerlink" title="3. Map（映射）"></a>3. Map（映射）</h3><p><code>Map</code> 是一种键值对的集合，常用的实现类有 <code>HashMap</code>、<code>TreeMap</code> 和 <code>LinkedHashMap</code>。</p>
<h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><ul>
<li><strong>特点</strong>：基于哈希表实现，插入、删除和查找效率高（平均 <code>O(1)</code>），但不保证键值对的顺序。</li>
<li><strong>适用场景</strong>：适合快速查找的场景。</li>
<li><strong>示例</strong>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(<span class="string">&quot;key1&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><ul>
<li><strong>特点</strong>：基于红黑树实现，键值对会自动排序（自然排序或自定义排序）。</li>
<li><strong>适用场景</strong>：适合需要有序映射的场景。</li>
<li><strong>示例</strong>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line"><span class="comment">// 遍历有序映射</span></span><br></pre></td></tr></table></figure>

<h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><ul>
<li><strong>特点</strong>：结合了 <code>HashMap</code> 和链表，保持插入顺序。</li>
<li><strong>适用场景</strong>：适合需要保持键值对插入顺序的场景。</li>
</ul>
]]></content>
      <categories>
        <category>面经</category>
      </categories>
  </entry>
  <entry>
    <title>mysql优化</title>
    <url>/2024/10/08/mysql%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="MySQL-优化与实践"><a href="#MySQL-优化与实践" class="headerlink" title="MySQL 优化与实践"></a>MySQL 优化与实践</h1><h2 id="如何定位慢-SQL"><a href="#如何定位慢-SQL" class="headerlink" title="如何定位慢 SQL"></a>如何定位慢 SQL</h2><h3 id="1-启用慢查询日志"><a href="#1-启用慢查询日志" class="headerlink" title="1. 启用慢查询日志"></a>1. 启用慢查询日志</h3><p>慢查询日志是 MySQL 提供的一个功能，用于记录执行时间超过指定阈值的 SQL 语句。这是定位慢 SQL 的第一步。</p>
<h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol>
<li><p><strong>设置慢查询日志文件路径</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log_file <span class="operator">=</span> <span class="string">&#x27;/path/to/your/slow-query.log&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>启用慢查询日志</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置慢查询阈值（默认是 10 秒）</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> long_query_time <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 设置为 1 秒</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>记录所有查询（可选，记录所有查询，包括那些没有达到阈值的查询）</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_queries_not_using_indexes <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-分析慢查询日志"><a href="#2-分析慢查询日志" class="headerlink" title="2. 分析慢查询日志"></a>2. 分析慢查询日志</h3><p>启用慢查询日志后，MySQL 会将慢查询记录到指定的日志文件中。可以使用工具如 <code>mysqldumpslow</code> 或 <code>pt-query-digest</code> 来分析这些日志。</p>
<h4 id="使用-mysqldumpslow"><a href="#使用-mysqldumpslow" class="headerlink" title="使用 mysqldumpslow"></a>使用 <code>mysqldumpslow</code></h4><p><code>mysqldumpslow</code> 是 MySQL 自带的工具，用于解析慢查询日志并生成报告。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysqldumpslow /path/to/your/slow-query.log</span><br></pre></td></tr></table></figure>

<h4 id="使用-pt-query-digest"><a href="#使用-pt-query-digest" class="headerlink" title="使用 pt-query-digest"></a>使用 <code>pt-query-digest</code></h4><p><code>pt-query-digest</code> 是 Percona Toolkit 中的一个工具，功能更强大，可以生成更详细的报告。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pt-query-digest /path/to/your/slow-query.log &gt; slow-query-report.txt</span><br></pre></td></tr></table></figure>

<h3 id="3-使用-EXPLAIN-分析-SQL"><a href="#3-使用-EXPLAIN-分析-SQL" class="headerlink" title="3. 使用 EXPLAIN 分析 SQL"></a>3. 使用 <code>EXPLAIN</code> 分析 SQL</h3><p><code>EXPLAIN</code> 是 MySQL 提供的一个工具，用于分析 SQL 查询的执行计划。通过 <code>EXPLAIN</code>，可以了解查询的性能瓶颈。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table <span class="keyword">WHERE</span> your_column <span class="operator">=</span> <span class="string">&#x27;value&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>type 列</strong>：表示查询的类型（如 <code>ALL</code>、<code>index</code>、<code>range</code> 等）。<code>ALL</code> 表示全表扫描，通常需要优化。</li>
<li><strong>rows 列</strong>：表示 MySQL 认为需要检查的行数。如果这个数字很大，可能需要优化查询或索引。</li>
<li><strong>Extra 列</strong>：包含额外信息，如 <code>Using filesort</code>、<code>Using temporary</code> 等，这些通常表示性能问题。</li>
</ul>
<h3 id="4-检查索引"><a href="#4-检查索引" class="headerlink" title="4. 检查索引"></a>4. 检查索引</h3><p>索引是优化查询性能的关键。确保表上有适当的索引，可以显著提高查询速度。</p>
<h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_column <span class="keyword">ON</span> your_table(your_column);</span><br></pre></td></tr></table></figure>

<h4 id="检查索引使用情况"><a href="#检查索引使用情况" class="headerlink" title="检查索引使用情况"></a>检查索引使用情况</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> your_table;</span><br></pre></td></tr></table></figure>

<h3 id="5-使用-SHOW-PROCESSLIST"><a href="#5-使用-SHOW-PROCESSLIST" class="headerlink" title="5. 使用 SHOW PROCESSLIST"></a>5. 使用 <code>SHOW PROCESSLIST</code></h3><p><code>SHOW PROCESSLIST</code> 可以查看当前正在执行的 SQL 语句，帮助你发现正在运行的慢查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> PROCESSLIST;</span><br></pre></td></tr></table></figure>

<h3 id="6-使用-SHOW-PROFILES"><a href="#6-使用-SHOW-PROFILES" class="headerlink" title="6. 使用 SHOW PROFILES"></a>6. 使用 <code>SHOW PROFILES</code></h3><p>MySQL 提供了 <code>SHOW PROFILES</code> 功能，用于查看查询的详细性能数据。</p>
<h4 id="启用查询性能分析"><a href="#启用查询性能分析" class="headerlink" title="启用查询性能分析"></a>启用查询性能分析</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> profiling <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h4 id="执行查询"><a href="#执行查询" class="headerlink" title="执行查询"></a>执行查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> your_table <span class="keyword">WHERE</span> your_column <span class="operator">=</span> <span class="string">&#x27;value&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="查看性能分析结果"><a href="#查看性能分析结果" class="headerlink" title="查看性能分析结果"></a>查看性能分析结果</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> PROFILES;</span><br></pre></td></tr></table></figure>

<h2 id="如何优化-SQL"><a href="#如何优化-SQL" class="headerlink" title="如何优化 SQL"></a>如何优化 SQL</h2><h3 id="1-尽量选择较小的列"><a href="#1-尽量选择较小的列" class="headerlink" title="1. 尽量选择较小的列"></a>1. 尽量选择较小的列</h3><p>选择合适的数据类型可以减少存储空间，提高查询性能。</p>
<h3 id="2-在-WHERE-子句中经常使用的字段上建立索引"><a href="#2-在-WHERE-子句中经常使用的字段上建立索引" class="headerlink" title="2. 在 WHERE 子句中经常使用的字段上建立索引"></a>2. 在 <code>WHERE</code> 子句中经常使用的字段上建立索引</h3><p>索引可以显著提高查询速度。</p>
<h3 id="3-避免在-SELECT-子句中使用"><a href="#3-避免在-SELECT-子句中使用" class="headerlink" title="3. 避免在 SELECT 子句中使用 *"></a>3. 避免在 <code>SELECT</code> 子句中使用 <code>*</code></h3><p>明确指定需要的列可以减少不必要的数据传输。</p>
<h3 id="4-避免在索引列上使用计算、NOT-IN-和-等操作"><a href="#4-避免在索引列上使用计算、NOT-IN-和-等操作" class="headerlink" title="4. 避免在索引列上使用计算、NOT IN 和 &lt;&gt; 等操作"></a>4. 避免在索引列上使用计算、<code>NOT IN</code> 和 <code>&lt;&gt;</code> 等操作</h3><p>这些操作可能会导致索引失效。</p>
<h3 id="5-当只需要一行数据时使用-LIMIT-1"><a href="#5-当只需要一行数据时使用-LIMIT-1" class="headerlink" title="5. 当只需要一行数据时使用 LIMIT 1"></a>5. 当只需要一行数据时使用 <code>LIMIT 1</code></h3><p>减少返回的数据量可以提高性能。</p>
<h3 id="6-保证单表数据不超过-200W，适时分割表"><a href="#6-保证单表数据不超过-200W，适时分割表" class="headerlink" title="6. 保证单表数据不超过 200W，适时分割表"></a>6. 保证单表数据不超过 200W，适时分割表</h3><p>大数据表会影响查询性能。</p>
<h3 id="7-避免改变索引列的类型"><a href="#7-避免改变索引列的类型" class="headerlink" title="7. 避免改变索引列的类型"></a>7. 避免改变索引列的类型</h3><p>索引列的类型变化可能会导致索引失效。</p>
<h3 id="8-选择最有效的表名顺序"><a href="#8-选择最有效的表名顺序" class="headerlink" title="8. 选择最有效的表名顺序"></a>8. 选择最有效的表名顺序</h3><p>在 <code>FROM</code> 子句中，写在最后的表是基础表，将被最先处理。选择记录条数最少的表作为基础表。</p>
<h3 id="9-避免在索引列上进行计算"><a href="#9-避免在索引列上进行计算" class="headerlink" title="9. 避免在索引列上进行计算"></a>9. 避免在索引列上进行计算</h3><p>计算可能会导致索引失效。</p>
<h3 id="10-尽量缩小子查询的结果"><a href="#10-尽量缩小子查询的结果" class="headerlink" title="10. 尽量缩小子查询的结果"></a>10. 尽量缩小子查询的结果</h3><p>减少子查询的返回数据量可以提高性能。</p>
<h2 id="InnoDB-与-MyISAM-的区别"><a href="#InnoDB-与-MyISAM-的区别" class="headerlink" title="InnoDB 与 MyISAM 的区别"></a>InnoDB 与 MyISAM 的区别</h2><ol>
<li><strong>事务支持</strong>：<ul>
<li><strong>InnoDB</strong>：支持事务。</li>
<li><strong>MyISAM</strong>：不支持事务。</li>
</ul>
</li>
<li><strong>外键支持</strong>：<ul>
<li><strong>InnoDB</strong>：支持外键。</li>
<li><strong>MyISAM</strong>：不支持外键。</li>
</ul>
</li>
<li><strong>并发控制</strong>：<ul>
<li><strong>InnoDB</strong>：支持 MVCC（多版本并发控制）。</li>
<li><strong>MyISAM</strong>：不支持。</li>
</ul>
</li>
<li><strong><code>SELECT COUNT(*)</code> 性能</strong>：<ul>
<li><strong>MyISAM</strong>：更快，因为有一个变量保存了整个表的总行数。</li>
<li><strong>InnoDB</strong>：需要全表扫描。</li>
</ul>
</li>
<li><strong>全文索引</strong>：<ul>
<li><strong>MyISAM</strong>：支持全文索引。</li>
<li><strong>InnoDB</strong>：5.7 以后也支持全文索引。</li>
</ul>
</li>
<li><strong>锁机制</strong>：<ul>
<li><strong>InnoDB</strong>：支持表级锁和行级锁。</li>
<li><strong>MyISAM</strong>：只支持表级锁。</li>
</ul>
</li>
<li><strong>主键要求</strong>：<ul>
<li><strong>InnoDB</strong>：表必须有主键，支持外键约束。</li>
<li><strong>MyISAM</strong>：可以没有主键，不支持外键约束。</li>
</ul>
</li>
<li><strong>存储效率</strong>：<ul>
<li><strong>InnoDB</strong>：提供事务安全，但写入效率略低，占用更多磁盘空间。</li>
<li><strong>MyISAM</strong>：写入效率稍高，但不支持事务。</li>
</ul>
</li>
</ol>
<h2 id="MySQL-索引的原理：为什么使用-B-树"><a href="#MySQL-索引的原理：为什么使用-B-树" class="headerlink" title="MySQL 索引的原理：为什么使用 B+ 树"></a>MySQL 索引的原理：为什么使用 B+ 树</h2><ol>
<li><strong>范围查找</strong>：B+ 树在范围查找时，定位 <code>min</code> 与 <code>max</code> 之后，中间叶子节点就是结果集，无需中序回溯。</li>
<li><strong>磁盘读写能力</strong>：B+ 树的叶子节点不保存真实数据，因此一个磁盘块能保存更多的关键字，每次加载的关键字更多，从而提高磁盘读写效率。</li>
<li><strong>扫表和扫库能力</strong>：B+ 树只需要扫描叶子节点，而 B 树需要扫描整棵树，因此 B+ 树更适合大规模数据的扫描和查询。</li>
</ol>
<h2 id="在-MySQL-中存储金额数据，应该使用什么数据类型"><a href="#在-MySQL-中存储金额数据，应该使用什么数据类型" class="headerlink" title="在 MySQL 中存储金额数据，应该使用什么数据类型"></a>在 MySQL 中存储金额数据，应该使用什么数据类型</h2><ul>
<li><strong>DECIMAL 数据类型</strong>：适用于需要高精度的金额数据。</li>
<li><strong>BIGINT 数据类型</strong>：如果金额的精度要求不高，也可以使用 <code>BIGINT</code> 来存储金额。</li>
</ul>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> accounts (</span><br><span class="line">  account_id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  balance <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NOT NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="左连接、右连接和内连接的区别"><a href="#左连接、右连接和内连接的区别" class="headerlink" title="左连接、右连接和内连接的区别"></a>左连接、右连接和内连接的区别</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>内连接查询的是两张表或者多个表的交集，也就是两张表的公共部分。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.id <span class="operator">=</span> table2.id;</span><br></pre></td></tr></table></figure>

<h3 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h3><p>左连接以左表（<code>FROM</code> 子句中的表）为基础，根据 <code>ON</code> 后给出的条件将两表连接起来，最终的结果会将左表所有的信息列出，而右表只列出 <code>ON</code> 条件与左表满足的部分，其余部分为空。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.id <span class="operator">=</span> table2.id;</span><br></pre></td></tr></table></figure>

<h3 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h3><p>右连接以右表为基础，根据 <code>ON</code> 后给出的条件将两表连接起来，最终的结果会将右表所有的信息列出，而左表只列出 <code>ON</code> 条件与右表满足的部分，其余部分为空。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1.id <span class="operator">=</span> table2.id;</span><br></pre></td></tr></table></figure>

<p>通过这些方法和工具，可以有效地定位和优化 MySQL 中的慢查询，提高数据库的性能和响应速度。</p>
]]></content>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql左右连接踩坑</title>
    <url>/2024/05/16/mysql%E5%B7%A6%E5%8F%B3%E8%BF%9E%E6%8E%A5%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<hr>
<h1 id="LEFT-JOIN-遇到了结果集重复问题，小小探究一下"><a href="#LEFT-JOIN-遇到了结果集重复问题，小小探究一下" class="headerlink" title="LEFT JOIN 遇到了结果集重复问题，小小探究一下"></a>LEFT JOIN 遇到了结果集重复问题，小小探究一下</h1><h2 id="1-LEFT-JOIN-导致结果集重复"><a href="#1-LEFT-JOIN-导致结果集重复" class="headerlink" title="1. LEFT JOIN 导致结果集重复"></a>1. LEFT JOIN 导致结果集重复</h2><h3 id="1-1-问题描述"><a href="#1-1-问题描述" class="headerlink" title="1.1 问题描述"></a>1.1 问题描述</h3><p>在使用 LEFT JOIN 时，如果右表中的连接键（key）存在重复值，会导致结果集重复。</p>
<h3 id="1-2-示例数据"><a href="#1-2-示例数据" class="headerlink" title="1.2 示例数据"></a>1.2 示例数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">6</span>) unsigned <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> `<span class="keyword">user</span>` (`id`, `name`) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Yang Lunlun&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Li dawei&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;Zhang san&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;Wang wu&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `user_addr` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">6</span>) unsigned <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `addr` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> `user_addr` (`id`, `name`, `addr`) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Yang Lunlun&#x27;</span>, <span class="string">&#x27;Hangzhou&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Li dawei&#x27;</span>, <span class="string">&#x27;Zhongshan&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;Li dawei&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;Li Meimei&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;Zhang san&#x27;</span>, <span class="string">&#x27;Xiamen&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="1-3-错误示例"><a href="#1-3-错误示例" class="headerlink" title="1.3 错误示例"></a>1.3 错误示例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user.id, user.name, user_addr.addr </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_addr </span><br><span class="line"><span class="keyword">ON</span> user.name <span class="operator">=</span> user_addr.name;</span><br></pre></td></tr></table></figure>

<p><strong>问题</strong>：<code>user.name</code> 在 <code>user_addr</code> 表中存在重复值（如 <code>Li dawei</code>），导致结果集重复。</p>
<h3 id="1-4-解决方案"><a href="#1-4-解决方案" class="headerlink" title="1.4 解决方案"></a>1.4 解决方案</h3><p>确保右表中的连接键是唯一的。如果无法保证唯一性，可以通过以下方式解决：</p>
<ul>
<li><p>使用 <code>DISTINCT</code> 去重：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> user.id, user.name, user_addr.addr </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_addr </span><br><span class="line"><span class="keyword">ON</span> user.name <span class="operator">=</span> user_addr.name;</span><br></pre></td></tr></table></figure>
</li>
<li><p>或者在右表中使用聚合函数（如 <code>GROUP BY</code>）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user.id, user.name, <span class="built_in">MAX</span>(user_addr.addr) <span class="keyword">AS</span> addr </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_addr </span><br><span class="line"><span class="keyword">ON</span> user.name <span class="operator">=</span> user_addr.name</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> user.id, user.name;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-LEFT-JOIN-的筛选条件问题"><a href="#2-LEFT-JOIN-的筛选条件问题" class="headerlink" title="2. LEFT JOIN 的筛选条件问题"></a>2. LEFT JOIN 的筛选条件问题</h2><h3 id="2-1-问题描述"><a href="#2-1-问题描述" class="headerlink" title="2.1 问题描述"></a>2.1 问题描述</h3><p>在 LEFT JOIN 中，<code>ON</code> 子句中的条件只对右表起作用，而不会影响左表。如果需要筛选左表的条件，应该放在 <code>WHERE</code> 子句中，而不是 <code>ON</code> 子句中。</p>
<h3 id="2-2-错误示例"><a href="#2-2-错误示例" class="headerlink" title="2.2 错误示例"></a>2.2 错误示例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user.id, user.name, user_addr.addr </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_addr </span><br><span class="line"><span class="keyword">ON</span> user.name <span class="operator">=</span> <span class="string">&#x27;Yang Lunlun&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> user.name <span class="operator">=</span> user_addr.name;</span><br></pre></td></tr></table></figure>

<p><strong>问题</strong>：将筛选左表的条件 <code>user.name = &#39;Yang Lunlun&#39;</code> 放在了 <code>ON</code> 子句中，导致返回的结果条数仍然是 4 条。</p>
<h3 id="2-3-正确示例"><a href="#2-3-正确示例" class="headerlink" title="2.3 正确示例"></a>2.3 正确示例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user.id, user.name, user_addr.addr </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_addr </span><br><span class="line"><span class="keyword">ON</span> user.name <span class="operator">=</span> user_addr.name</span><br><span class="line"><span class="keyword">WHERE</span> user.name <span class="operator">=</span> <span class="string">&#x27;Yang Lunlun&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong>：返回的结果条数是 1 条。</p>
<h3 id="2-4-解释"><a href="#2-4-解释" class="headerlink" title="2.4 解释"></a>2.4 解释</h3><ul>
<li><code>ON</code> 子句中的条件只对右表起作用，控制左表的条件应该放在 <code>WHERE</code> 子句中。</li>
<li>如果将筛选左表的条件放在 <code>ON</code> 子句中，会导致 LEFT JOIN 的行为不符合预期。</li>
</ul>
<hr>
]]></content>
  </entry>
  <entry>
    <title>mysql千万数据视图优化</title>
    <url>/2024/10/12/mysql%E5%8D%83%E4%B8%87%E6%95%B0%E6%8D%AE%E8%A7%86%E5%9B%BE%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h4 id="收到了个需求，客户合同视图的表请求超时了，数据量在千万级别。听说是上一个离职的同事写的，让我来looklook。"><a href="#收到了个需求，客户合同视图的表请求超时了，数据量在千万级别。听说是上一个离职的同事写的，让我来looklook。" class="headerlink" title="收到了个需求，客户合同视图的表请求超时了，数据量在千万级别。听说是上一个离职的同事写的，让我来looklook。"></a>收到了个需求，客户合同视图的表请求超时了，数据量在千万级别。听说是上一个离职的同事写的，让我来looklook。</h4><h2 id="一、数据规模与分布假设"><a href="#一、数据规模与分布假设" class="headerlink" title="一、数据规模与分布假设"></a>一、数据规模与分布假设</h2><h3 id="1-各表数据分布模拟"><a href="#1-各表数据分布模拟" class="headerlink" title="1. 各表数据分布模拟"></a>1. 各表数据分布模拟</h3><table>
<thead>
<tr>
<th>表名</th>
<th>数据量</th>
<th>索引情况（优化前）</th>
<th>典型查询条件</th>
</tr>
</thead>
<tbody><tr>
<td>contract_main</td>
<td>800万</td>
<td>主键索引</td>
<td>status, create_date</td>
</tr>
<tr>
<td>contract_attachment</td>
<td>500万</td>
<td>contract_id单列索引</td>
<td>file_size, upload_time</td>
</tr>
<tr>
<td>contract_approve</td>
<td>300万</td>
<td>无索引</td>
<td>approve_status</td>
</tr>
<tr>
<td>contract_payment</td>
<td>100万</td>
<td>contract_id单列索引</td>
<td>payment_date</td>
</tr>
<tr>
<td>contract_log</td>
<td>80万</td>
<td>无索引</td>
<td>operate_type</td>
</tr>
<tr>
<td>contract_relation</td>
<td>20万</td>
<td>联合索引(src_id,dest_id)</td>
<td>relation_type</td>
</tr>
</tbody></table>
<h3 id="2-典型慢查询特征"><a href="#2-典型慢查询特征" class="headerlink" title="2. 典型慢查询特征"></a>2. 典型慢查询特征</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 原始问题SQL（简化版）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    c.id,</span><br><span class="line">    (<span class="keyword">SELECT</span> name <span class="keyword">FROM</span> contract_detail <span class="keyword">WHERE</span> contract_id <span class="operator">=</span> c.id) <span class="keyword">AS</span> detail_name,</span><br><span class="line">    a.sign_date,</span><br><span class="line">    p.total_amount,</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">FROM</span> contract_main c</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> contract_attachment a <span class="keyword">ON</span> c.id <span class="operator">=</span> a.contract_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> contract_payment p <span class="keyword">ON</span> c.id <span class="operator">=</span> p.contract_id</span><br><span class="line"><span class="keyword">WHERE</span> c.status <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">AND</span> a.file_size <span class="operator">&gt;</span> <span class="number">1048576</span>  <span class="comment">-- 1MB</span></span><br><span class="line">  <span class="keyword">AND</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> contract_approve <span class="keyword">WHERE</span> contract_id <span class="operator">=</span> c.id) <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> contract_relation <span class="keyword">WHERE</span> src_id <span class="operator">=</span> c.id)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> c.create_date <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">20</span> <span class="keyword">OFFSET</span> <span class="number">10000</span>;</span><br></pre></td></tr></table></figure>

<h2 id="二、针对性优化方案"><a href="#二、针对性优化方案" class="headerlink" title="二、针对性优化方案"></a>二、针对性优化方案</h2><h3 id="1-索引优化策略（先检查失效的索引）"><a href="#1-索引优化策略（先检查失效的索引）" class="headerlink" title="1. 索引优化策略（先检查失效的索引）"></a>1. 索引优化策略（先检查失效的索引）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 复合索引优化</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> contract_main <span class="keyword">ADD</span> INDEX idx_status_created(status, create_date);</span><br><span class="line"><span class="keyword">ALTER TABLE</span> contract_attachment <span class="keyword">ADD</span> INDEX idx_contractid_filesize(contract_id, file_size);</span><br><span class="line"><span class="keyword">ALTER TABLE</span> contract_approve <span class="keyword">ADD</span> INDEX idx_contractid(contract_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 覆盖索引示例</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_cover_main <span class="keyword">ON</span> contract_main(id, status, create_date);</span><br></pre></td></tr></table></figure>

<h3 id="2-执行计划关键指标变化对比"><a href="#2-执行计划关键指标变化对比" class="headerlink" title="2. 执行计划关键指标变化对比"></a>2. 执行计划关键指标变化对比</h3><table>
<thead>
<tr>
<th>指标</th>
<th>优化前</th>
<th>优化后</th>
</tr>
</thead>
<tbody><tr>
<td>扫描行数</td>
<td>800万+500万+300万</td>
<td>5万+1.2万+0.3万</td>
</tr>
<tr>
<td>执行时间</td>
<td>18.7秒</td>
<td>0.3秒</td>
</tr>
<tr>
<td>临时表使用</td>
<td>3次</td>
<td>0次</td>
</tr>
<tr>
<td>文件排序</td>
<td>Using filesort</td>
<td>Using index</td>
</tr>
</tbody></table>
<h3 id="3-子查询改造方案"><a href="#3-子查询改造方案" class="headerlink" title="3. 子查询改造方案"></a>3. 子查询改造方案</h3><p><strong>问题点</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> contract_approve <span class="keyword">WHERE</span> contract_id <span class="operator">=</span> c.id) <span class="operator">&gt;</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><strong>优化步骤</strong>：</p>
<ol>
<li>转换为JOIN查询</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> contract_id </span><br><span class="line">    <span class="keyword">FROM</span> contract_approve </span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> contract_id</span><br><span class="line">    <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">) ca <span class="keyword">ON</span> c.id <span class="operator">=</span> ca.contract_id</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加物化视图（适合高频查询）</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> MATERIALIZED <span class="keyword">VIEW</span> mv_approve_count </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> contract_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> cnt</span><br><span class="line"><span class="keyword">FROM</span> contract_approve</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> contract_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_mv_approve <span class="keyword">ON</span> mv_approve_count(contract_id);</span><br></pre></td></tr></table></figure>

<h3 id="4-分页查询优化"><a href="#4-分页查询优化" class="headerlink" title="4. 分页查询优化"></a>4. 分页查询优化</h3><p><strong>问题点</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LIMIT <span class="number">20</span> <span class="keyword">OFFSET</span> <span class="number">10000</span>  <span class="comment">-- 深度分页性能差</span></span><br></pre></td></tr></table></figure>

<p><strong>优化方案</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 基于游标的分页（假设create_date是唯一排序字段）</span></span><br><span class="line"><span class="keyword">SELECT</span> ... </span><br><span class="line"><span class="keyword">WHERE</span> create_date <span class="operator">&lt;</span> <span class="string">&#x27;2023-06-01&#x27;</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> create_date <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-冷热数据分离"><a href="#5-冷热数据分离" class="headerlink" title="5. 冷热数据分离"></a>5. 冷热数据分离</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 历史数据归档（按时间分区）</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> contract_main </span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (<span class="keyword">YEAR</span>(create_date)) (</span><br><span class="line">    <span class="keyword">PARTITION</span> p2023 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2024</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p2022 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2023</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p_hist <span class="keyword">VALUES</span> LESS THAN MAXVALUE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 热点数据单独处理</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> contract_main_hot <span class="keyword">LIKE</span> contract_main;</span><br><span class="line"><span class="keyword">INSERT INTO</span> contract_main_hot </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> contract_main </span><br><span class="line"><span class="keyword">WHERE</span> create_date <span class="operator">&gt;</span> <span class="string">&#x27;2023-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="三、性能压测数据"><a href="#三、性能压测数据" class="headerlink" title="三、性能压测数据"></a>三、性能压测数据</h2><h3 id="1-不同并发下的QPS对比"><a href="#1-不同并发下的QPS对比" class="headerlink" title="1. 不同并发下的QPS对比"></a>1. 不同并发下的QPS对比</h3><table>
<thead>
<tr>
<th>并发数</th>
<th>优化前QPS</th>
<th>优化后QPS</th>
<th>提升倍数</th>
</tr>
</thead>
<tbody><tr>
<td>50</td>
<td>12</td>
<td>83</td>
<td>6.9x</td>
</tr>
<tr>
<td>100</td>
<td>5</td>
<td>67</td>
<td>13.4x</td>
</tr>
<tr>
<td>200</td>
<td>2（超时）</td>
<td>51</td>
<td>25.5x</td>
</tr>
</tbody></table>
<h3 id="2-资源消耗对比"><a href="#2-资源消耗对比" class="headerlink" title="2. 资源消耗对比"></a>2. 资源消耗对比</h3><table>
<thead>
<tr>
<th>指标</th>
<th>优化前</th>
<th>优化后</th>
</tr>
</thead>
<tbody><tr>
<td>CPU使用率</td>
<td>89%</td>
<td>32%</td>
</tr>
<tr>
<td>内存消耗</td>
<td>8.7GB</td>
<td>2.1GB</td>
</tr>
<tr>
<td>磁盘IOPS</td>
<td>4500</td>
<td>780</td>
</tr>
</tbody></table>
<h2 id="四、经验总结"><a href="#四、经验总结" class="headerlink" title="四、经验总结"></a>四、经验总结</h2><h3 id="1-千万级数据优化要点"><a href="#1-千万级数据优化要点" class="headerlink" title="1. 千万级数据优化要点"></a>1. 千万级数据优化要点</h3><ul>
<li><strong>索引设计</strong>：复合索引字段顺序遵循”高筛选度字段在前”原则</li>
<li><strong>查询改造</strong>：将WHERE中的子查询转换为JOIN操作</li>
<li><strong>数据分区</strong>：按时间维度进行分区，结合业务特点设计冷热分离</li>
<li><strong>分页策略</strong>：避免OFFSET分页，采用游标分页或seek method</li>
</ul>
<h3 id="2-避坑指南"><a href="#2-避坑指南" class="headerlink" title="2. 避坑指南"></a>2. 避坑指南</h3><ul>
<li><strong>隐式类型转换</strong>：确保WHERE条件字段类型与索引字段类型一致</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 错误示例（status是INT类型）</span></span><br><span class="line"><span class="keyword">WHERE</span> status <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>  <span class="comment">-- 导致索引失效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正确写法</span></span><br><span class="line"><span class="keyword">WHERE</span> status <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>索引失效场景</strong>：避免在索引列上使用函数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 错误示例</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(create_date) <span class="operator">=</span> <span class="number">2023</span>  <span class="comment">-- 索引失效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正确写法</span></span><br><span class="line"><span class="keyword">WHERE</span> create_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-12-31&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-监控建议"><a href="#3-监控建议" class="headerlink" title="3. 监控建议"></a>3. 监控建议</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 长期开启慢查询日志（保留7天）</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log <span class="operator">=</span> <span class="keyword">ON</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> long_query_time <span class="operator">=</span> <span class="number">0.5</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_queries_not_using_indexes <span class="operator">=</span> <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定期分析执行计划</span></span><br><span class="line">EXPLAIN FORMAT<span class="operator">=</span>JSON </span><br><span class="line"><span class="keyword">SELECT</span> <span class="comment">/*+ 实际业务SQL */</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-硬件配置建议（基于1800万数据量）"><a href="#4-硬件配置建议（基于1800万数据量）" class="headerlink" title="4. 硬件配置建议（基于1800万数据量）"></a>4. 硬件配置建议（基于1800万数据量）</h3><table>
<thead>
<tr>
<th>组件</th>
<th>最低配置</th>
<th>推荐配置</th>
</tr>
</thead>
<tbody><tr>
<td>CPU</td>
<td>8核</td>
<td>16核</td>
</tr>
<tr>
<td>内存</td>
<td>16GB</td>
<td>64GB</td>
</tr>
<tr>
<td>存储</td>
<td>SSD 500GB</td>
<td>NVMe SSD 1TB</td>
</tr>
<tr>
<td>连接数</td>
<td>max_connections&#x3D;500</td>
<td>max_connections&#x3D;2000</td>
</tr>
<tr>
<td>&#96;&#96;&#96;</td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>sql优化</category>
      </categories>
  </entry>
  <entry>
    <title>mysql索引和事务</title>
    <url>/2024/09/24/mysql%E7%B4%A2%E5%BC%95%E5%92%8C%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="MySQL-基础"><a href="#MySQL-基础" class="headerlink" title="MySQL 基础"></a>MySQL 基础</h1><h2 id="MySQL-的锁"><a href="#MySQL-的锁" class="headerlink" title="MySQL 的锁"></a>MySQL 的锁</h2><h3 id="1-表锁（Table-Locks）"><a href="#1-表锁（Table-Locks）" class="headerlink" title="1. 表锁（Table Locks）"></a>1. 表锁（Table Locks）</h3><p>表锁是 MySQL 中最粗粒度的锁，它会对整个表进行锁定。表锁分为两种：</p>
<ul>
<li><strong>读锁（共享锁，Shared Locks）</strong>：允许多个事务同时读取表中的数据，但不允许写入操作。读锁之间是兼容的，但与写锁互斥。</li>
<li><strong>写锁（排他锁，Exclusive Locks）</strong>：当一个事务对表加写锁时，其他事务不能对该表进行读写操作。写锁之间是互斥的。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LOCK TABLES my_table READ;  <span class="comment">-- 加读锁</span></span><br><span class="line">LOCK TABLES my_table WRITE; <span class="comment">-- 加写锁</span></span><br></pre></td></tr></table></figure>

<h3 id="2-行锁（Row-Locks）"><a href="#2-行锁（Row-Locks）" class="headerlink" title="2. 行锁（Row Locks）"></a>2. 行锁（Row Locks）</h3><p>行锁是 MySQL 中细粒度的锁，它只锁定表中的特定行。行锁主要用于支持高并发的事务操作，减少锁的粒度可以提高并发性能。行锁的实现依赖于存储引擎，例如 InnoDB 存储引擎支持行锁。</p>
<ul>
<li><strong>共享锁（S Lock）</strong>：允许多个事务同时读取同一行数据，但不允许写入。</li>
<li><strong>排他锁（X Lock）</strong>：当一个事务对某行加排他锁时，其他事务不能对该行进行读写操作。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_table <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>; <span class="comment">-- 加排他锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_table <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> LOCK <span class="keyword">IN</span> SHARE MODE; <span class="comment">-- 加共享锁</span></span><br></pre></td></tr></table></figure>

<h2 id="CHAR-和-VARCHAR-的区别"><a href="#CHAR-和-VARCHAR-的区别" class="headerlink" title="CHAR 和 VARCHAR 的区别"></a>CHAR 和 VARCHAR 的区别</h2><ul>
<li><strong>CHAR</strong>：设置多少长度就是多少长度，<code>CHAR</code> 的长度固定，所以存取的速度要比 <code>VARCHAR</code> 快。适用于固定长度的字符串，比如身份证、手机号等。</li>
<li><strong>VARCHAR</strong>：可以改变长度，<code>VARCHAR</code> 的空间利用率比 <code>CHAR</code> 高。</li>
</ul>
<h2 id="MySQL-的分页查询"><a href="#MySQL-的分页查询" class="headerlink" title="MySQL 的分页查询"></a>MySQL 的分页查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name LIMIT <span class="keyword">offset</span>（第几条数据开始）, count（显示多少条）;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>offset</code> 是开始选取的记录偏移量，从 0 开始。</li>
<li><code>count</code> 是每页显示的记录数。</li>
</ul>
<p>例如，查询第二页的数据，每页显示 10 条记录：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name LIMIT <span class="number">10</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h2 id="SELECT-语句完整的执行顺序"><a href="#SELECT-语句完整的执行顺序" class="headerlink" title="SELECT 语句完整的执行顺序"></a>SELECT 语句完整的执行顺序</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>FROM</code> 子句组装来自不同数据源的数据。</li>
<li><code>WHERE</code> 子句基于指定的条件对记录进行筛选。</li>
<li><code>GROUP BY</code> 子句将数据划分为多个分组。</li>
<li>使用聚集函数计算。</li>
<li>使用 <code>HAVING</code> 子句筛选分组。</li>
<li>计算所有的表达式。</li>
<li><code>SELECT</code> 的字段。</li>
<li>使用 <code>ORDER BY</code> 对结果集进行排序。</li>
</ol>
<h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h2><p>索引是一种数据结构，能够帮助我们快速检索数据库中的信息。</p>
<h3 id="MySQL-的索引类型"><a href="#MySQL-的索引类型" class="headerlink" title="MySQL 的索引类型"></a>MySQL 的索引类型</h3><ol>
<li><strong>主键索引</strong>：一张表只能有一个主键索引，主键索引列不能有空值和重复值。</li>
<li><strong>唯一索引</strong>：唯一索引不能有相同值，但允许为空。</li>
<li><strong>普通索引</strong>：允许出现重复值。</li>
<li><strong>组合索引</strong>：对多个字段建立一个联合索引，减少索引开销，遵循最左匹配原则。</li>
<li><strong>全文索引</strong>：<code>MyISAM</code> 引擎支持，通过建立倒排索引提升检索效率，广泛用于搜索引擎。</li>
</ol>
<h2 id="MySQL-索引的最左前缀匹配原则"><a href="#MySQL-索引的最左前缀匹配原则" class="headerlink" title="MySQL 索引的最左前缀匹配原则"></a>MySQL 索引的最左前缀匹配原则</h2><p><strong>定义</strong>：在复合索引中，查询条件必须从索引的最左边的列开始匹配，才能有效利用索引。换句话说，只有当查询条件包含了索引列的最左前缀时，MySQL 才能利用该复合索引进行优化查询。</p>
<p><strong>复合索引的结构</strong>：<br>假设有一个复合索引 <code>(column1, column2, column3)</code>，那么以下查询条件可以利用该索引：</p>
<ul>
<li><code>WHERE column1 = ?</code></li>
<li><code>WHERE column1 = ? AND column2 = ?</code></li>
<li><code>WHERE column1 = ? AND column2 = ? AND column3 = ?</code></li>
</ul>
<p>但是，以下查询条件不能有效利用该复合索引：</p>
<ul>
<li><code>WHERE column2 = ?</code>（没有包含最左列 <code>column1</code>）</li>
<li><code>WHERE column3 = ?</code>（没有包含最左列 <code>column1</code> 和 <code>column2</code>）</li>
<li><code>WHERE column2 = ? AND column3 = ?</code>（没有包含最左列 <code>column1</code>）</li>
</ul>
<h2 id="什么情况下需要建立索引"><a href="#什么情况下需要建立索引" class="headerlink" title="什么情况下需要建立索引"></a>什么情况下需要建立索引</h2><ol>
<li>主键自动创建唯一索引。</li>
<li>较频繁的作为查询条件的字段。</li>
<li>查询中排序的字段，查询中统计或者分组的字段。</li>
</ol>
<h2 id="聚簇索引与非聚簇索引区别"><a href="#聚簇索引与非聚簇索引区别" class="headerlink" title="聚簇索引与非聚簇索引区别"></a>聚簇索引与非聚簇索引区别</h2><ul>
<li><strong>聚簇索引</strong>：将数据存储与索引放到了一块，并且是按照一定的顺序组织的，找到索引也就是找到了数据。</li>
<li><strong>非聚簇索引</strong>：叶子节点不存储数据，存储数据的是数据行地址，也就是说根据索引查找的数据行的位置再读取磁盘查找数据。这个就有点类似于一本书的目录，我们要找第三章的第一节，那么我们现在目录里面找，找到对应的页码后再去对应页面看文章。</li>
</ul>
<h2 id="什么情况下-MySQL-的索引会失效"><a href="#什么情况下-MySQL-的索引会失效" class="headerlink" title="什么情况下 MySQL 的索引会失效"></a>什么情况下 MySQL 的索引会失效</h2><ol>
<li><strong>最佳左前缀法则</strong>：在使用联合索引时，必须遵循最左前缀法则，否则索引可能不会生效。</li>
<li><strong>主键插入顺序</strong>：如果插入数据的顺序与主键索引的顺序不一致，可能会导致索引失效。</li>
<li><strong>计算、函数、类型转换</strong>：对索引列使用计算或函数，或进行类型转换，可能会导致索引失效。</li>
<li><strong>范围查询右边的列索引失效</strong>：在使用范围查询时，范围条件右边的列索引可能不会生效。</li>
<li><strong>不等于操作符</strong>：使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符可能会导致索引失效。</li>
<li><strong>IS NOT NULL</strong>：<code>IS NOT NULL</code> 可能无法使用索引。</li>
<li><strong>LIKE 查询</strong>：如果 <code>LIKE</code> 查询以通配符 <code>%</code> 开头，索引可能失效。</li>
<li><strong>OR 语句</strong>：在 <code>OR</code> 前后只要存在非索引的列，都会导致索引失效。</li>
<li><strong>字符集不统一</strong>：数据库和表的字符集如果不统一使用 <code>utf8mb4</code>，可能会导致索引失效。</li>
<li><strong>隐式类型转换</strong>：在使用字符串和数字比较时，MySQL 会自动将字符串转换为数字，这可能会导致索引失效。</li>
<li><strong>联合索引非最左匹配</strong>：如果查询条件不符合联合索引的最左匹配原则，索引可能会失效。</li>
<li><strong>索引列上有计算</strong>：在索引列上进行计算，如 <code>id + 1 = 2</code>，会导致索引失效。</li>
<li><strong>索引列使用了函数</strong>：对索引列使用函数，如 <code>SUBSTR(id_no,1,3)</code>，会导致索引失效。</li>
</ol>
<h2 id="MySQL-事务基本要素（事务的特性）ACID"><a href="#MySQL-事务基本要素（事务的特性）ACID" class="headerlink" title="MySQL 事务基本要素（事务的特性）ACID"></a>MySQL 事务基本要素（事务的特性）ACID</h2><p>事务是数据库操作的一个单元，可以包含一个或多个数据库操作（如插入、更新、删除）。</p>
<ol>
<li><strong>原子性（Atomicity）</strong>：事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体。</li>
<li><strong>一致性（Consistency）</strong>：事务开始前和结束后，数据库的完整性约束没有被破坏。比如 A 向 B 转账，不可能 A 扣了钱，B 却没收到。</li>
<li><strong>隔离性（Isolation）</strong>：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如 A 正在从一张银行卡中取钱，在 A 取钱的过程结束前，B 不能向这张卡转账。</li>
<li><strong>持久性（Durability）</strong>：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</li>
</ol>
<h2 id="事务的并发问题"><a href="#事务的并发问题" class="headerlink" title="事务的并发问题"></a>事务的并发问题</h2><ol>
<li><strong>脏读</strong>：事务 A 读取了事务 B 更新的数据，然后 B 回滚操作，那么 A 读取到的数据是脏数据。</li>
<li><strong>不可重复读</strong>：事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新并提交，导致事务 A 多次读取同一数据时，结果不一致。</li>
<li><strong>幻读</strong>：系统管理员 A 将数据库中所有学生的成绩从具体分数改为 ABCDE 等级，但是系统管理员 B 就在这个时候插入了一条具体分数的记录，当系统管理员 A 改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</li>
</ol>
<p><strong>小结</strong>：<br>不可重复读和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表。</p>
<h2 id="如何解决脏读、幻读、不可重复读"><a href="#如何解决脏读、幻读、不可重复读" class="headerlink" title="如何解决脏读、幻读、不可重复读"></a>如何解决脏读、幻读、不可重复读</h2><ul>
<li><strong>脏读</strong>：隔离级别为读提交、可重复读、串行化可以解决脏读。</li>
<li><strong>不可重复读</strong>：隔离级别为可重复读、串行化可以解决不可重复读。</li>
<li><strong>幻读</strong>：隔离级别为串行化可以解决幻读，通过 MVCC + 区间锁可以解决幻读。</li>
</ul>
<h2 id="什么是-MVCC"><a href="#什么是-MVCC" class="headerlink" title="什么是 MVCC"></a>什么是 MVCC</h2><p>MVCC，全称为多版本并发控制（Multiversion Concurrency Control），是一种用于管理数据库并发访问的技术。它允许多个事务同时访问同一数据集合，同时保持数据的一致性和隔离性，而不会相互干扰。</p>
<h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><ol>
<li><strong>读未提交（Read Uncommitted）</strong>：允许脏读，一个事务可以读取另一个未提交事务的更改。</li>
<li><strong>读已提交（Read Committed）</strong>：只能读取到已经提交的数据。</li>
<li><strong>可重复读（Repeated Read）</strong>：保证在同一个事务中，多次读取同一数据的结果是一致的。可以避免不可重复读的问题，但仍然可能遇到幻读。MySQL 的 InnoDB 默认级别。</li>
<li><strong>串行化（Serializable）</strong>：最高的隔离级别。事务之间完全隔离，适用于数据一致性要求极高的场景，从而避免脏读、不可重复读和幻读。但是，这种隔离级别可能导致性能显著下降。</li>
</ol>
<h2 id="事务的传播级别（7-个）"><a href="#事务的传播级别（7-个）" class="headerlink" title="事务的传播级别（7 个）"></a>事务的传播级别（7 个）</h2><ol>
<li><strong>Propagation.REQUIRED（默认）</strong>：<ul>
<li>如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li>
</ul>
</li>
<li><strong>Propagation.SUPPORTS</strong>：<ul>
<li>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务方式执行。</li>
</ul>
</li>
<li><strong>Propagation.MANDATORY</strong>：<ul>
<li>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li>
</ul>
</li>
<li><strong>Propagation.REQUIRES_NEW</strong>：<ul>
<li>总是创建一个新的事务，如果当前存在事务，则将当前事务挂起。</li>
</ul>
</li>
<li><strong>Propagation.NOT_SUPPORTED</strong>：<ul>
<li>总是以非事务方式执行，如果当前存在事务，则将当前事务挂起。</li>
</ul>
</li>
<li><strong>Propagation.NEVER</strong>：<ul>
<li>总是以非事务方式执行，如果当前存在事务，则抛出异常。</li>
</ul>
</li>
<li><strong>Propagation.NESTED</strong>：<ul>
<li>如果当前存在事务，则创建一个嵌套事务，嵌套事务可以回滚而不影响到外部事务；如果当前没有事务，则创建一个新的事务。</li>
</ul>
</li>
</ol>
<h2 id="索引不适合哪些场景"><a href="#索引不适合哪些场景" class="headerlink" title="索引不适合哪些场景"></a>索引不适合哪些场景</h2><ul>
<li><strong>数据量少的表</strong>：不适合加索引。</li>
<li><strong>更新比较频繁的字段</strong>：不适合加索引。</li>
<li><strong>离散性低的字段</strong>：不适合加索引（如性别）。</li>
</ul>
]]></content>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>spring 3.4的改变，依赖冲突</title>
    <url>/2024/05/02/spring-3-4%E7%9A%84%E6%94%B9%E5%8F%98%EF%BC%8C%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/</url>
    <content><![CDATA[<p>以下是将您提供的内容转换为优雅的 Markdown 格式后的版本：</p>
<hr>
<h1 id="JDK17-Spring-Boot-3-4-0-项目开发中的那些坑"><a href="#JDK17-Spring-Boot-3-4-0-项目开发中的那些坑" class="headerlink" title="JDK17 + Spring Boot 3.4.0 项目开发中的那些坑"></a>JDK17 + Spring Boot 3.4.0 项目开发中的那些坑</h1><h2 id="一、集成-MyBatis-Plus-3-5-9-的问题"><a href="#一、集成-MyBatis-Plus-3-5-9-的问题" class="headerlink" title="一、集成 MyBatis Plus 3.5.9 的问题"></a>一、集成 MyBatis Plus 3.5.9 的问题</h2><h3 id="1-1-依赖引入问题"><a href="#1-1-依赖引入问题" class="headerlink" title="1.1 依赖引入问题"></a>1.1 依赖引入问题</h3><p>不能只引入 <code>mybatis-plus-spring-boot3-starter</code> 依赖了，还需要配合 <code>mybatis-plus-jsqlparser</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-版本统一管理"><a href="#1-2-版本统一管理" class="headerlink" title="1.2 版本统一管理"></a>1.2 版本统一管理</h3><p>使用 <code>mybatis-plus-bom</code> 来统一管理版本。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>详情请见：<a href="https://baomidou.com/getting-started/install/">MyBatis-Plus 安装指南</a>。</p>
<h2 id="二、集成-Knife4j-OpenApi3"><a href="#二、集成-Knife4j-OpenApi3" class="headerlink" title="二、集成 Knife4j-OpenApi3"></a>二、集成 Knife4j-OpenApi3</h2><h3 id="2-1-依赖引入"><a href="#2-1-依赖引入" class="headerlink" title="2.1 依赖引入"></a>2.1 依赖引入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-实体类写法变动"><a href="#2-2-实体类写法变动" class="headerlink" title="2.2 实体类写法变动"></a>2.2 实体类写法变动</h3><p>不再使用 <code>@ApiModel</code> 和 <code>@ApiModelProperty</code>，而是使用 <code>@Schema</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Schema(name = &quot;OaDeptDTO对象&quot;, description = &quot;部门表&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OaDeptDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Serial</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;主键&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;父部门id&quot;, defaultValue = &quot;0&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;部门名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String deptName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;部门编码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String deptCode;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;状态（0正常 1停用）&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-接口类写法"><a href="#2-3-接口类写法" class="headerlink" title="2.3 接口类写法"></a>2.3 接口类写法</h3><p>不再使用 <code>@Api</code> 和 <code>@ApiOperation</code>，而是使用 <code>@Tag</code> 和 <code>@Operation</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Tag(name = &quot;部门表&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/oa/dept&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OaDeptController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OaDeptAppService oaDeptAppService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;新增部门&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Boolean&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> OaDeptDTO oaDept)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(oaDeptAppService.add(oaDept));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-注意事项"><a href="#2-4-注意事项" class="headerlink" title="2.4 注意事项"></a>2.4 注意事项</h3><p>如果项目中存在全局异常拦截类（<code>@RestControllerAdvice</code> 或 <code>@ControllerAdvice</code>），访问接口文档会报错。这是版本的 bug。解决方案是升级 <code>springdoc-openapi-starter-webmvc-ui</code> 到 2.7.0。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;knife4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、接口写法变动"><a href="#三、接口写法变动" class="headerlink" title="三、接口写法变动"></a>三、接口写法变动</h2><h3 id="3-1-问题描述"><a href="#3-1-问题描述" class="headerlink" title="3.1 问题描述"></a>3.1 问题描述</h3><p>之前的写法在 Spring Boot 3.4.0 中不再适用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Operation(summary = &quot;查询数据明细&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;OaRoleVO&gt; <span class="title function_">detail</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.ok(oaRoleAppService.detail(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-解决方案"><a href="#3-2-解决方案" class="headerlink" title="3.2 解决方案"></a>3.2 解决方案</h3><p>明确指定 <code>@PathVariable</code> 的参数名。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Operation(summary = &quot;查询数据明细&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;OaRoleVO&gt; <span class="title function_">detail</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.ok(oaRoleAppService.detail(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>spring再次踩坑之前的依赖问题</title>
    <url>/2024/04/16/spring%E5%86%8D%E6%AC%A1%E8%B8%A9%E5%9D%91%E4%B9%8B%E5%89%8D%E7%9A%84%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Spring-Boot-和-MySQL-相关"><a href="#Spring-Boot-和-MySQL-相关" class="headerlink" title="Spring Boot 和 MySQL 相关"></a>Spring Boot 和 MySQL 相关</h1><p>在使用 Spring Boot 和 MySQL 等技术开发项目时，又又遇到了依赖问题。</p>
<h2 id="1-Spring-Boot-Starter-Web-的作用"><a href="#1-Spring-Boot-Starter-Web-的作用" class="headerlink" title="1. Spring Boot Starter Web 的作用"></a>1. Spring Boot Starter Web 的作用</h2><p>在使用 IDEA 创建 Spring Boot 项目时，<code>spring-boot-starter-web</code> 依赖会被自动添加。咋会这样呢？今天，让我们一探究竟。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-1-加或不加-Spring-Boot-Starter-Web-的区别"><a href="#1-1-加或不加-Spring-Boot-Starter-Web-的区别" class="headerlink" title="1.1 加或不加 Spring Boot Starter Web 的区别"></a>1.1 加或不加 Spring Boot Starter Web 的区别</h3><p>答案是肯定的，有区别！在 Spring Boot 出现之前，开发 Web 项目需要大量的 XML 配置，手动导入依赖，配置 <code>web.xml</code> 来拦截请求，还需要在外部配置 Tomcat 容器，每次启动项目都要执行 <code>tomcat:run</code>，才能访问项目资源。</p>
<p>而 Spring Boot 的出现极大地简化了这一切。它支持容器的自动配置，默认使用 Tomcat 容器。如果没有添加 <code>spring-boot-starter-web</code> 依赖，项目将无法启动，因为 Spring Boot 项目需要在容器中运行。这个依赖已经为我们配置好了 Tomcat 容器，无需再手动配置。</p>
<h3 id="1-2-如何排除-Spring-Boot-Starter-Web-依赖中的-Tomcat，添加其他容器"><a href="#1-2-如何排除-Spring-Boot-Starter-Web-依赖中的-Tomcat，添加其他容器" class="headerlink" title="1.2 如何排除 Spring Boot Starter Web 依赖中的 Tomcat，添加其他容器"></a>1.2 如何排除 Spring Boot Starter Web 依赖中的 Tomcat，添加其他容器</h3><p>有时，我们可能需要使用其他容器，如 Jetty。可以通过排除默认的 Tomcat 容器并添加新的容器依赖来实现。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-MySQL-驱动的区别"><a href="#2-MySQL-驱动的区别" class="headerlink" title="2. MySQL 驱动的区别"></a>2. MySQL 驱动的区别</h2><p>在连接 MySQL 数据库时，我们经常使用 <code>com.mysql.jdbc.Driver</code> 和 <code>com.mysql.cj.jdbc.Driver</code>。它们有什么区别呢？</p>
<h3 id="2-1-JDBC-连接-MySQL-5-需用-com-mysql-jdbc-Driver"><a href="#2-1-JDBC-连接-MySQL-5-需用-com-mysql-jdbc-Driver" class="headerlink" title="2.1 JDBC 连接 MySQL 5 需用 com.mysql.jdbc.Driver"></a>2.1 JDBC 连接 MySQL 5 需用 <code>com.mysql.jdbc.Driver</code></h3><p>对于 MySQL 5，使用以下配置即可：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-JDBC-连接-MySQL-6-需用-com-mysql-cj-jdbc-Driver，同时需要指定时区-serverTimezone"><a href="#2-2-JDBC-连接-MySQL-6-需用-com-mysql-cj-jdbc-Driver，同时需要指定时区-serverTimezone" class="headerlink" title="2.2 JDBC 连接 MySQL 6 需用 com.mysql.cj.jdbc.Driver，同时需要指定时区 serverTimezone"></a>2.2 JDBC 连接 MySQL 6 需用 <code>com.mysql.cj.jdbc.Driver</code>，同时需要指定时区 <code>serverTimezone</code></h3><p>对于 MySQL 6，需要指定时区 <code>serverTimezone</code>，并且驱动类名也有所不同：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-设定时区时，serverTimezone-UTC-比中国时间早-8-个小时，若在中国，可设置-serverTimezone-Shanghai-或者-serverTimezone-Hongkong"><a href="#2-3-设定时区时，serverTimezone-UTC-比中国时间早-8-个小时，若在中国，可设置-serverTimezone-Shanghai-或者-serverTimezone-Hongkong" class="headerlink" title="2.3 设定时区时，serverTimezone=UTC 比中国时间早 8 个小时，若在中国，可设置 serverTimezone=Shanghai 或者 serverTimezone=Hongkong"></a>2.3 设定时区时，<code>serverTimezone=UTC</code> 比中国时间早 8 个小时，若在中国，可设置 <code>serverTimezone=Shanghai</code> 或者 <code>serverTimezone=Hongkong</code></h3><p>在中国，建议设置为 <code>Shanghai</code> 或 <code>Hongkong</code>：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h3><p>如果使用 <code>mysql-connector-java</code> 6.0 以上版本，依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时，必须使用 <code>com.mysql.cj.jdbc.Driver</code>，否则会报错。</p>
]]></content>
  </entry>
  <entry>
    <title>数据库死锁问题</title>
    <url>/2024/10/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="mysql数据库中的死锁问题：预防与解决"><a href="#mysql数据库中的死锁问题：预防与解决" class="headerlink" title="mysql数据库中的死锁问题：预防与解决"></a>mysql数据库中的死锁问题：预防与解决</h1><p>在高并发的数据库应用场景下，死锁是一个常见的问题。死锁会导致事务处理速度减慢，甚至完全停止。官方在 8.0.18 版本对死锁检测进行了优化, 将原先的死锁检测机制MySQL 死锁检测源码分析 交给了 background thread 来处理, 具体的 Patch 链接: MySQL-8.0.18 死锁检测优化. 具体的思路是将当前事务系统的 lock 信息打一份快照, 由这份快照判断是否存在回环, 假如存在死锁即唤醒等待事务.<br>而在 8.0.17 版本依然采用旧的死锁检测方法, 具体细节可以参考这篇文章: MySQL 死锁检测源码分析: 每次申请 lock 失败进入 wait 状态后触发一下死锁检测, 所以可以通过 gdb 调试的方法来梳理当时的锁依赖关系</p>
<p>本文从概念到遇到的场景记录一下死锁。</p>
<p>参考大神：<a href="https://www.bookstack.cn/read/aliyun-rds-core/5c190d6831b61c0a.md">https://www.bookstack.cn/read/aliyun-rds-core/5c190d6831b61c0a.md</a></p>
<h2 id="死锁的基本概念"><a href="#死锁的基本概念" class="headerlink" title="死锁的基本概念"></a>死锁的基本概念</h2><h3 id="什么是死锁？"><a href="#什么是死锁？" class="headerlink" title="什么是死锁？"></a>什么是死锁？</h3><p><strong>死锁</strong> 是指两个或多个事务在执行过程中，因为相互竞争资源而造成的一种僵局。具体到数据库环境中，这通常发生在多个事务试图锁定彼此已持有的资源时。在 MySQL 中，这意味着如果一个事务持有资源 A 并请求资源 B，而另一个事务持有资源 B 并请求资源 A，那么死锁就发生了。</p>
<p>在 MySQL 中，死锁通常表现为事务突然中止，并返回一个错误信息，指示中止的原因是由于锁定资源的冲突。例如，当两个事务都无法继续执行，因为它们都在等待对方释放锁时，MySQL 的 InnoDB 存储引擎会自动检测到这种情况并中断其中一个事务，以解锁并允许另一个事务继续执行。这种解决方案是必要的，因为如果不这样做，这些事务可能会无限期地等待下去，从而占用系统资源并影响数据库性能。</p>
<h3 id="理解-MySQL-中的死锁特征"><a href="#理解-MySQL-中的死锁特征" class="headerlink" title="理解 MySQL 中的死锁特征"></a>理解 MySQL 中的死锁特征</h3><p>监控系统日志和使用适当的工具可以帮助识别和分析死锁，从而采取相应的预防措施。</p>
<h2 id="死锁预防策略"><a href="#死锁预防策略" class="headerlink" title="死锁预防策略"></a>死锁预防策略</h2><h3 id="保持一致的加锁顺序"><a href="#保持一致的加锁顺序" class="headerlink" title="保持一致的加锁顺序"></a>保持一致的加锁顺序</h3><p>为了防止死锁的发生，一个有效的策略是在所有事务中采用一致的加锁顺序。当多个事务需要同时锁定多个资源时，应该确保每个事务请求锁的顺序相同。例如，如果有两个资源 R1 和 R2，事务 T1 和事务 T2 都需要访问，那么两个事务应该首先锁定 R1，然后锁定 R2。这样做可以减少死锁的可能性，因为避免了循环等待的情况。</p>
<h3 id="使用索引避免全表扫描"><a href="#使用索引避免全表扫描" class="headerlink" title="使用索引避免全表扫描"></a>使用索引避免全表扫描</h3><p>在 SQL 查询中使用合适的索引可以显著减少锁的竞争。当查询不使用索引时，MySQL 可能需要执行全表扫描，这会锁定大量不必要的行。确保查询通过使用有效的索引来限制锁定的行的范围，可以减少锁冲突的发生，从而减少死锁的机会。创建和维护良好的索引策略不仅可以提高查询性能，也有助于避免资源竞争导致的死锁。</p>
<h3 id="减少事务大小和持续时间"><a href="#减少事务大小和持续时间" class="headerlink" title="减少事务大小和持续时间"></a>减少事务大小和持续时间</h3><p>较小的事务和较短的事务持续时间可以减少死锁的机会。事务应该尽量做到简洁，只包含必要的操作，并尽快提交。长事务或大事务更可能与其他事务冲突，因为它们持有锁的时间更长。设计应用程序时，应考虑将大型操作拆分为多个小事务，以减少任何单个事务对资源的占用时间。</p>
<h3 id="使用锁超时和重试机制"><a href="#使用锁超时和重试机制" class="headerlink" title="使用锁超时和重试机制"></a>使用锁超时和重试机制</h3><p>在 MySQL 中设置适当的锁超时时间可以帮助防止事务永久等待资源。当事务因为锁资源而等待超过指定时间时，它将自动中止并释放其持有的所有锁。此外，应用程序可以实现重试逻辑，当事务由于锁竞争而失败时，可以在延迟几秒后自动重试。这种策略可以使应用程序在高并发环境下更为健壮。</p>
<h2 id="工具和技术"><a href="#工具和技术" class="headerlink" title="工具和技术"></a>工具和技术</h2><h3 id="死锁检测工具"><a href="#死锁检测工具" class="headerlink" title="死锁检测工具"></a>死锁检测工具</h3><p>在 MySQL 中管理和预防死锁的一个关键方面是能够有效地检测它们。以下是几种常用的死锁检测工具：</p>
<ul>
<li><p><strong>InnoDB 死锁日志</strong>：MySQL 的 InnoDB 存储引擎提供了内置的死锁日志功能，可以通过设置 <code>innodb_print_all_deadlocks</code> 到 <code>ON</code> 在错误日志中记录所有死锁事件。这使得管理员可以检查死锁发生的具体情况，分析导致死锁的查询和事务。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> innodb_print_all_deadlocks <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>SHOW ENGINE INNODB STATUS</strong>：这是一个强大的 SQL 命令，用于显示包括死锁信息在内的各种 InnoDB 的状态信息。它提供了关于最近的死锁，包括涉及的事务和等待的锁的详细信息，是日常检测和分析死锁的实用工具。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> ENGINE INNODB STATUS;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Percona Toolkit</strong>：Percona Toolkit 是一套开源的 MySQL 管理工具，其中包括 <code>pt-deadlock-logger</code> 工具。这个工具可以定期从 <code>SHOW ENGINE INNODB STATUS</code> 中提取死锁信息并记录到表中，方便历史死锁分析。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pt-deadlock-logger --user=root --password=your_password --host=localhost</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Performance Schema</strong>：MySQL 的性能模式（Performance Schema）可以配置来监控数据库操作，包括锁的使用情况。通过设置，它可以帮助识别频繁的锁冲突，这可能指示潜在的死锁风险。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> performance_schema <span class="operator">=</span> <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h3><p>性能监控是预防和解决死锁问题的另一个关键工具。以下是通过性能监控识别死锁模式的几种方式：</p>
<ul>
<li><strong>使用监控软件</strong>：工具如 Nagios、Zabbix 或 Prometheus 可以配置来监控 MySQL 的性能指标，如锁等待时间和事务持续时间。异常模式的检测可以帮助快速识别导致死锁的问题。</li>
<li><strong>日志分析</strong>：通过分析 MySQL 的查询日志和错误日志，可以找到导致高锁等待时间的查询。这些日志可以帮助识别死锁发生前的操作和模式。</li>
<li><strong>实时分析</strong>：一些高级的数据库性能监控工具（如 SolarWinds Database Performance Analyzer）提供实时分析和可视化，帮助快速识别并解决死锁问题。</li>
</ul>
<h2 id="死锁场景复现"><a href="#死锁场景复现" class="headerlink" title="死锁场景复现"></a>死锁场景复现</h2><p>我们可以使用两个简单的事务，它们互相持有对方需要的锁。这个例子中，我们假设有一个名为 <code>accounts</code> 的表，其中包含两列：<code>id</code> 和 <code>balance</code>。这个表用于存储账户信息，包括账户余额。</p>
<p>首先，确保你的 <code>accounts</code> 表有至少两行数据，我们将使用这两行数据来模拟死锁。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> accounts (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    balance <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> accounts (balance) <span class="keyword">VALUES</span> (<span class="number">100.00</span>), (<span class="number">200.00</span>);</span><br></pre></td></tr></table></figure>

<p>现在，我们将启动两个事务。事务 A 和事务 B 将同时运行，每个事务都试图更新另一个事务已经锁定的行，从而导致死锁。</p>
<p>打开两个 MySQL 客户端窗口，分别执行以下命令：</p>
<p>在客户端 A 中执行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">50</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 暂停几秒钟，给客户端 B 时间执行其 UPDATE</span></span><br><span class="line"><span class="comment">-- 模拟操作延迟，以便观察死锁</span></span><br></pre></td></tr></table></figure>

<p>在客户端 B 中执行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">30</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 暂停几秒钟，给客户端 A 时间执行其 UPDATE</span></span><br><span class="line"><span class="comment">-- 模拟操作延迟，以便观察死锁</span></span><br></pre></td></tr></table></figure>

<p>然后，在客户端 A 中继续：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">20</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 此时 A 正试图更新 B 已经锁定的行</span></span><br></pre></td></tr></table></figure>

<p>同时，在客户端 B 中继续：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">40</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 此时 B 正试图更新 A 已经锁定的行</span></span><br></pre></td></tr></table></figure>

<p>在上述步骤中，如果两个事务几乎同时执行，MySQL 将检测到死锁并中止其中一个事务，允许另一个事务继续执行。你会在其中一个客户端看到一个错误消息，指出事务因死锁而被回滚。</p>
<h2 id="如何解决死锁"><a href="#如何解决死锁" class="headerlink" title="如何解决死锁"></a>如何解决死锁</h2><p>当在 MySQL 中发生死锁时，及时且有效的处理是保证数据库稳定性和性能的关键。以下是一些解决死锁的策略：</p>
<h3 id="1-自动死锁检测和处理"><a href="#1-自动死锁检测和处理" class="headerlink" title="1. 自动死锁检测和处理"></a>1. 自动死锁检测和处理</h3><p>MySQL 的 InnoDB 存储引擎具有自动死锁检测功能，它会定期检查死锁的发生，并自动回滚其中一个事务以解锁系统。这通常是最简单的处理方式，因为它无需用户干预。发生死锁时，InnoDB 会选择牺牲成本最小的事务进行回滚，通常是修改行数最少的那个事务。</p>
<h3 id="2-增加锁等待超时"><a href="#2-增加锁等待超时" class="headerlink" title="2. 增加锁等待超时"></a>2. 增加锁等待超时</h3><p>通过设置合理的 <code>innodb_lock_wait_timeout</code> 参数，可以控制事务在被回滚前等待锁的最长时间。减小这个值可以减少死锁持续的时间，快速释放资源，尽管这可能会导致事务失败。例如，将超时时间设置为 15 秒：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> innodb_lock_wait_timeout <span class="operator">=</span> <span class="number">15</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-显示死锁信息"><a href="#3-显示死锁信息" class="headerlink" title="3. 显示死锁信息"></a>3. 显示死锁信息</h3><p>当检测到死锁后，通过 <code>SHOW ENGINE INNODB STATUS;</code> 命令可以获得有关最近死锁的详细信息，包括死锁发生的查询和涉及的表。这些信息对于分析死锁原因和采取预防措施非常有用。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> ENGINE INNODB STATUS;</span><br></pre></td></tr></table></figure>

<h3 id="4-优化事务设计"><a href="#4-优化事务设计" class="headerlink" title="4. 优化事务设计"></a>4. 优化事务设计</h3><ul>
<li><strong>减少事务大小</strong>：尽量避免大型事务操作，尤其是那些涉及多表或多行更新的。大型事务更容易与其他事务冲突。</li>
<li><strong>事务分解</strong>：如果可能，将大事务分解成几个小事务，这样可以减少持有锁的时间，降低死锁的风险。</li>
<li><strong>调整事务顺序</strong>：确保所有事务访问共享资源的顺序一致，从而避免循环等待的发生。</li>
</ul>
<h3 id="5-手动干预"><a href="#5-手动干预" class="headerlink" title="5. 手动干预"></a>5. 手动干预</h3><p>在一些情况下，自动处理可能不足以解决问题，或者需要更快地恢复系统。此时，数据库管理员可能需要手动干预：</p>
<ul>
<li><p><strong>杀死阻塞事务</strong>：使用 <code>SHOW PROCESSLIST</code> 命令查找长时间运行的事务，特别是那些阻塞其他事务的。然后使用 <code>KILL [process id]</code> 来终止事务。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> PROCESSLIST;</span><br><span class="line">KILL [process id];</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>重新调整业务逻辑</strong>：如果某个事务模式经常导致死锁，考虑从业务逻辑层面进行调整，比如改变数据访问模式或修改应用逻辑。</p>
</li>
</ul>
<h3 id="6-利用日志和监控"><a href="#6-利用日志和监控" class="headerlink" title="6. 利用日志和监控"></a>6. 利用日志和监控</h3><p>通过日志和监控工具追踪数据库操作，特别是在高负载情况下。这可以帮助识别可能导致死锁的操作，从而进行相应的调整。可以使用第三方工具如 Percona Monitoring and Management (PMM) 或 Oracle Enterprise Manager 来进行更深入的监控。</p>
<h2 id="业务场景：OA-系统中的流程表"><a href="#业务场景：OA-系统中的流程表" class="headerlink" title="业务场景：OA 系统中的流程表"></a>业务场景：OA 系统中的流程表</h2><p>假设我们在开发一个 OA（办公自动化）系统，其中有一个 <code>process</code> 表，用于存储工作流程的状态。每个工作流程可能涉及多个步骤，每个步骤由不同的用户完成。我们希望记录每个步骤的状态和时间戳。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> process (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    process_id <span class="type">INT</span>,</span><br><span class="line">    step <span class="type">INT</span>,</span><br><span class="line">    status <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    updated_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># OA系统流程审批中的MySQL死锁问题实战</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 一、典型业务场景：多级流程审批</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 1. 流程审批表结构</span></span><br><span class="line"><span class="code">```sql</span></span><br><span class="line"><span class="code">CREATE TABLE workflow_approval (</span></span><br><span class="line"><span class="code">    id BIGINT AUTO_INCREMENT PRIMARY KEY COMMENT &#x27;流程实例ID&#x27;,</span></span><br><span class="line"><span class="code">    current_step TINYINT NOT NULL DEFAULT 1 COMMENT &#x27;当前审批步骤&#x27;,</span></span><br><span class="line"><span class="code">    approver1_id INT COMMENT &#x27;一级审批人&#x27;,</span></span><br><span class="line"><span class="code">    approver2_id INT COMMENT &#x27;二级审批人&#x27;,</span></span><br><span class="line"><span class="code">    approver1_time DATETIME COMMENT &#x27;一级审批时间&#x27;,</span></span><br><span class="line"><span class="code">    approver2_time DATETIME COMMENT &#x27;二级审批时间&#x27;,</span></span><br><span class="line"><span class="code">    status TINYINT NOT NULL DEFAULT 0 COMMENT &#x27;0-待审批 1-已通过 2-已驳回&#x27;,</span></span><br><span class="line"><span class="code">    version INT NOT NULL DEFAULT 0 COMMENT &#x27;乐观锁版本号&#x27;</span></span><br><span class="line"><span class="code">) ENGINE=InnoDB;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-- 审批日志表</span></span><br><span class="line"><span class="code">CREATE TABLE approval_log (</span></span><br><span class="line"><span class="code">    log_id BIGINT AUTO_INCREMENT PRIMARY KEY,</span></span><br><span class="line"><span class="code">    workflow_id BIGINT NOT NULL,</span></span><br><span class="line"><span class="code">    approver_id INT NOT NULL,</span></span><br><span class="line"><span class="code">    action TINYINT COMMENT &#x27;1-通过 2-驳回&#x27;,</span></span><br><span class="line"><span class="code">    create_time DATETIME DEFAULT CURRENT_TIMESTAMP,</span></span><br><span class="line"><span class="code">    INDEX idx_workflow (workflow_id)</span></span><br><span class="line"><span class="code">);</span></span><br></pre></td></tr></table></figure>

<h3 id="2-死锁场景模拟"><a href="#2-死锁场景模拟" class="headerlink" title="2. 死锁场景模拟"></a>2. 死锁场景模拟</h3><p><strong>数据准备：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> workflow_approval (current_step, approver1_id, approver2_id) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1001</span>, <span class="number">1002</span>);</span><br></pre></td></tr></table></figure>

<p><strong>并发操作时序：</strong></p>
<table>
<thead>
<tr>
<th>时间</th>
<th>一级审批人（事务A）</th>
<th>二级审批人（事务B）</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>BEGIN;</td>
<td>BEGIN;</td>
</tr>
<tr>
<td>T2</td>
<td>UPDATE workflow_approval SET current_step&#x3D;2, approver1_time&#x3D;NOW() WHERE id&#x3D;1;</td>
<td>UPDATE workflow_approval SET current_step&#x3D;3, approver2_time&#x3D;NOW() WHERE id&#x3D;1;</td>
</tr>
<tr>
<td>T3</td>
<td>INSERT INTO approval_log VALUES (null,1,1001,1,NOW());</td>
<td>INSERT INTO approval_log VALUES (null,1,1002,1,NOW());</td>
</tr>
<tr>
<td>T4</td>
<td>COMMIT;</td>
<td>COMMIT;</td>
</tr>
</tbody></table>
<p><strong>死锁现象：</strong></p>
<ul>
<li>事务A持有主表行锁，等待日志表的插入锁</li>
<li>事务B同样持有主表行锁，等待日志表的插入锁</li>
<li>形成交叉等待的死锁局面</li>
</ul>
<h2 id="二、死锁现场分析"><a href="#二、死锁现场分析" class="headerlink" title="二、死锁现场分析"></a>二、死锁现场分析</h2><h3 id="1-查看死锁日志"><a href="#1-查看死锁日志" class="headerlink" title="1. 查看死锁日志"></a>1. 查看死锁日志</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> ENGINE INNODB STATUS\G</span><br></pre></td></tr></table></figure>

<p><strong>关键日志片段：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LATEST DETECTED DEADLOCK</span><br><span class="line">------------------------</span><br><span class="line">*** (1) TRANSACTION:</span><br><span class="line">TRANSACTION 2317, ACTIVE 5 sec inserting</span><br><span class="line">mysql tables in use 1, locked 1</span><br><span class="line">LOCK WAIT 2 lock struct(s), heap size 1136, 1 row lock(s)</span><br><span class="line">MySQL thread id 8, OS thread handle 140245463230208, query id 30 172.17.0.1 root update</span><br><span class="line">INSERT INTO approval_log VALUES (null,1,1001,1,NOW())</span><br><span class="line">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 2 page no 4 n bits 72 index PRIMARY of table `oa`.`approval_log` trx id 2317 lock_mode X insert intention waiting</span><br><span class="line"></span><br><span class="line">*** (2) TRANSACTION:</span><br><span class="line">TRANSACTION 2318, ACTIVE 3 sec inserting</span><br><span class="line">mysql tables in use 1, locked 1</span><br><span class="line">LOCK WAIT 2 lock struct(s), heap size 1136, 1 row lock(s)</span><br><span class="line">MySQL thread id 9, OS thread handle 140245462951680, query id 31 172.17.0.1 root update</span><br><span class="line">INSERT INTO approval_log VALUES (null,1,1002,1,NOW())</span><br><span class="line">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 2 page no 4 n bits 72 index PRIMARY of table `oa`.`approval_log` trx id 2318 lock_mode X insert intention waiting</span><br></pre></td></tr></table></figure>

<h3 id="2-问题诊断"><a href="#2-问题诊断" class="headerlink" title="2. 问题诊断"></a>2. 问题诊断</h3><ol>
<li><strong>锁升级顺序不一致</strong>：主表更新与日志表插入的操作顺序导致锁竞争</li>
<li><strong>索引缺失</strong>：approval_log表仅workflow_id有索引，主键自增存在间隙锁竞争</li>
<li><strong>事务粒度过大</strong>：审批操作与日志记录放在同一事务中</li>
</ol>
<h2 id="三、解决方案实施"><a href="#三、解决方案实施" class="headerlink" title="三、解决方案实施"></a>三、解决方案实施</h2><h3 id="1-操作顺序标准化"><a href="#1-操作顺序标准化" class="headerlink" title="1. 操作顺序标准化"></a>1. 操作顺序标准化</h3><p><strong>改造前：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line">beginTransaction();</span><br><span class="line">updateWorkflow();</span><br><span class="line">insertLog();</span><br><span class="line">commit();</span><br></pre></td></tr></table></figure>

<p><strong>改造后：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确顺序</span></span><br><span class="line">beginTransaction();</span><br><span class="line">insertLog();  <span class="comment">// 先操作日志表</span></span><br><span class="line">updateWorkflow(); <span class="comment">// 后操作主表</span></span><br><span class="line">commit();</span><br></pre></td></tr></table></figure>

<h3 id="2-索引优化"><a href="#2-索引优化" class="headerlink" title="2. 索引优化"></a>2. 索引优化</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加组合索引</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> approval_log </span><br><span class="line"><span class="keyword">ADD</span> INDEX idx_workflow_approver (workflow_id, approver_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键改造</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> approval_log </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PRIMARY KEY</span>, </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PRIMARY KEY</span> (workflow_id, log_id);</span><br></pre></td></tr></table></figure>

<h3 id="3-事务拆分"><a href="#3-事务拆分" class="headerlink" title="3. 事务拆分"></a>3. 事务拆分</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拆分事务</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">approveWorkflow</span><span class="params">(<span class="type">long</span> workflowId, <span class="type">int</span> approverId)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 先插入日志（独立事务）</span></span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;INSERT INTO approval_log(workflow_id,approver_id) VALUES (?,?)&quot;</span>, </span><br><span class="line">                          workflowId, approverId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 再更新主表（带重试机制）</span></span><br><span class="line">        retryTemplate.execute(ctx -&gt; &#123;</span><br><span class="line">            <span class="type">Workflow</span> <span class="variable">wf</span> <span class="operator">=</span> workflowDao.getWithLock(workflowId);</span><br><span class="line">            wf.setCurrentStep(wf.getCurrentStep()+<span class="number">1</span>);</span><br><span class="line">            workflowDao.update(wf);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (DataAccessException e) &#123;</span><br><span class="line">        <span class="comment">// 异常处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-重试机制实现"><a href="#4-重试机制实现" class="headerlink" title="4. 重试机制实现"></a>4. 重试机制实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RetryTemplate <span class="title function_">retryTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RetryTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RetryTemplate</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指数退避策略</span></span><br><span class="line">    <span class="type">ExponentialBackOffPolicy</span> <span class="variable">backOffPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExponentialBackOffPolicy</span>();</span><br><span class="line">    backOffPolicy.setInitialInterval(<span class="number">100</span>);</span><br><span class="line">    backOffPolicy.setMultiplier(<span class="number">2</span>);</span><br><span class="line">    backOffPolicy.setMaxInterval(<span class="number">3000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重试策略</span></span><br><span class="line">    <span class="type">SimpleRetryPolicy</span> <span class="variable">retryPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRetryPolicy</span>();</span><br><span class="line">    retryPolicy.setMaxAttempts(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    template.setBackOffPolicy(backOffPolicy);</span><br><span class="line">    template.setRetryPolicy(retryPolicy);</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、预防措施体系"><a href="#四、预防措施体系" class="headerlink" title="四、预防措施体系"></a>四、预防措施体系</h2><h3 id="1-锁监控方案"><a href="#1-锁监控方案" class="headerlink" title="1. 锁监控方案"></a>1. 锁监控方案</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 实时锁监控</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    r.trx_id waiting_trx_id,</span><br><span class="line">    r.trx_mysql_thread_id waiting_thread,</span><br><span class="line">    b.trx_id blocking_trx_id,</span><br><span class="line">    b.trx_mysql_thread_id blocking_thread</span><br><span class="line"><span class="keyword">FROM</span> information_schema.innodb_lock_waits w</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> information_schema.innodb_trx b <span class="keyword">ON</span> b.trx_id <span class="operator">=</span> w.blocking_trx_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> information_schema.innodb_trx r <span class="keyword">ON</span> r.trx_id <span class="operator">=</span> w.requesting_trx_id;</span><br></pre></td></tr></table></figure>


<h3 id="2-审批服务配置参数"><a href="#2-审批服务配置参数" class="headerlink" title="2. 审批服务配置参数"></a>2. 审批服务配置参数</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Spring配置示例</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">order_updates:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">order_inserts:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">jdbc:</span></span><br><span class="line">          <span class="attr">batch_size:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure>

<h2 id="五、经验总结"><a href="#五、经验总结" class="headerlink" title="五、经验总结"></a>五、经验总结</h2><h3 id="1-OA系统死锁预防要点"><a href="#1-OA系统死锁预防要点" class="headerlink" title="1. OA系统死锁预防要点"></a>1. OA系统死锁预防要点</h3><ul>
<li><strong>统一操作顺序</strong>：所有审批服务必须先写日志后更新主表</li>
<li><strong>索引双刃剑</strong>：在<code>approval_log</code>表增加<code>(workflow_id,approver_id)</code>组合索引</li>
<li><strong>事务最小化</strong>：将日志记录与业务操作拆分到不同事务</li>
<li><strong>版本号控制</strong>：主表增加version字段实现乐观锁</li>
</ul>
<h3 id="3-可扩展"><a href="#3-可扩展" class="headerlink" title="3. 可扩展"></a>3. 可扩展</h3><ul>
<li><strong>分布式锁应用</strong>：对于跨服务审批流程，采用Redis分布式锁协调</li>
<li><strong>流程引擎选型</strong>：考虑Activiti等工作流引擎的锁管理机制</li>
<li><strong>异步化改造</strong>：将审批日志写入Kafka，由消费者异步处理</li>
</ul>
]]></content>
      <tags>
        <tag>死锁处理</tag>
      </tags>
  </entry>
  <entry>
    <title>操作集合的Collections类</title>
    <url>/2024/06/20/%E6%93%8D%E4%BD%9C%E9%9B%86%E5%90%88%E7%9A%84Collections%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="首先出场的是java-util包下的Collections类，该类主要用于操作集合或者返回集合，强推。"><a href="#首先出场的是java-util包下的Collections类，该类主要用于操作集合或者返回集合，强推。" class="headerlink" title="首先出场的是java.util包下的Collections类，该类主要用于操作集合或者返回集合，强推。"></a>首先出场的是java.util包下的Collections类，该类主要用于操作集合或者返回集合，强推。</h1><h2 id="1-1-排序"><a href="#1-1-排序" class="headerlink" title="1.1 排序"></a>1.1 排序</h2><p>在工作中经常有对集合排序的需求。<br>看看使用Collections工具是如何实现升序和降序的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">Collections.sort(list);<span class="comment">//升序</span></span><br><span class="line">System.out.println(list);</span><br><span class="line">Collections.reverse(list);<span class="comment">//降序</span></span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>
<p>执行结果：<br>[1, 2, 3]<br>[3, 2, 1]</p>
<h2 id="1-2-获取最大或最小值"><a href="#1-2-获取最大或最小值" class="headerlink" title="1.2 获取最大或最小值"></a>1.2 获取最大或最小值</h2><p>有时候需要找出集合中的最大值或者最小值，这时可以使用Collections的max和min方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> Collections.max(list);<span class="comment">//获取最大值</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">min</span> <span class="operator">=</span> Collections.min(list);<span class="comment">//获取最小值</span></span><br><span class="line">System.out.println(max);</span><br><span class="line">System.out.println(min);</span><br></pre></td></tr></table></figure>
<p>执行结果：<br>3<br>1</p>
<h2 id="1-3-转换线程安全集合"><a href="#1-3-转换线程安全集合" class="headerlink" title="1.3 转换线程安全集合"></a>1.3 转换线程安全集合</h2><p>我们都知道，java中的很多集合，比如：ArrayList、LinkedList、HashMap、HashSet等，都是线程不安全的。<br>换句话说，这些集合在多线程的环境中，添加数据会出现异常。<br>这时，可以用Collections的synchronizedxxx方法，将这些线程不安全的集合，直接转换成线程安全集合。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; integers = Collections.synchronizedList(list);<span class="comment">//将ArrayList转换成线程安全集合</span></span><br><span class="line">System.out.println(integers);</span><br></pre></td></tr></table></figure>
<p>它的底层会创建SynchronizedRandomAccessList或者SynchronizedList类，这两个类的很多方法都会用synchronized加锁。</p>
<h2 id="1-4-返回空集合"><a href="#1-4-返回空集合" class="headerlink" title="1.4 返回空集合"></a>1.4 返回空集合</h2><p>有时，我们在判空之后，需要返回空集合，就可以使用emptyList方法，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title function_">fun</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (list == <span class="literal">null</span> || list.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//业务处理</span></span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.5 二分查找<br>binarySearch方法提供了一个非常好用的二分查找功能，只用传入指定集合和需要找到的key即可。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Collections.binarySearch(list, <span class="number">3</span>);<span class="comment">//二分查找</span></span><br><span class="line">System.out.println(i );</span><br></pre></td></tr></table></figure>
<p>执行结果：<br>2</p>
<h2 id="1-6-转换成不可修改集合"><a href="#1-6-转换成不可修改集合" class="headerlink" title="1.6 转换成不可修改集合"></a>1.6 转换成不可修改集合</h2><p>为了防止后续的程序把某个集合的结果修改了，有时候我们需要把某个集合定义成不可修改的，使用Collections的unmodifiablexxx方法就能轻松实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; integers = Collections.unmodifiableList(list);</span><br><span class="line">integers.add(<span class="number">4</span>);</span><br><span class="line">System.out.println(integers);</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.UnsupportedOperationException</span><br><span class="line">at java.util.Collections$UnmodifiableCollection.add(Collections.java:<span class="number">1055</span>)</span><br><span class="line">at com.sue.jump.service.test1.UtilTest.main(UtilTest.java:<span class="number">19</span>)</span><br></pre></td></tr></table></figure>
<p>Collections工具类中还有很多常用的方法，用上再更新。</p>
]]></content>
      <categories>
        <category>提升效率的轮子</category>
      </categories>
  </entry>
  <entry>
    <title>日志追踪</title>
    <url>/2024/12/14/%E6%97%A5%E5%BF%97%E8%BF%BD%E8%B8%AA/</url>
    <content><![CDATA[<h3 id="1-RestTemplate-配置"><a href="#1-RestTemplate-配置" class="headerlink" title="1. RestTemplate 配置"></a>1. RestTemplate 配置</h3><p>定义一个 <code>RestTemplate</code> 的配置类，用于创建 <code>RestTemplate</code> 实例，并为其添加了一个拦截器 <code>RestTemplateInterceptor</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">        restTemplate.setInterceptors(Collections.singletonList(restTemplateInterceptor()));</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplateInterceptor <span class="title function_">restTemplateInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplateInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-1-RestTemplateInterceptor"><a href="#1-1-RestTemplateInterceptor" class="headerlink" title="1.1 RestTemplateInterceptor"></a>1.1 RestTemplateInterceptor</h4><p><code>RestTemplateInterceptor</code> 是一个自定义的拦截器，用于在每次请求时执行一些额外的逻辑。例如，你可以在拦截器中添加日志、设置请求头等操作。以下是一个简单的实现示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateInterceptor</span> <span class="keyword">implements</span> <span class="title class_">ClientHttpRequestInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ClientHttpResponse <span class="title function_">intercept</span><span class="params">(HttpRequest request, <span class="type">byte</span>[] body, ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 在请求之前执行的逻辑</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">traceId</span> <span class="operator">=</span> MdcUtil.get();</span><br><span class="line">        <span class="keyword">if</span> (traceId != <span class="literal">null</span>) &#123;</span><br><span class="line">            request.getHeaders().add(<span class="string">&quot;TRACE_ID&quot;</span>, traceId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行请求</span></span><br><span class="line">        <span class="type">ClientHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> execution.execute(request, body);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在请求之后执行的逻辑</span></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-MdcUtil-工具类"><a href="#2-MdcUtil-工具类" class="headerlink" title="2. MdcUtil 工具类"></a>2. MdcUtil 工具类</h3><p><code>MdcUtil</code> 类用于操作 MDC（Mapped Diagnostic Context），它利用 <code>ThreadLocal</code> 在线程中存储和获取 <code>traceId</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MdcUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TRACE_ID</span> <span class="operator">=</span> <span class="string">&quot;TRACE_ID&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MDC.get(TRACE_ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        MDC.put(TRACE_ID, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-MDC-的作用"><a href="#2-1-MDC-的作用" class="headerlink" title="2.1 MDC 的作用"></a>2.1 MDC 的作用</h4><p>MDC 是一个线程安全的上下文存储工具，它允许你在日志中添加额外的信息，如 <code>traceId</code>。这些信息在同一个线程中是共享的，不会影响其他线程。这使得在分布式系统中追踪请求变得非常方便。</p>
<h3 id="3-在-Filter-中生成和存储-traceId"><a href="#3-在-Filter-中生成和存储-traceId" class="headerlink" title="3. 在 Filter 中生成和存储 traceId"></a>3. 在 Filter 中生成和存储 traceId</h3><p>你可以在一个 <code>Filter</code> 中生成 <code>traceId</code>，并将其添加到 MDC 中。这样，同一个请求的其他地方都可以通过 <code>MdcUtil.get()</code> 获取到该 <code>traceId</code>。</p>
<p>以下是一个示例 <code>Filter</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TraceIdFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 生成 traceId</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">traceId</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 traceId 添加到 MDC 中</span></span><br><span class="line">        MdcUtil.add(traceId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 继续处理请求</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 清理 MDC 中的 traceId</span></span><br><span class="line">            MDC.remove(MdcUtil.TRACE_ID);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-为什么使用-MDC"><a href="#3-1-为什么使用-MDC" class="headerlink" title="3.1 为什么使用 MDC"></a>3.1 为什么使用 MDC</h4><ul>
<li><strong>线程安全</strong>：MDC 使用 <code>ThreadLocal</code> 存储数据，每个线程都有自己的独立存储空间，不会相互干扰。</li>
<li><strong>方便追踪</strong>：在同一个请求的生命周期内，可以通过 <code>MdcUtil.get()</code> 获取 <code>traceId</code>，方便在日志中记录和追踪请求。</li>
</ul>
<h3 id="4-日志记录"><a href="#4-日志记录" class="headerlink" title="4. 日志记录"></a>4. 日志记录</h3><p>在你的日志配置文件中（如 <code>logback.xml</code>），可以配置日志格式，将 <code>traceId</code> 添加到日志中。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%thread] %-5level %logger&#123;36&#125; - %X&#123;TRACE_ID&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样，每条日志都会包含 <code>TRACE_ID</code>，方便追踪请求的来源。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过 <code>RestTemplate</code> 和 <code>MDC</code>，你可以实现一个强大的日志追踪系统。<code>RestTemplateInterceptor</code> 在每次请求时将 <code>traceId</code> 添加到请求头中，<code>MdcUtil</code> 则负责在 MDC 中存储和获取 <code>traceId</code>。在 <code>Filter</code> 中生成 <code>traceId</code> 并添加到 MDC 中，确保整个请求生命周期内都可以访问到 <code>traceId</code>。这种方式不仅线程安全，而且非常方便在分布式系统中追踪请求。</p>
]]></content>
      <categories>
        <category>提升效率的轮子</category>
      </categories>
  </entry>
  <entry>
    <title>难读的Lambda</title>
    <url>/2024/06/15/%E9%9A%BE%E8%AF%BB%E7%9A%84Lambda/</url>
    <content><![CDATA[<h3 id="Lambda在集合当中的使用"><a href="#Lambda在集合当中的使用" class="headerlink" title="Lambda在集合当中的使用"></a>Lambda在集合当中的使用</h3><p>为了能够让 Lambda 和 Java 的集合类更好地一起使用，集合当中新增了部分接口，以便与 Lambda 表达式对接。以下是对应接口的常用方法及其使用：</p>
<h4 id="1-1-Map接口"><a href="#1-1-Map接口" class="headerlink" title="1.1 Map接口"></a>1.1 Map接口</h4><p><strong>forEach()方法</strong></p>
<p>使用 Lambda 表达式对 <code>Map</code> 中的每个键值对执行特定的操作。<code>BiConsumer</code> 接口的 Lambda 表达式用于定义操作逻辑，接受键和值作为参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; scores = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">scores.put(<span class="string">&quot;Alice&quot;</span>, <span class="number">90</span>);</span><br><span class="line">scores.put(<span class="string">&quot;Bob&quot;</span>, <span class="number">80</span>);</span><br><span class="line">scores.put(<span class="string">&quot;Charlie&quot;</span>, <span class="number">95</span>);</span><br><span class="line"></span><br><span class="line">scores.forEach((name, score) -&gt; System.out.println(name + <span class="string">&quot;: &quot;</span> + score));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// Alice: 90</span></span><br><span class="line"><span class="comment">// Bob: 80</span></span><br><span class="line"><span class="comment">// Charlie: 95</span></span><br></pre></td></tr></table></figure>

<p><strong>replaceAll()方法</strong></p>
<p>使用 Lambda 表达式替换 <code>Map</code> 中的所有值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; scores = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">scores.put(<span class="string">&quot;Alice&quot;</span>, <span class="number">90</span>);</span><br><span class="line">scores.put(<span class="string">&quot;Bob&quot;</span>, <span class="number">80</span>);</span><br><span class="line">scores.put(<span class="string">&quot;Charlie&quot;</span>, <span class="number">95</span>);</span><br><span class="line"></span><br><span class="line">scores.replaceAll((name, score) -&gt; score + <span class="number">5</span>); <span class="comment">// 将每个分数加上5</span></span><br><span class="line"></span><br><span class="line">System.out.println(scores);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// &#123;Alice=95, Bob=85, Charlie=100&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>putIfAbsent()方法</strong></p>
<p>使用 Lambda 表达式在 <code>Map</code> 中插入键值对，仅当键不存在时才插入。Lambda 表达式用于定义要插入的值，接受键作为参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; scores = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">scores.put(<span class="string">&quot;Alice&quot;</span>, <span class="number">90</span>);</span><br><span class="line">scores.put(<span class="string">&quot;Bob&quot;</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">scores.putIfAbsent(<span class="string">&quot;Charlie&quot;</span>, <span class="number">95</span>); <span class="comment">// 插入键值对&quot;Charlie=95&quot;</span></span><br><span class="line"></span><br><span class="line">System.out.println(scores);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// &#123;Alice=90, Bob=80, Charlie=95&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>remove()方法</strong></p>
<p>使用 Lambda 表达式根据键和值从 <code>Map</code> 中移除指定的键值对。Lambda 表达式用于定义要移除的值，接受键和当前值作为参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; scores = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">scores.put(<span class="string">&quot;Alice&quot;</span>, <span class="number">90</span>);</span><br><span class="line">scores.put(<span class="string">&quot;Bob&quot;</span>, <span class="number">80</span>);</span><br><span class="line">scores.put(<span class="string">&quot;Charlie&quot;</span>, <span class="number">95</span>);</span><br><span class="line"></span><br><span class="line">scores.remove(<span class="string">&quot;Alice&quot;</span>, <span class="number">90</span>); <span class="comment">// 移除键值对&quot;Alice=90&quot;</span></span><br><span class="line"></span><br><span class="line">System.out.println(scores);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// &#123;Bob=80, Charlie=95&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>replace()方法</strong></p>
<p>使用 Lambda 表达式替换 <code>Map</code> 中指定键的值。Lambda 表达式用于定义要替换的值，接受键和当前值作为参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; scores = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">scores.put(<span class="string">&quot;Alice&quot;</span>, <span class="number">90</span>);</span><br><span class="line">scores.put(<span class="string">&quot;Bob&quot;</span>, <span class="number">80</span>);</span><br><span class="line">scores.put(<span class="string">&quot;Charlie&quot;</span>, <span class="number">95</span>);</span><br><span class="line"></span><br><span class="line">scores.replace(<span class="string">&quot;Alice&quot;</span>, <span class="number">100</span>); <span class="comment">// 将键&quot;Alice&quot;的值替换为100</span></span><br><span class="line"></span><br><span class="line">System.out.println(scores);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// &#123;Alice=100, Bob=80, Charlie=95&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-Collection接口"><a href="#1-2-Collection接口" class="headerlink" title="1.2 Collection接口"></a>1.2 Collection接口</h4><p><strong>forEach()方法</strong></p>
<p>使用 <code>forEach()</code> 方法可以方便地遍历集合中的元素，并对每个元素执行自定义操作，从而简化了对集合的处理过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; fruits = Arrays.asList(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>);</span><br><span class="line"></span><br><span class="line">fruits.forEach(fruit -&gt; System.out.println(<span class="string">&quot;I like &quot;</span> + fruit));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// I like Apple</span></span><br><span class="line"><span class="comment">// I like Banana</span></span><br><span class="line"><span class="comment">// I like Orange</span></span><br></pre></td></tr></table></figure>

<p><strong>removeIf() 方法</strong></p>
<p><code>removeIf(Predicate&lt;? super E&gt; filter)</code>：使用 Lambda 表达式来移除集合中满足特定条件的元素。<code>Predicate</code> 接口的 Lambda 表达式用于定义过滤条件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">numbers.removeIf(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>); <span class="comment">// 移除所有偶数</span></span><br><span class="line"></span><br><span class="line">System.out.println(numbers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：[1, 3, 5]</span></span><br></pre></td></tr></table></figure>

<p><strong>spliterator() 方法</strong></p>
<p>返回一个可用于并行迭代集合的 <code>Spliterator</code> 对象。<code>Spliterator</code> 接口的 <code>forEachRemaining()</code> 方法可以与 Lambda 表达式一起使用，对集合中的每个元素执行特定操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; fruits = Arrays.asList(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>);</span><br><span class="line"></span><br><span class="line">Spliterator&lt;String&gt; spliterator = fruits.spliterator();</span><br><span class="line">spliterator.forEachRemaining(fruit -&gt; System.out.println(fruit));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// Apple</span></span><br><span class="line"><span class="comment">// Banana</span></span><br><span class="line"><span class="comment">// Orange</span></span><br></pre></td></tr></table></figure>

<p><strong>stream()方法</strong></p>
<p>返回一个顺序流，用于对集合中的元素进行顺序操作。可以与 <code>forEach()</code> 方法结合使用，对集合中的每个元素执行特定操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line"></span><br><span class="line">names.stream()</span><br><span class="line">.forEach(name -&gt; System.out.println(<span class="string">&quot;Hello, &quot;</span> + name));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// Hello, Alice</span></span><br><span class="line"><span class="comment">// Hello, Bob</span></span><br><span class="line"><span class="comment">// Hello, Charlie</span></span><br></pre></td></tr></table></figure>

<p><strong>parallelStream() 方法</strong></p>
<p>返回一个并行流，用于对集合中的元素进行并行操作。可以与 <code>forEach()</code> 方法结合使用，对集合中的每个元素执行特定操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>);</span><br><span class="line"></span><br><span class="line">names.parallelStream()</span><br><span class="line">.forEach(name -&gt; System.out.println(<span class="string">&quot;Hello, &quot;</span> + name));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// Hello, Alice</span></span><br><span class="line"><span class="comment">// Hello, Bob</span></span><br><span class="line"><span class="comment">// Hello, Charlie</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-List接口"><a href="#1-3-List接口" class="headerlink" title="1.3 List接口"></a>1.3 List接口</h4><p><strong>replaceAll()方法</strong></p>
<p>使用 Lambda 表达式替换列表中的所有元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">numbers.replaceAll(n -&gt; n * <span class="number">2</span>); <span class="comment">// 将列表中的每个元素乘以2</span></span><br><span class="line"></span><br><span class="line">System.out.println(numbers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：[2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>

<p><strong>sort()方法</strong></p>
<p>使用 Lambda 表达式对列表进行排序。<code>Comparator</code> 接口的 Lambda 表达式用于定义排序逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>));</span><br><span class="line"></span><br><span class="line">names.sort((name1, name2) -&gt; name1.compareToIgnoreCase(name2)); <span class="comment">// 根据名称的字母顺序排序，忽略大小写</span></span><br><span class="line"></span><br><span class="line">System.out.println(names);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：[Alice, Bob, Charlie]</span></span><br></pre></td></tr></table></figure>

<h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h3><p>Lambda 表达式的优点很明显，在代码层次上来说，使代码变得非常的简洁。缺点也很明显，代码不易读，特别是对我这种不常用的，理解对应的业务逻辑会很难，还是换成for循环会更易读。</p>
<p><strong>优点：</strong></p>
<ul>
<li><strong>代码简洁，开发迅速</strong>：Lambda 表达式减少了代码量，使代码更加简洁。</li>
<li><strong>方便函数式编程</strong>：Lambda 表达式支持函数式编程，使代码更加灵活。</li>
<li><strong>非常容易进行并行计算</strong>：通过并行流（<code>parallelStream()</code>），可以轻松实现并行计算。</li>
<li><strong>改善了集合操作</strong>：Lambda 表达式与集合操作结合，使集合操作更加方便。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><strong>代码可读性变差</strong>：Lambda 表达式可能会使代码难以理解，特别是对于不熟悉函数式编程的开发者。</li>
<li><strong>性能问题</strong>：在非并行计算中，某些操作的性能可能不如传统的 <code>for</code> 循环。</li>
<li><strong>调试困难</strong>：Lambda 表达式可能会使调试变得更加复杂。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>横扫if-else</title>
    <url>/2024/06/07/%E6%A8%AA%E6%89%ABif-else/</url>
    <content><![CDATA[<h1 id="策略模式-工厂方法"><a href="#策略模式-工厂方法" class="headerlink" title="策略模式 + 工厂方法"></a>策略模式 + 工厂方法</h1><h3 id="策略模式-工厂方法是解决-if…else-用得非常多的方案，它和表驱动法有点儿类似。使用策略模式-工厂方法分为几个步骤，以上面例子为例："><a href="#策略模式-工厂方法是解决-if…else-用得非常多的方案，它和表驱动法有点儿类似。使用策略模式-工厂方法分为几个步骤，以上面例子为例：" class="headerlink" title="策略模式 + 工厂方法是解决 if…else 用得非常多的方案，它和表驱动法有点儿类似。使用策略模式 + 工厂方法分为几个步骤，以上面例子为例："></a>策略模式 + 工厂方法是解决 if…else 用得非常多的方案，它和表驱动法有点儿类似。使用策略模式 + 工厂方法分为几个步骤，以上面例子为例：</h3><p>把条件模块抽象为一个公共的接口，策略接口<br>public interface ActionService {<br>void doAction();<br>}<br>根据每个逻辑，定义出自己具体的策略实现类，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActionService1</span> <span class="keyword">implements</span> <span class="title class_">ActionService</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAction</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActionService2</span> <span class="keyword">implements</span> <span class="title class_">ActionService</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAction</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略其他策略</span></span><br><span class="line"></span><br><span class="line">工厂类，统一调度，用来管理这些策略，如下：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActionServiceFactory</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">ActionServiceFactory</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ActionServiceFactory instance=<span class="keyword">new</span> <span class="title class_">ActionServiceFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ActionServiceFactory <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String,ActionService&gt; ACTION_SERVICE_MAP = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, ActionService&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ACTION_SERVICE_MAP.put(<span class="string">&quot;action1&quot;</span>,<span class="keyword">new</span> <span class="title class_">ActionService1</span>());</span><br><span class="line">        ACTION_SERVICE_MAP.put(<span class="string">&quot;action2&quot;</span>,<span class="keyword">new</span> <span class="title class_">ActionService2</span>());</span><br><span class="line">        ACTION_SERVICE_MAP.put(<span class="string">&quot;action3&quot;</span>,<span class="keyword">new</span> <span class="title class_">ActionService3</span>());</span><br><span class="line">        ACTION_SERVICE_MAP.put(<span class="string">&quot;action4&quot;</span>,<span class="keyword">new</span> <span class="title class_">ActionService4</span>());</span><br><span class="line">        ACTION_SERVICE_MAP.put(<span class="string">&quot;action5&quot;</span>,<span class="keyword">new</span> <span class="title class_">ActionService5</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ActionService <span class="title function_">getActionService</span><span class="params">(String actionCode)</span> &#123;</span><br><span class="line">        <span class="type">ActionService</span> <span class="variable">actionService</span> <span class="operator">=</span> ACTION_SERVICE_MAP.get(actionCode);</span><br><span class="line">        <span class="keyword">if</span> (actionService == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;非法 actionCode&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> actionService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAction</span><span class="params">(String actionCode)</span> &#123;</span><br><span class="line">        getActionService(actionCode).doAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用:<br>ActionServiceFactory.getInstance().doAction(“action1”);<br>这种优化方式也是很优雅的，特别适合分支较多，逻辑较为复杂的代码块，这种方式将分支逻辑与业务代码解耦了，是一种很不错的方案。</p>
<p>表驱动法<br>表驱动法，是一种让你可以在表中查找信息，而不必用过多的 if…else 来把他们找出来的方法。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;code1&quot;</span>.equals(action)) &#123;</span><br><span class="line">doAction1();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;code2&quot;</span>.equals(action)) &#123;</span><br><span class="line">doAction2();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;code3&quot;</span>.equals(action)) &#123;</span><br><span class="line">doAction3();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;code4&quot;</span>.equals(action)) &#123;</span><br><span class="line">doAction4();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;code5&quot;</span>.equals(action)) &#123;</span><br><span class="line">doAction5();</span><br><span class="line">&#125;</span><br><span class="line">优化方法如下：</span><br><span class="line">Map&lt;String, Function&lt;?&gt; action&gt; actionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">action.put(<span class="string">&quot;code1&quot;</span>,() -&gt; &#123;doAction1()&#125;);</span><br><span class="line">action.put(<span class="string">&quot;code2&quot;</span>,() -&gt; &#123;doAction2()&#125;);</span><br><span class="line">action.put(<span class="string">&quot;code3&quot;</span>,() -&gt; &#123;doAction3()&#125;);</span><br><span class="line">action.put(<span class="string">&quot;code4&quot;</span>,() -&gt; &#123;doAction4()&#125;);</span><br><span class="line">action.put(<span class="string">&quot;code5&quot;</span>,() -&gt; &#123;doAction5()&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">actionMap.get(action).apply();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其实这种方式也不是很好，因为它会显得代码非常臃肿。一种变形方案是将 doAction() 抽象成类。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 先定义一个 ActionService 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ActionService</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doAction</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 然后定义 5 个实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActionService1</span> <span class="keyword">implements</span> <span class="title class_">ActionService</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAction</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 加入表中</span></span><br><span class="line">Map&lt;String, ActionService&gt; actionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">action.put(<span class="string">&quot;code1&quot;</span>,<span class="keyword">new</span> <span class="title class_">ActionService1</span>());</span><br><span class="line">action.put(<span class="string">&quot;code2&quot;</span>,<span class="keyword">new</span> <span class="title class_">ActionService2</span>());</span><br><span class="line">action.put(<span class="string">&quot;code3&quot;</span>,<span class="keyword">new</span> <span class="title class_">ActionService3</span>());</span><br><span class="line">action.put(<span class="string">&quot;code4&quot;</span>,<span class="keyword">new</span> <span class="title class_">ActionService4</span>());</span><br><span class="line">action.put(<span class="string">&quot;code5&quot;</span>,<span class="keyword">new</span> <span class="title class_">ActionService5</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 调用</span></span><br><span class="line">actionMap.get(action).doAction();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
